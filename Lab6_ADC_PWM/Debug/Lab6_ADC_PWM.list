
Lab6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000974c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003050  080098dc  080098dc  000198dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c92c  0800c92c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c92c  0800c92c  0001c92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c934  0800c934  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c934  0800c934  0001c934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c938  0800c938  0001c938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c93c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000003ac  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000042c  2000042c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4e3  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000453e  00000000  00000000  0003f593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  00043ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  000451d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026302  00000000  00000000  000466f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fce4  00000000  00000000  0006c9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0043  00000000  00000000  0008c6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016c721  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006278  00000000  00000000  0016c774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098c4 	.word	0x080098c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080098c4 	.word	0x080098c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <MX_ADC1_Init+0x108>)
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <MX_ADC1_Init+0x10c>)
 8000dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <MX_ADC1_Init+0x108>)
 8000de4:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <MX_ADC1_Init+0x110>)
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df0:	2205      	movs	r2, #5
 8000df2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e02:	482a      	ldr	r0, [pc, #168]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e04:	f002 fb14 	bl	8003430 <HAL_ADC_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f001 fd57 	bl	80028c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e12:	2308      	movs	r3, #8
 8000e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4822      	ldr	r0, [pc, #136]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e24:	f002 fc76 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e2e:	f001 fd47 	bl	80028c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e32:	2309      	movs	r3, #9
 8000e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481b      	ldr	r0, [pc, #108]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e40:	f002 fc68 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e4a:	f001 fd39 	bl	80028c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e52:	2303      	movs	r3, #3
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e5c:	f002 fc5a 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e66:	f001 fd2b 	bl	80028c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e6a:	230b      	movs	r3, #11
 8000e6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e78:	f002 fc4c 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e82:	f001 fd1d 	bl	80028c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e86:	230c      	movs	r3, #12
 8000e88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e94:	f002 fc3e 	bl	8003714 <HAL_ADC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e9e:	f001 fd0f 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000c4 	.word	0x200000c4
 8000eb0:	40012000 	.word	0x40012000
 8000eb4:	0f000001 	.word	0x0f000001

08000eb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a3c      	ldr	r2, [pc, #240]	; (8000fc8 <HAL_ADC_MspInit+0x110>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d171      	bne.n	8000fbe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a3a      	ldr	r2, [pc, #232]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a33      	ldr	r2, [pc, #204]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a2c      	ldr	r2, [pc, #176]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <HAL_ADC_MspInit+0x118>)
 8000f42:	f003 fb9b 	bl	800467c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f46:	2303      	movs	r3, #3
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <HAL_ADC_MspInit+0x11c>)
 8000f5a:	f003 fb8f 	bl	800467c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f60:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0x124>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fa4:	f002 ff68 	bl	8003e78 <HAL_DMA_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fae:	f001 fc87 	bl	80028c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	2000010c 	.word	0x2000010c
 8000fdc:	40026410 	.word	0x40026410

08000fe0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <button_init+0x14>)
 8000fea:	f003 fce3 	bl	80049b4 <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020c00 	.word	0x40020c00

08000ff8 <button_Scan>:

void button_Scan(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2108      	movs	r1, #8
 8001002:	482f      	ldr	r0, [pc, #188]	; (80010c0 <button_Scan+0xc8>)
 8001004:	f003 fcd6 	bl	80049b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	2108      	movs	r1, #8
 800100c:	482c      	ldr	r0, [pc, #176]	; (80010c0 <button_Scan+0xc8>)
 800100e:	f003 fcd1 	bl	80049b4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001012:	230a      	movs	r3, #10
 8001014:	2202      	movs	r2, #2
 8001016:	492b      	ldr	r1, [pc, #172]	; (80010c4 <button_Scan+0xcc>)
 8001018:	482b      	ldr	r0, [pc, #172]	; (80010c8 <button_Scan+0xd0>)
 800101a:	f005 faf8 	bl	800660e <HAL_SPI_Receive>
	  int button_index = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001026:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	e03f      	b.n	80010ae <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db06      	blt.n	8001042 <button_Scan+0x4a>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b03      	cmp	r3, #3
 8001038:	dc03      	bgt.n	8001042 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e018      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b03      	cmp	r3, #3
 8001046:	dd07      	ble.n	8001058 <button_Scan+0x60>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b07      	cmp	r3, #7
 800104c:	dc04      	bgt.n	8001058 <button_Scan+0x60>
			  button_index = 7 - i;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f1c3 0307 	rsb	r3, r3, #7
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e00d      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b07      	cmp	r3, #7
 800105c:	dd06      	ble.n	800106c <button_Scan+0x74>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0b      	cmp	r3, #11
 8001062:	dc03      	bgt.n	800106c <button_Scan+0x74>
			  button_index = i + 4;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3304      	adds	r3, #4
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e003      	b.n	8001074 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f1c3 0317 	rsb	r3, r3, #23
 8001072:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <button_Scan+0xcc>)
 8001076:	881a      	ldrh	r2, [r3, #0]
 8001078:	897b      	ldrh	r3, [r7, #10]
 800107a:	4013      	ands	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <button_Scan+0x96>
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <button_Scan+0xd4>)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2100      	movs	r1, #0
 8001088:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800108c:	e009      	b.n	80010a2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <button_Scan+0xd4>)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	3301      	adds	r3, #1
 8001098:	b299      	uxth	r1, r3
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <button_Scan+0xd4>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80010a2:	897b      	ldrh	r3, [r7, #10]
 80010a4:	085b      	lsrs	r3, r3, #1
 80010a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	ddbc      	ble.n	800102e <button_Scan+0x36>
	  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	2000009c 	.word	0x2000009c
 80010c8:	20000288 	.word	0x20000288
 80010cc:	2000016c 	.word	0x2000016c

080010d0 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80010d4:	2100      	movs	r1, #0
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <buzzer_init+0x10>)
 80010d8:	f005 ffda 	bl	8007090 <HAL_TIM_PWM_Start>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200002e0 	.word	0x200002e0

080010e4 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <buzzer_SetVolume+0x28>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <buzzer_SetVolume+0x28>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <buzzer_SetVolume+0x2c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2000009e 	.word	0x2000009e
 8001110:	200002e0 	.word	0x200002e0

08001114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_DMA_Init+0x3c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <MX_DMA_Init+0x3c>)
 8001124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_DMA_Init+0x3c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2038      	movs	r0, #56	; 0x38
 800113c:	f002 fe65 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001140:	2038      	movs	r0, #56	; 0x38
 8001142:	f002 fe7e 	bl	8003e42 <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8001158:	2016      	movs	r0, #22
 800115a:	f002 f885 	bl	8003268 <DEC2BCD>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <ds3231_init+0x5c>)
 8001164:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8001166:	2015      	movs	r0, #21
 8001168:	f002 f87e 	bl	8003268 <DEC2BCD>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <ds3231_init+0x5c>)
 8001172:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8001174:	2006      	movs	r0, #6
 8001176:	f002 f877 	bl	8003268 <DEC2BCD>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <ds3231_init+0x5c>)
 8001180:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8001182:	200f      	movs	r0, #15
 8001184:	f002 f870 	bl	8003268 <DEC2BCD>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <ds3231_init+0x5c>)
 800118e:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8001190:	2009      	movs	r0, #9
 8001192:	f002 f869 	bl	8003268 <DEC2BCD>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <ds3231_init+0x5c>)
 800119c:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 800119e:	2017      	movs	r0, #23
 80011a0:	f002 f862 	bl	8003268 <DEC2BCD>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b01      	ldr	r3, [pc, #4]	; (80011b0 <ds3231_init+0x5c>)
 80011aa:	719a      	strb	r2, [r3, #6]
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000194 	.word	0x20000194

080011b4 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af04      	add	r7, sp, #16
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 f84e 	bl	8003268 <DEC2BCD>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	230a      	movs	r3, #10
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	f107 030f 	add.w	r3, r7, #15
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	21d0      	movs	r1, #208	; 0xd0
 80011e6:	4803      	ldr	r0, [pc, #12]	; (80011f4 <ds3231_Write+0x40>)
 80011e8:	f003 fd5c 	bl	8004ca4 <HAL_I2C_Mem_Write>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001ec 	.word	0x200001ec

080011f8 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80011fe:	230a      	movs	r3, #10
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2307      	movs	r3, #7
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <ds3231_ReadTime+0xa4>)
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	2200      	movs	r2, #0
 800120e:	21d0      	movs	r1, #208	; 0xd0
 8001210:	4823      	ldr	r0, [pc, #140]	; (80012a0 <ds3231_ReadTime+0xa8>)
 8001212:	f003 fe41 	bl	8004e98 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <ds3231_ReadTime+0xa4>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f002 f80a 	bl	8003234 <BCD2DEC>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <ds3231_ReadTime+0xac>)
 8001226:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <ds3231_ReadTime+0xa4>)
 800122a:	785b      	ldrb	r3, [r3, #1]
 800122c:	4618      	mov	r0, r3
 800122e:	f002 f801 	bl	8003234 <BCD2DEC>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <ds3231_ReadTime+0xb0>)
 8001238:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <ds3231_ReadTime+0xa4>)
 800123c:	789b      	ldrb	r3, [r3, #2]
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fff8 	bl	8003234 <BCD2DEC>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <ds3231_ReadTime+0xb4>)
 800124a:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <ds3231_ReadTime+0xa4>)
 800124e:	78db      	ldrb	r3, [r3, #3]
 8001250:	4618      	mov	r0, r3
 8001252:	f001 ffef 	bl	8003234 <BCD2DEC>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <ds3231_ReadTime+0xb8>)
 800125c:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <ds3231_ReadTime+0xa4>)
 8001260:	791b      	ldrb	r3, [r3, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	f001 ffe6 	bl	8003234 <BCD2DEC>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <ds3231_ReadTime+0xbc>)
 800126e:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <ds3231_ReadTime+0xa4>)
 8001272:	795b      	ldrb	r3, [r3, #5]
 8001274:	4618      	mov	r0, r3
 8001276:	f001 ffdd 	bl	8003234 <BCD2DEC>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <ds3231_ReadTime+0xc0>)
 8001280:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <ds3231_ReadTime+0xa4>)
 8001284:	799b      	ldrb	r3, [r3, #6]
 8001286:	4618      	mov	r0, r3
 8001288:	f001 ffd4 	bl	8003234 <BCD2DEC>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <ds3231_ReadTime+0xc4>)
 8001292:	701a      	strb	r2, [r3, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000194 	.word	0x20000194
 80012a0:	200001ec 	.word	0x200001ec
 80012a4:	2000018c 	.word	0x2000018c
 80012a8:	2000018e 	.word	0x2000018e
 80012ac:	20000191 	.word	0x20000191
 80012b0:	20000190 	.word	0x20000190
 80012b4:	2000018f 	.word	0x2000018f
 80012b8:	20000192 	.word	0x20000192
 80012bc:	2000018d 	.word	0x2000018d

080012c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08e      	sub	sp, #56	; 0x38
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <MX_FSMC_Init+0xec>)
 80012ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <MX_FSMC_Init+0xec>)
 80012f6:	4a2e      	ldr	r2, [pc, #184]	; (80013b0 <MX_FSMC_Init+0xf0>)
 80012f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <MX_FSMC_Init+0xec>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <MX_FSMC_Init+0xec>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <MX_FSMC_Init+0xec>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_FSMC_Init+0xec>)
 800130e:	2210      	movs	r2, #16
 8001310:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <MX_FSMC_Init+0xec>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <MX_FSMC_Init+0xec>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_FSMC_Init+0xec>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_FSMC_Init+0xec>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_FSMC_Init+0xec>)
 800132c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_FSMC_Init+0xec>)
 8001334:	2200      	movs	r2, #0
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_FSMC_Init+0xec>)
 800133a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_FSMC_Init+0xec>)
 8001342:	2200      	movs	r2, #0
 8001344:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_FSMC_Init+0xec>)
 8001348:	2200      	movs	r2, #0
 800134a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_FSMC_Init+0xec>)
 800134e:	2200      	movs	r2, #0
 8001350:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001352:	230f      	movs	r3, #15
 8001354:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001356:	230f      	movs	r3, #15
 8001358:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800135a:	233c      	movs	r3, #60	; 0x3c
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001362:	2310      	movs	r3, #16
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001366:	2311      	movs	r3, #17
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800136e:	2308      	movs	r3, #8
 8001370:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001372:	230f      	movs	r3, #15
 8001374:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001376:	2309      	movs	r3, #9
 8001378:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800137e:	2310      	movs	r3, #16
 8001380:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001382:	2311      	movs	r3, #17
 8001384:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800138a:	463a      	mov	r2, r7
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_FSMC_Init+0xec>)
 8001394:	f005 fd1e 	bl	8006dd4 <HAL_SRAM_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800139e:	f001 fa8f 	bl	80028c0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013a2:	bf00      	nop
 80013a4:	3738      	adds	r7, #56	; 0x38
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000019c 	.word	0x2000019c
 80013b0:	a0000104 	.word	0xa0000104

080013b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <HAL_FSMC_MspInit+0x88>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d131      	bne.n	8001434 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_FSMC_MspInit+0x88>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_FSMC_MspInit+0x8c>)
 80013dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <HAL_FSMC_MspInit+0x8c>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6393      	str	r3, [r2, #56]	; 0x38
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_FSMC_MspInit+0x8c>)
 80013e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80013f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80013f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001404:	230c      	movs	r3, #12
 8001406:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <HAL_FSMC_MspInit+0x90>)
 800140e:	f003 f935 	bl	800467c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001412:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001416:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001424:	230c      	movs	r3, #12
 8001426:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4806      	ldr	r0, [pc, #24]	; (8001448 <HAL_FSMC_MspInit+0x94>)
 800142e:	f003 f925 	bl	800467c <HAL_GPIO_Init>
 8001432:	e000      	b.n	8001436 <HAL_FSMC_MspInit+0x82>
    return;
 8001434:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200000a0 	.word	0x200000a0
 8001440:	40023800 	.word	0x40023800
 8001444:	40021000 	.word	0x40021000
 8001448:	40020c00 	.word	0x40020c00

0800144c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001454:	f7ff ffae 	bl	80013b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	; 0x38
 8001464:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
 800147a:	4b76      	ldr	r3, [pc, #472]	; (8001654 <MX_GPIO_Init+0x1f4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a75      	ldr	r2, [pc, #468]	; (8001654 <MX_GPIO_Init+0x1f4>)
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b73      	ldr	r3, [pc, #460]	; (8001654 <MX_GPIO_Init+0x1f4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	623b      	str	r3, [r7, #32]
 8001490:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	4b6f      	ldr	r3, [pc, #444]	; (8001654 <MX_GPIO_Init+0x1f4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a6e      	ldr	r2, [pc, #440]	; (8001654 <MX_GPIO_Init+0x1f4>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b6c      	ldr	r3, [pc, #432]	; (8001654 <MX_GPIO_Init+0x1f4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	4b68      	ldr	r3, [pc, #416]	; (8001654 <MX_GPIO_Init+0x1f4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a67      	ldr	r2, [pc, #412]	; (8001654 <MX_GPIO_Init+0x1f4>)
 80014b8:	f043 0320 	orr.w	r3, r3, #32
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b65      	ldr	r3, [pc, #404]	; (8001654 <MX_GPIO_Init+0x1f4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0320 	and.w	r3, r3, #32
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	4b61      	ldr	r3, [pc, #388]	; (8001654 <MX_GPIO_Init+0x1f4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a60      	ldr	r2, [pc, #384]	; (8001654 <MX_GPIO_Init+0x1f4>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b5e      	ldr	r3, [pc, #376]	; (8001654 <MX_GPIO_Init+0x1f4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b5a      	ldr	r3, [pc, #360]	; (8001654 <MX_GPIO_Init+0x1f4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a59      	ldr	r2, [pc, #356]	; (8001654 <MX_GPIO_Init+0x1f4>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b57      	ldr	r3, [pc, #348]	; (8001654 <MX_GPIO_Init+0x1f4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b53      	ldr	r3, [pc, #332]	; (8001654 <MX_GPIO_Init+0x1f4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a52      	ldr	r2, [pc, #328]	; (8001654 <MX_GPIO_Init+0x1f4>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b50      	ldr	r3, [pc, #320]	; (8001654 <MX_GPIO_Init+0x1f4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <MX_GPIO_Init+0x1f4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a4b      	ldr	r2, [pc, #300]	; (8001654 <MX_GPIO_Init+0x1f4>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b49      	ldr	r3, [pc, #292]	; (8001654 <MX_GPIO_Init+0x1f4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b45      	ldr	r3, [pc, #276]	; (8001654 <MX_GPIO_Init+0x1f4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a44      	ldr	r2, [pc, #272]	; (8001654 <MX_GPIO_Init+0x1f4>)
 8001544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b42      	ldr	r3, [pc, #264]	; (8001654 <MX_GPIO_Init+0x1f4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2170      	movs	r1, #112	; 0x70
 800155a:	483f      	ldr	r0, [pc, #252]	; (8001658 <MX_GPIO_Init+0x1f8>)
 800155c:	f003 fa2a 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001566:	483d      	ldr	r0, [pc, #244]	; (800165c <MX_GPIO_Init+0x1fc>)
 8001568:	f003 fa24 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	483b      	ldr	r0, [pc, #236]	; (8001660 <MX_GPIO_Init+0x200>)
 8001572:	f003 fa1f 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157c:	4839      	ldr	r0, [pc, #228]	; (8001664 <MX_GPIO_Init+0x204>)
 800157e:	f003 fa19 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2108      	movs	r1, #8
 8001586:	4838      	ldr	r0, [pc, #224]	; (8001668 <MX_GPIO_Init+0x208>)
 8001588:	f003 fa14 	bl	80049b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800158c:	2370      	movs	r3, #112	; 0x70
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	482d      	ldr	r0, [pc, #180]	; (8001658 <MX_GPIO_Init+0x1f8>)
 80015a4:	f003 f86a 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80015a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4826      	ldr	r0, [pc, #152]	; (800165c <MX_GPIO_Init+0x1fc>)
 80015c2:	f003 f85b 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80015c6:	23c0      	movs	r3, #192	; 0xc0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4822      	ldr	r0, [pc, #136]	; (8001664 <MX_GPIO_Init+0x204>)
 80015da:	f003 f84f 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80015de:	2330      	movs	r3, #48	; 0x30
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	481a      	ldr	r0, [pc, #104]	; (800165c <MX_GPIO_Init+0x1fc>)
 80015f2:	f003 f843 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80015f6:	2340      	movs	r3, #64	; 0x40
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160a:	4619      	mov	r1, r3
 800160c:	4814      	ldr	r0, [pc, #80]	; (8001660 <MX_GPIO_Init+0x200>)
 800160e:	f003 f835 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <MX_GPIO_Init+0x204>)
 800162c:	f003 f826 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001630:	2308      	movs	r3, #8
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001644:	4619      	mov	r1, r3
 8001646:	4808      	ldr	r0, [pc, #32]	; (8001668 <MX_GPIO_Init+0x208>)
 8001648:	f003 f818 	bl	800467c <HAL_GPIO_Init>

}
 800164c:	bf00      	nop
 800164e:	3738      	adds	r7, #56	; 0x38
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	40021000 	.word	0x40021000
 800165c:	40020800 	.word	0x40020800
 8001660:	40021800 	.word	0x40021800
 8001664:	40020000 	.word	0x40020000
 8001668:	40020c00 	.word	0x40020c00

0800166c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_I2C1_Init+0x50>)
 8001672:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <MX_I2C1_Init+0x54>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_I2C1_Init+0x50>)
 8001678:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <MX_I2C1_Init+0x58>)
 800167a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_I2C1_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_I2C1_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_I2C1_Init+0x50>)
 800168a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <MX_I2C1_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_I2C1_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_I2C1_Init+0x50>)
 80016aa:	f003 f9b7 	bl	8004a1c <HAL_I2C_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b4:	f001 f904 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200001ec 	.word	0x200001ec
 80016c0:	40005400 	.word	0x40005400
 80016c4:	000186a0 	.word	0x000186a0

080016c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_I2C_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12b      	bne.n	8001742 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_I2C_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001706:	23c0      	movs	r3, #192	; 0xc0
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170a:	2312      	movs	r3, #18
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001716:	2304      	movs	r3, #4
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <HAL_I2C_MspInit+0x8c>)
 8001722:	f002 ffab 	bl	800467c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_I2C_MspInit+0x88>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_I2C_MspInit+0x88>)
 8001730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_I2C_MspInit+0x88>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40005400 	.word	0x40005400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400

08001758 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <LCD_WR_REG+0x1c>)
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	8013      	strh	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	600ffffe 	.word	0x600ffffe

08001778 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <LCD_WR_DATA+0x1c>)
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	8053      	strh	r3, [r2, #2]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	600ffffe 	.word	0x600ffffe

08001798 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <LCD_RD_DATA+0x20>)
 80017a0:	885b      	ldrh	r3, [r3, #2]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	b29b      	uxth	r3, r3
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	600ffffe 	.word	0x600ffffe

080017bc <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4604      	mov	r4, r0
 80017c4:	4608      	mov	r0, r1
 80017c6:	4611      	mov	r1, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	4623      	mov	r3, r4
 80017cc:	80fb      	strh	r3, [r7, #6]
 80017ce:	4603      	mov	r3, r0
 80017d0:	80bb      	strh	r3, [r7, #4]
 80017d2:	460b      	mov	r3, r1
 80017d4:	807b      	strh	r3, [r7, #2]
 80017d6:	4613      	mov	r3, r2
 80017d8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80017da:	202a      	movs	r0, #42	; 0x2a
 80017dc:	f7ff ffbc 	bl	8001758 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ffc6 	bl	8001778 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ffc0 	bl	8001778 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ffba 	bl	8001778 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	b29b      	uxth	r3, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ffb4 	bl	8001778 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001810:	202b      	movs	r0, #43	; 0x2b
 8001812:	f7ff ffa1 	bl	8001758 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ffab 	bl	8001778 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001822:	88bb      	ldrh	r3, [r7, #4]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	b29b      	uxth	r3, r3
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ffa5 	bl	8001778 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800182e:	883b      	ldrh	r3, [r7, #0]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29b      	uxth	r3, r3
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff9f 	bl	8001778 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800183a:	883b      	ldrh	r3, [r7, #0]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	b29b      	uxth	r3, r3
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff99 	bl	8001778 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001846:	202c      	movs	r0, #44	; 0x2c
 8001848:	f7ff ff86 	bl	8001758 <LCD_WR_REG>
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <lcd_Clear+0x60>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <lcd_Clear+0x60>)
 8001868:	885b      	ldrh	r3, [r3, #2]
 800186a:	3b01      	subs	r3, #1
 800186c:	b29b      	uxth	r3, r3
 800186e:	2100      	movs	r1, #0
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff ffa3 	bl	80017bc <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001876:	2300      	movs	r3, #0
 8001878:	81fb      	strh	r3, [r7, #14]
 800187a:	e011      	b.n	80018a0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800187c:	2300      	movs	r3, #0
 800187e:	81bb      	strh	r3, [r7, #12]
 8001880:	e006      	b.n	8001890 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff77 	bl	8001778 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800188a:	89bb      	ldrh	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	81bb      	strh	r3, [r7, #12]
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <lcd_Clear+0x60>)
 8001892:	885b      	ldrh	r3, [r3, #2]
 8001894:	89ba      	ldrh	r2, [r7, #12]
 8001896:	429a      	cmp	r2, r3
 8001898:	d3f3      	bcc.n	8001882 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	3301      	adds	r3, #1
 800189e:	81fb      	strh	r3, [r7, #14]
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <lcd_Clear+0x60>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	89fa      	ldrh	r2, [r7, #14]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d3e8      	bcc.n	800187c <lcd_Clear+0x28>
		}
	}
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000240 	.word	0x20000240

080018b8 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	80fb      	strh	r3, [r7, #6]
 80018c2:	460b      	mov	r3, r1
 80018c4:	80bb      	strh	r3, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	88fa      	ldrh	r2, [r7, #6]
 80018ce:	88b9      	ldrh	r1, [r7, #4]
 80018d0:	88f8      	ldrh	r0, [r7, #6]
 80018d2:	f7ff ff73 	bl	80017bc <lcd_AddressSet>
	LCD_WR_DATA(color);
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff4d 	bl	8001778 <LCD_WR_DATA>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80018e6:	b590      	push	{r4, r7, lr}
 80018e8:	b08d      	sub	sp, #52	; 0x34
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4604      	mov	r4, r0
 80018ee:	4608      	mov	r0, r1
 80018f0:	4611      	mov	r1, r2
 80018f2:	461a      	mov	r2, r3
 80018f4:	4623      	mov	r3, r4
 80018f6:	80fb      	strh	r3, [r7, #6]
 80018f8:	4603      	mov	r3, r0
 80018fa:	80bb      	strh	r3, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001904:	2300      	movs	r3, #0
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 800190c:	887a      	ldrh	r2, [r7, #2]
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001914:	883a      	ldrh	r2, [r7, #0]
 8001916:	88bb      	ldrh	r3, [r7, #4]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001920:	88bb      	ldrh	r3, [r7, #4]
 8001922:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	2b00      	cmp	r3, #0
 8001928:	dd02      	ble.n	8001930 <lcd_DrawLine+0x4a>
 800192a:	2301      	movs	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e00b      	b.n	8001948 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <lcd_DrawLine+0x56>
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e005      	b.n	8001948 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	425b      	negs	r3, r3
 8001946:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b00      	cmp	r3, #0
 800194c:	dd02      	ble.n	8001954 <lcd_DrawLine+0x6e>
 800194e:	2301      	movs	r3, #1
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	e00b      	b.n	800196c <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <lcd_DrawLine+0x7a>
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	e005      	b.n	800196c <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	425b      	negs	r3, r3
 800196a:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 800196c:	6a3a      	ldr	r2, [r7, #32]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	429a      	cmp	r2, r3
 8001972:	dd02      	ble.n	800197a <lcd_DrawLine+0x94>
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	e001      	b.n	800197e <lcd_DrawLine+0x98>
	else distance=delta_y;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800197e:	2300      	movs	r3, #0
 8001980:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001982:	e02b      	b.n	80019dc <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	b29b      	uxth	r3, r3
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	b291      	uxth	r1, r2
 800198c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff91 	bl	80018b8 <lcd_DrawPoint>
		xerr+=delta_x;
 8001996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	4413      	add	r3, r2
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800199e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4413      	add	r3, r2
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 80019a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dd07      	ble.n	80019be <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80019ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80019be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dd07      	ble.n	80019d6 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80019c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4413      	add	r3, r2
 80019d4:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80019d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019d8:	3301      	adds	r3, #1
 80019da:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80019dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dacf      	bge.n	8001984 <lcd_DrawLine+0x9e>
		}
	}
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3734      	adds	r7, #52	; 0x34
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd90      	pop	{r4, r7, pc}

080019ee <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80019ee:	b590      	push	{r4, r7, lr}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af02      	add	r7, sp, #8
 80019f4:	4604      	mov	r4, r0
 80019f6:	4608      	mov	r0, r1
 80019f8:	4611      	mov	r1, r2
 80019fa:	461a      	mov	r2, r3
 80019fc:	4623      	mov	r3, r4
 80019fe:	80fb      	strh	r3, [r7, #6]
 8001a00:	4603      	mov	r3, r0
 8001a02:	80bb      	strh	r3, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001a0c:	88bc      	ldrh	r4, [r7, #4]
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	88b9      	ldrh	r1, [r7, #4]
 8001a12:	88f8      	ldrh	r0, [r7, #6]
 8001a14:	8b3b      	ldrh	r3, [r7, #24]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4623      	mov	r3, r4
 8001a1a:	f7ff ff64 	bl	80018e6 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001a1e:	883c      	ldrh	r4, [r7, #0]
 8001a20:	88fa      	ldrh	r2, [r7, #6]
 8001a22:	88b9      	ldrh	r1, [r7, #4]
 8001a24:	88f8      	ldrh	r0, [r7, #6]
 8001a26:	8b3b      	ldrh	r3, [r7, #24]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	f7ff ff5b 	bl	80018e6 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001a30:	883c      	ldrh	r4, [r7, #0]
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	8839      	ldrh	r1, [r7, #0]
 8001a36:	88f8      	ldrh	r0, [r7, #6]
 8001a38:	8b3b      	ldrh	r3, [r7, #24]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	f7ff ff52 	bl	80018e6 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001a42:	883c      	ldrh	r4, [r7, #0]
 8001a44:	887a      	ldrh	r2, [r7, #2]
 8001a46:	88b9      	ldrh	r1, [r7, #4]
 8001a48:	8878      	ldrh	r0, [r7, #2]
 8001a4a:	8b3b      	ldrh	r3, [r7, #24]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	4623      	mov	r3, r4
 8001a50:	f7ff ff49 	bl	80018e6 <lcd_DrawLine>
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd90      	pop	{r4, r7, pc}

08001a5c <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4604      	mov	r4, r0
 8001a64:	4608      	mov	r0, r1
 8001a66:	4611      	mov	r1, r2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	80fb      	strh	r3, [r7, #6]
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80bb      	strh	r3, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	70fb      	strb	r3, [r7, #3]
 8001a76:	4613      	mov	r3, r2
 8001a78:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001a82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a86:	085b      	lsrs	r3, r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bf14      	ite	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	2300      	moveq	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	fb12 f303 	smulbb	r3, r2, r3
 8001ab2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	3b20      	subs	r3, #32
 8001ab8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29c      	uxth	r4, r3
 8001ac8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	88b9      	ldrh	r1, [r7, #4]
 8001ada:	88f8      	ldrh	r0, [r7, #6]
 8001adc:	4622      	mov	r2, r4
 8001ade:	f7ff fe6d 	bl	80017bc <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	827b      	strh	r3, [r7, #18]
 8001ae6:	e07a      	b.n	8001bde <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001ae8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d028      	beq.n	8001b42 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001af0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d108      	bne.n	8001b0a <lcd_ShowChar+0xae>
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	8a7b      	ldrh	r3, [r7, #18]
 8001afc:	493c      	ldr	r1, [pc, #240]	; (8001bf0 <lcd_ShowChar+0x194>)
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	440a      	add	r2, r1
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	75fb      	strb	r3, [r7, #23]
 8001b08:	e01b      	b.n	8001b42 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001b0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b0e:	2b18      	cmp	r3, #24
 8001b10:	d10b      	bne.n	8001b2a <lcd_ShowChar+0xce>
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	8a79      	ldrh	r1, [r7, #18]
 8001b16:	4837      	ldr	r0, [pc, #220]	; (8001bf4 <lcd_ShowChar+0x198>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4403      	add	r3, r0
 8001b22:	440b      	add	r3, r1
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	75fb      	strb	r3, [r7, #23]
 8001b28:	e00b      	b.n	8001b42 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001b2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	d15a      	bne.n	8001be8 <lcd_ShowChar+0x18c>
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	8a7b      	ldrh	r3, [r7, #18]
 8001b36:	4930      	ldr	r1, [pc, #192]	; (8001bf8 <lcd_ShowChar+0x19c>)
 8001b38:	0192      	lsls	r2, r2, #6
 8001b3a:	440a      	add	r2, r1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	75bb      	strb	r3, [r7, #22]
 8001b46:	e044      	b.n	8001bd2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001b48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d120      	bne.n	8001b92 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001b50:	7dfa      	ldrb	r2, [r7, #23]
 8001b52:	7dbb      	ldrb	r3, [r7, #22]
 8001b54:	fa42 f303 	asr.w	r3, r2, r3
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <lcd_ShowChar+0x10e>
 8001b60:	883b      	ldrh	r3, [r7, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fe08 	bl	8001778 <LCD_WR_DATA>
 8001b68:	e003      	b.n	8001b72 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001b6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fe03 	bl	8001778 <LCD_WR_DATA>
				m++;
 8001b72:	7d7b      	ldrb	r3, [r7, #21]
 8001b74:	3301      	adds	r3, #1
 8001b76:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001b78:	7d7b      	ldrb	r3, [r7, #21]
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b80:	fb02 f201 	mul.w	r2, r2, r1
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d11f      	bne.n	8001bcc <lcd_ShowChar+0x170>
				{
					m=0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	757b      	strb	r3, [r7, #21]
					break;
 8001b90:	e022      	b.n	8001bd8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001b92:	7dfa      	ldrb	r2, [r7, #23]
 8001b94:	7dbb      	ldrb	r3, [r7, #22]
 8001b96:	fa42 f303 	asr.w	r3, r2, r3
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <lcd_ShowChar+0x152>
 8001ba2:	883a      	ldrh	r2, [r7, #0]
 8001ba4:	88b9      	ldrh	r1, [r7, #4]
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fe85 	bl	80018b8 <lcd_DrawPoint>
				x++;
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001bb4:	88fa      	ldrh	r2, [r7, #6]
 8001bb6:	8a3b      	ldrh	r3, [r7, #16]
 8001bb8:	1ad2      	subs	r2, r2, r3
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d105      	bne.n	8001bcc <lcd_ShowChar+0x170>
				{
					x=x0;
 8001bc0:	8a3b      	ldrh	r3, [r7, #16]
 8001bc2:	80fb      	strh	r3, [r7, #6]
					y++;
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	80bb      	strh	r3, [r7, #4]
					break;
 8001bca:	e005      	b.n	8001bd8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001bcc:	7dbb      	ldrb	r3, [r7, #22]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	75bb      	strb	r3, [r7, #22]
 8001bd2:	7dbb      	ldrb	r3, [r7, #22]
 8001bd4:	2b07      	cmp	r3, #7
 8001bd6:	d9b7      	bls.n	8001b48 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001bd8:	8a7b      	ldrh	r3, [r7, #18]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	827b      	strh	r3, [r7, #18]
 8001bde:	8a7a      	ldrh	r2, [r7, #18]
 8001be0:	89bb      	ldrh	r3, [r7, #12]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d380      	bcc.n	8001ae8 <lcd_ShowChar+0x8c>
 8001be6:	e000      	b.n	8001bea <lcd_ShowChar+0x18e>
		else return;
 8001be8:	bf00      	nop
				}
			}
		}
	}
}
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	08009958 	.word	0x08009958
 8001bf4:	08009f48 	.word	0x08009f48
 8001bf8:	0800b118 	.word	0x0800b118

08001bfc <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	460a      	mov	r2, r1
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001c10:	e004      	b.n	8001c1c <mypow+0x20>
 8001c12:	79fa      	ldrb	r2, [r7, #7]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	1e5a      	subs	r2, r3, #1
 8001c20:	71ba      	strb	r2, [r7, #6]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f5      	bne.n	8001c12 <mypow+0x16>
	return result;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af04      	add	r7, sp, #16
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	4611      	mov	r1, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	4623      	mov	r3, r4
 8001c44:	80fb      	strh	r3, [r7, #6]
 8001c46:	4603      	mov	r3, r0
 8001c48:	80bb      	strh	r3, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	807b      	strh	r3, [r7, #2]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001c56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e059      	b.n	8001d18 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001c64:	887c      	ldrh	r4, [r7, #2]
 8001c66:	787a      	ldrb	r2, [r7, #1]
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4619      	mov	r1, r3
 8001c74:	200a      	movs	r0, #10
 8001c76:	f7ff ffc1 	bl	8001bfc <mypow>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	fbb4 f1f3 	udiv	r1, r4, r3
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <lcd_ShowIntNum+0xf8>)
 8001c82:	fba3 2301 	umull	r2, r3, r3, r1
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	1aca      	subs	r2, r1, r3
 8001c92:	4613      	mov	r3, r2
 8001c94:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001c96:	7bbb      	ldrb	r3, [r7, #14]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d121      	bne.n	8001ce0 <lcd_ShowIntNum+0xac>
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	787b      	ldrb	r3, [r7, #1]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	da1c      	bge.n	8001ce0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001ca6:	7b3b      	ldrb	r3, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d117      	bne.n	8001cdc <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	7b7b      	ldrb	r3, [r7, #13]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	fb12 f303 	smulbb	r3, r2, r3
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b298      	uxth	r0, r3
 8001cc0:	8c3a      	ldrh	r2, [r7, #32]
 8001cc2:	88b9      	ldrh	r1, [r7, #4]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9302      	str	r3, [sp, #8]
 8001cc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f7ff fec1 	bl	8001a5c <lcd_ShowChar>
				continue;
 8001cda:	e01a      	b.n	8001d12 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	7b7b      	ldrb	r3, [r7, #13]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	fb12 f303 	smulbb	r3, r2, r3
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b298      	uxth	r0, r3
 8001cf4:	7b3b      	ldrb	r3, [r7, #12]
 8001cf6:	3330      	adds	r3, #48	; 0x30
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	8c3c      	ldrh	r4, [r7, #32]
 8001cfc:	88b9      	ldrh	r1, [r7, #4]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	4623      	mov	r3, r4
 8001d0e:	f7ff fea5 	bl	8001a5c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	3301      	adds	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	787b      	ldrb	r3, [r7, #1]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3a1      	bcc.n	8001c64 <lcd_ShowIntNum+0x30>
	}
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	cccccccd 	.word	0xcccccccd

08001d30 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08b      	sub	sp, #44	; 0x2c
 8001d34:	af04      	add	r7, sp, #16
 8001d36:	4604      	mov	r4, r0
 8001d38:	4608      	mov	r0, r1
 8001d3a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	461a      	mov	r2, r3
 8001d42:	4623      	mov	r3, r4
 8001d44:	81fb      	strh	r3, [r7, #14]
 8001d46:	4603      	mov	r3, r0
 8001d48:	81bb      	strh	r3, [r7, #12]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001d52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001d5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d5e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e38 <lcd_ShowFloatNum+0x108>
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d6a:	ee17 3a90 	vmov	r3, s15
 8001d6e:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	75fb      	strb	r3, [r7, #23]
 8001d74:	e057      	b.n	8001e26 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001d76:	8abc      	ldrh	r4, [r7, #20]
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	4619      	mov	r1, r3
 8001d86:	200a      	movs	r0, #10
 8001d88:	f7ff ff38 	bl	8001bfc <mypow>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <lcd_ShowFloatNum+0x10c>)
 8001d94:	fba3 2301 	umull	r2, r3, r3, r1
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	1aca      	subs	r2, r1, r3
 8001da4:	4613      	mov	r3, r2
 8001da6:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001da8:	7dfa      	ldrb	r2, [r7, #23]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	3b02      	subs	r3, #2
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d11d      	bne.n	8001dee <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	3b02      	subs	r3, #2
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	7dbb      	ldrb	r3, [r7, #22]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	fb12 f303 	smulbb	r3, r2, r3
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	89fb      	ldrh	r3, [r7, #14]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b298      	uxth	r0, r3
 8001dc8:	88ba      	ldrh	r2, [r7, #4]
 8001dca:	89b9      	ldrh	r1, [r7, #12]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	222e      	movs	r2, #46	; 0x2e
 8001dde:	f7ff fe3d 	bl	8001a5c <lcd_ShowChar>
			t++;
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	3301      	adds	r3, #1
 8001de6:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	3301      	adds	r3, #1
 8001dec:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	7dbb      	ldrb	r3, [r7, #22]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	fb12 f303 	smulbb	r3, r2, r3
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b298      	uxth	r0, r3
 8001e02:	7cfb      	ldrb	r3, [r7, #19]
 8001e04:	3330      	adds	r3, #48	; 0x30
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	88bc      	ldrh	r4, [r7, #4]
 8001e0a:	89b9      	ldrh	r1, [r7, #12]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	f7ff fe1e 	bl	8001a5c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	3301      	adds	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
 8001e26:	7dfa      	ldrb	r2, [r7, #23]
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d3a3      	bcc.n	8001d76 <lcd_ShowFloatNum+0x46>
	}
}
 8001e2e:	bf00      	nop
 8001e30:	bf00      	nop
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	42c80000 	.word	0x42c80000
 8001e3c:	cccccccd 	.word	0xcccccccd

08001e40 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <lcd_SetDir+0x44>)
 8001e5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e60:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <lcd_SetDir+0x44>)
 8001e64:	22f0      	movs	r2, #240	; 0xf0
 8001e66:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001e68:	e006      	b.n	8001e78 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <lcd_SetDir+0x44>)
 8001e6c:	22f0      	movs	r2, #240	; 0xf0
 8001e6e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <lcd_SetDir+0x44>)
 8001e72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e76:	805a      	strh	r2, [r3, #2]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	20000240 	.word	0x20000240

08001e88 <lcd_init>:


void lcd_init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e92:	48aa      	ldr	r0, [pc, #680]	; (800213c <lcd_init+0x2b4>)
 8001e94:	f002 fd8e 	bl	80049b4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e9c:	f001 faa4 	bl	80033e8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea6:	48a5      	ldr	r0, [pc, #660]	; (800213c <lcd_init+0x2b4>)
 8001ea8:	f002 fd84 	bl	80049b4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001eac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eb0:	f001 fa9a 	bl	80033e8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff ffc3 	bl	8001e40 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001eba:	20d3      	movs	r0, #211	; 0xd3
 8001ebc:	f7ff fc4c 	bl	8001758 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001ec0:	f7ff fc6a 	bl	8001798 <LCD_RD_DATA>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b9d      	ldr	r3, [pc, #628]	; (8002140 <lcd_init+0x2b8>)
 8001eca:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001ecc:	f7ff fc64 	bl	8001798 <LCD_RD_DATA>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b9a      	ldr	r3, [pc, #616]	; (8002140 <lcd_init+0x2b8>)
 8001ed6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001ed8:	f7ff fc5e 	bl	8001798 <LCD_RD_DATA>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b97      	ldr	r3, [pc, #604]	; (8002140 <lcd_init+0x2b8>)
 8001ee2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001ee4:	4b96      	ldr	r3, [pc, #600]	; (8002140 <lcd_init+0x2b8>)
 8001ee6:	889b      	ldrh	r3, [r3, #4]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b94      	ldr	r3, [pc, #592]	; (8002140 <lcd_init+0x2b8>)
 8001eee:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001ef0:	f7ff fc52 	bl	8001798 <LCD_RD_DATA>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b91      	ldr	r3, [pc, #580]	; (8002140 <lcd_init+0x2b8>)
 8001efa:	889b      	ldrh	r3, [r3, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b8f      	ldr	r3, [pc, #572]	; (8002140 <lcd_init+0x2b8>)
 8001f02:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001f04:	20cf      	movs	r0, #207	; 0xcf
 8001f06:	f7ff fc27 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff fc34 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001f10:	20c1      	movs	r0, #193	; 0xc1
 8001f12:	f7ff fc31 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001f16:	2030      	movs	r0, #48	; 0x30
 8001f18:	f7ff fc2e 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001f1c:	20ed      	movs	r0, #237	; 0xed
 8001f1e:	f7ff fc1b 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f22:	2064      	movs	r0, #100	; 0x64
 8001f24:	f7ff fc28 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f7ff fc25 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f2e:	2012      	movs	r0, #18
 8001f30:	f7ff fc22 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f34:	2081      	movs	r0, #129	; 0x81
 8001f36:	f7ff fc1f 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f3a:	20e8      	movs	r0, #232	; 0xe8
 8001f3c:	f7ff fc0c 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f40:	2085      	movs	r0, #133	; 0x85
 8001f42:	f7ff fc19 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f46:	2010      	movs	r0, #16
 8001f48:	f7ff fc16 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001f4c:	207a      	movs	r0, #122	; 0x7a
 8001f4e:	f7ff fc13 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001f52:	20cb      	movs	r0, #203	; 0xcb
 8001f54:	f7ff fc00 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001f58:	2039      	movs	r0, #57	; 0x39
 8001f5a:	f7ff fc0d 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001f5e:	202c      	movs	r0, #44	; 0x2c
 8001f60:	f7ff fc0a 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff fc07 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001f6a:	2034      	movs	r0, #52	; 0x34
 8001f6c:	f7ff fc04 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001f70:	2002      	movs	r0, #2
 8001f72:	f7ff fc01 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001f76:	20f7      	movs	r0, #247	; 0xf7
 8001f78:	f7ff fbee 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001f7c:	2020      	movs	r0, #32
 8001f7e:	f7ff fbfb 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001f82:	20ea      	movs	r0, #234	; 0xea
 8001f84:	f7ff fbe8 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff fbf5 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff fbf2 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001f94:	20c0      	movs	r0, #192	; 0xc0
 8001f96:	f7ff fbdf 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001f9a:	201b      	movs	r0, #27
 8001f9c:	f7ff fbec 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001fa0:	20c1      	movs	r0, #193	; 0xc1
 8001fa2:	f7ff fbd9 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7ff fbe6 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001fac:	20c5      	movs	r0, #197	; 0xc5
 8001fae:	f7ff fbd3 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001fb2:	2030      	movs	r0, #48	; 0x30
 8001fb4:	f7ff fbe0 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001fb8:	2030      	movs	r0, #48	; 0x30
 8001fba:	f7ff fbdd 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001fbe:	20c7      	movs	r0, #199	; 0xc7
 8001fc0:	f7ff fbca 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001fc4:	20b7      	movs	r0, #183	; 0xb7
 8001fc6:	f7ff fbd7 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001fca:	2036      	movs	r0, #54	; 0x36
 8001fcc:	f7ff fbc4 	bl	8001758 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001fd0:	2008      	movs	r0, #8
 8001fd2:	f7ff fbd1 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001fd6:	203a      	movs	r0, #58	; 0x3a
 8001fd8:	f7ff fbbe 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001fdc:	2055      	movs	r0, #85	; 0x55
 8001fde:	f7ff fbcb 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001fe2:	20b1      	movs	r0, #177	; 0xb1
 8001fe4:	f7ff fbb8 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff fbc5 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001fee:	201a      	movs	r0, #26
 8001ff0:	f7ff fbc2 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001ff4:	20b6      	movs	r0, #182	; 0xb6
 8001ff6:	f7ff fbaf 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001ffa:	200a      	movs	r0, #10
 8001ffc:	f7ff fbbc 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002000:	20a2      	movs	r0, #162	; 0xa2
 8002002:	f7ff fbb9 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002006:	20f2      	movs	r0, #242	; 0xf2
 8002008:	f7ff fba6 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff fbb3 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002012:	2026      	movs	r0, #38	; 0x26
 8002014:	f7ff fba0 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff fbad 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800201e:	20e0      	movs	r0, #224	; 0xe0
 8002020:	f7ff fb9a 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002024:	200f      	movs	r0, #15
 8002026:	f7ff fba7 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800202a:	202a      	movs	r0, #42	; 0x2a
 800202c:	f7ff fba4 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002030:	2028      	movs	r0, #40	; 0x28
 8002032:	f7ff fba1 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002036:	2008      	movs	r0, #8
 8002038:	f7ff fb9e 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800203c:	200e      	movs	r0, #14
 800203e:	f7ff fb9b 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002042:	2008      	movs	r0, #8
 8002044:	f7ff fb98 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002048:	2054      	movs	r0, #84	; 0x54
 800204a:	f7ff fb95 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800204e:	20a9      	movs	r0, #169	; 0xa9
 8002050:	f7ff fb92 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002054:	2043      	movs	r0, #67	; 0x43
 8002056:	f7ff fb8f 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800205a:	200a      	movs	r0, #10
 800205c:	f7ff fb8c 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002060:	200f      	movs	r0, #15
 8002062:	f7ff fb89 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff fb86 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff fb83 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff fb80 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff fb7d 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800207e:	20e1      	movs	r0, #225	; 0xe1
 8002080:	f7ff fb6a 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff fb77 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800208a:	2015      	movs	r0, #21
 800208c:	f7ff fb74 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002090:	2017      	movs	r0, #23
 8002092:	f7ff fb71 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002096:	2007      	movs	r0, #7
 8002098:	f7ff fb6e 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800209c:	2011      	movs	r0, #17
 800209e:	f7ff fb6b 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80020a2:	2006      	movs	r0, #6
 80020a4:	f7ff fb68 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80020a8:	202b      	movs	r0, #43	; 0x2b
 80020aa:	f7ff fb65 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80020ae:	2056      	movs	r0, #86	; 0x56
 80020b0:	f7ff fb62 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80020b4:	203c      	movs	r0, #60	; 0x3c
 80020b6:	f7ff fb5f 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80020ba:	2005      	movs	r0, #5
 80020bc:	f7ff fb5c 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80020c0:	2010      	movs	r0, #16
 80020c2:	f7ff fb59 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020c6:	200f      	movs	r0, #15
 80020c8:	f7ff fb56 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020cc:	203f      	movs	r0, #63	; 0x3f
 80020ce:	f7ff fb53 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020d2:	203f      	movs	r0, #63	; 0x3f
 80020d4:	f7ff fb50 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020d8:	200f      	movs	r0, #15
 80020da:	f7ff fb4d 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80020de:	202b      	movs	r0, #43	; 0x2b
 80020e0:	f7ff fb3a 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff fb47 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff fb44 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7ff fb41 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80020f6:	203f      	movs	r0, #63	; 0x3f
 80020f8:	f7ff fb3e 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80020fc:	202a      	movs	r0, #42	; 0x2a
 80020fe:	f7ff fb2b 	bl	8001758 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002102:	2000      	movs	r0, #0
 8002104:	f7ff fb38 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff fb35 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff fb32 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002114:	20ef      	movs	r0, #239	; 0xef
 8002116:	f7ff fb2f 	bl	8001778 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800211a:	2011      	movs	r0, #17
 800211c:	f7ff fb1c 	bl	8001758 <LCD_WR_REG>
	HAL_Delay(120);
 8002120:	2078      	movs	r0, #120	; 0x78
 8002122:	f001 f961 	bl	80033e8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002126:	2029      	movs	r0, #41	; 0x29
 8002128:	f7ff fb16 	bl	8001758 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002132:	4804      	ldr	r0, [pc, #16]	; (8002144 <lcd_init+0x2bc>)
 8002134:	f002 fc3e 	bl	80049b4 <HAL_GPIO_WritePin>
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40020800 	.word	0x40020800
 8002140:	20000240 	.word	0x20000240
 8002144:	40020000 	.word	0x40020000

08002148 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b08b      	sub	sp, #44	; 0x2c
 800214c:	af04      	add	r7, sp, #16
 800214e:	60ba      	str	r2, [r7, #8]
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	81fb      	strh	r3, [r7, #14]
 8002156:	460b      	mov	r3, r1
 8002158:	81bb      	strh	r3, [r7, #12]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800215e:	89fb      	ldrh	r3, [r7, #14]
 8002160:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002166:	e048      	b.n	80021fa <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d145      	bne.n	80021fa <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800216e:	89fa      	ldrh	r2, [r7, #14]
 8002170:	4b26      	ldr	r3, [pc, #152]	; (800220c <lcd_ShowStr+0xc4>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	4619      	mov	r1, r3
 8002176:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800217a:	085b      	lsrs	r3, r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	1acb      	subs	r3, r1, r3
 8002180:	429a      	cmp	r2, r3
 8002182:	dc3f      	bgt.n	8002204 <lcd_ShowStr+0xbc>
 8002184:	89ba      	ldrh	r2, [r7, #12]
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <lcd_ShowStr+0xc4>)
 8002188:	885b      	ldrh	r3, [r3, #2]
 800218a:	4619      	mov	r1, r3
 800218c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002190:	1acb      	subs	r3, r1, r3
 8002192:	429a      	cmp	r2, r3
 8002194:	dc36      	bgt.n	8002204 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b80      	cmp	r3, #128	; 0x80
 800219c:	d902      	bls.n	80021a4 <lcd_ShowStr+0x5c>
 800219e:	2301      	movs	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
 80021a2:	e02a      	b.n	80021fa <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b0d      	cmp	r3, #13
 80021aa:	d10b      	bne.n	80021c4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80021ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	89bb      	ldrh	r3, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80021b8:	8abb      	ldrh	r3, [r7, #20]
 80021ba:	81fb      	strh	r3, [r7, #14]
					str++;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	3301      	adds	r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	e017      	b.n	80021f4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	88fc      	ldrh	r4, [r7, #6]
 80021ca:	89b9      	ldrh	r1, [r7, #12]
 80021cc:	89f8      	ldrh	r0, [r7, #14]
 80021ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021d2:	9302      	str	r3, [sp, #8]
 80021d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4623      	mov	r3, r4
 80021e0:	f7ff fc3c 	bl	8001a5c <lcd_ShowChar>
					x+=sizey/2;
 80021e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	89fb      	ldrh	r3, [r7, #14]
 80021f0:	4413      	add	r3, r2
 80021f2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	3301      	adds	r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1b2      	bne.n	8002168 <lcd_ShowStr+0x20>
 8002202:	e000      	b.n	8002206 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002204:	bf00      	nop
			}
		}
	}
}
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	20000240 	.word	0x20000240

08002210 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002214:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <led7_Scan+0x104>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	b29a      	uxth	r2, r3
 800221c:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <led7_Scan+0x104>)
 800221e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002220:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <led7_Scan+0x108>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a3d      	ldr	r2, [pc, #244]	; (800231c <led7_Scan+0x10c>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	b21a      	sxth	r2, r3
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <led7_Scan+0x104>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	b21b      	sxth	r3, r3
 8002232:	4313      	orrs	r3, r2
 8002234:	b21b      	sxth	r3, r3
 8002236:	b29a      	uxth	r2, r3
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <led7_Scan+0x104>)
 800223a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800223c:	4b36      	ldr	r3, [pc, #216]	; (8002318 <led7_Scan+0x108>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d847      	bhi.n	80022d4 <led7_Scan+0xc4>
 8002244:	a201      	add	r2, pc, #4	; (adr r2, 800224c <led7_Scan+0x3c>)
 8002246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	0800225d 	.word	0x0800225d
 8002250:	0800227b 	.word	0x0800227b
 8002254:	08002299 	.word	0x08002299
 8002258:	080022b7 	.word	0x080022b7
	case 0:
		spi_buffer |= 0x00b0;
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <led7_Scan+0x104>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002264:	b29a      	uxth	r2, r3
 8002266:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <led7_Scan+0x104>)
 8002268:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <led7_Scan+0x104>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002272:	b29a      	uxth	r2, r3
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <led7_Scan+0x104>)
 8002276:	801a      	strh	r2, [r3, #0]
		break;
 8002278:	e02d      	b.n	80022d6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <led7_Scan+0x104>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <led7_Scan+0x104>)
 8002286:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <led7_Scan+0x104>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	f023 0320 	bic.w	r3, r3, #32
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <led7_Scan+0x104>)
 8002294:	801a      	strh	r2, [r3, #0]
		break;
 8002296:	e01e      	b.n	80022d6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <led7_Scan+0x104>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <led7_Scan+0x104>)
 80022a4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80022a6:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <led7_Scan+0x104>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	f023 0310 	bic.w	r3, r3, #16
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <led7_Scan+0x104>)
 80022b2:	801a      	strh	r2, [r3, #0]
		break;
 80022b4:	e00f      	b.n	80022d6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <led7_Scan+0x104>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80022be:	b29a      	uxth	r2, r3
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <led7_Scan+0x104>)
 80022c2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <led7_Scan+0x104>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <led7_Scan+0x104>)
 80022d0:	801a      	strh	r2, [r3, #0]
		break;
 80022d2:	e000      	b.n	80022d6 <led7_Scan+0xc6>
	default:
		break;
 80022d4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <led7_Scan+0x108>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	425a      	negs	r2, r3
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	f002 0203 	and.w	r2, r2, #3
 80022e6:	bf58      	it	pl
 80022e8:	4253      	negpl	r3, r2
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <led7_Scan+0x108>)
 80022ec:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2140      	movs	r1, #64	; 0x40
 80022f2:	480b      	ldr	r0, [pc, #44]	; (8002320 <led7_Scan+0x110>)
 80022f4:	f002 fb5e 	bl	80049b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80022f8:	2301      	movs	r3, #1
 80022fa:	2202      	movs	r2, #2
 80022fc:	4905      	ldr	r1, [pc, #20]	; (8002314 <led7_Scan+0x104>)
 80022fe:	4809      	ldr	r0, [pc, #36]	; (8002324 <led7_Scan+0x114>)
 8002300:	f004 f849 	bl	8006396 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002304:	2201      	movs	r2, #1
 8002306:	2140      	movs	r1, #64	; 0x40
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <led7_Scan+0x110>)
 800230a:	f002 fb53 	bl	80049b4 <HAL_GPIO_WritePin>
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000000e 	.word	0x2000000e
 8002318:	200000a4 	.word	0x200000a4
 800231c:	20000000 	.word	0x20000000
 8002320:	40021800 	.word	0x40021800
 8002324:	20000288 	.word	0x20000288

08002328 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	4613      	mov	r3, r2
 8002334:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0e      	blt.n	800235a <led7_SetDigit+0x32>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b09      	cmp	r3, #9
 8002340:	dc0b      	bgt.n	800235a <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <led7_SetDigit+0x40>)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	b2d9      	uxtb	r1, r3
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <led7_SetDigit+0x44>)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	4413      	add	r3, r2
 8002356:	460a      	mov	r2, r1
 8002358:	701a      	strb	r2, [r3, #0]
	}
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000004 	.word	0x20000004
 800236c:	20000000 	.word	0x20000000

08002370 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d107      	bne.n	8002390 <led7_SetColon+0x20>
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <led7_SetColon+0x3c>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	f023 0308 	bic.w	r3, r3, #8
 8002388:	b29a      	uxth	r2, r3
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <led7_SetColon+0x3c>)
 800238c:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 800238e:	e006      	b.n	800239e <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <led7_SetColon+0x3c>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	f043 0308 	orr.w	r3, r3, #8
 8002398:	b29a      	uxth	r2, r3
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <led7_SetColon+0x3c>)
 800239c:	801a      	strh	r2, [r3, #0]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	2000000e 	.word	0x2000000e

080023b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b4:	f000 ffa6 	bl	8003304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b8:	f000 f836 	bl	8002428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023bc:	f7ff f850 	bl	8001460 <MX_GPIO_Init>
  MX_TIM2_Init();
 80023c0:	f000 fd16 	bl	8002df0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80023c4:	f000 fbde 	bl	8002b84 <MX_SPI1_Init>
  MX_FSMC_Init();
 80023c8:	f7fe ff7a 	bl	80012c0 <MX_FSMC_Init>
  MX_I2C1_Init();
 80023cc:	f7ff f94e 	bl	800166c <MX_I2C1_Init>
  MX_TIM13_Init();
 80023d0:	f000 fd5a 	bl	8002e88 <MX_TIM13_Init>
  MX_DMA_Init();
 80023d4:	f7fe fe9e 	bl	8001114 <MX_DMA_Init>
  MX_ADC1_Init();
 80023d8:	f7fe fce4 	bl	8000da4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80023dc:	f000 feb0 	bl	8003140 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80023e0:	f000 f88c 	bl	80024fc <system_init>
  led7_SetColon(1);
 80023e4:	2001      	movs	r0, #1
 80023e6:	f7ff ffc3 	bl	8002370 <led7_SetColon>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear (BLACK);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff fa32 	bl	8001854 <lcd_Clear>
  updateTime();
 80023f0:	f000 fa02 	bl	80027f8 <updateTime>
  while (1)
  {
	  while (!flag_timer2);
 80023f4:	bf00      	nop
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <main+0x74>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0fb      	beq.n	80023f6 <main+0x46>
	  flag_timer2 = 0;
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <main+0x74>)
 8002400:	2200      	movs	r2, #0
 8002402:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8002404:	f7fe fdf8 	bl	8000ff8 <button_Scan>
	  test_LedDebug();
 8002408:	f000 f88e 	bl	8002528 <test_LedDebug>
	  test_Adc();
 800240c:	f000 f8b0 	bl	8002570 <test_Adc>
	  test_Buzzer();
 8002410:	f000 f960 	bl	80026d4 <test_Buzzer>
	  test_Uart();
 8002414:	f000 f98a 	bl	800272c <test_Uart>
	  ds3231_ReadTime();
 8002418:	f7fe feee 	bl	80011f8 <ds3231_ReadTime>
	  displayTime();
 800241c:	f000 fa0c 	bl	8002838 <displayTime>
  {
 8002420:	e7e8      	b.n	80023f4 <main+0x44>
 8002422:	bf00      	nop
 8002424:	200000ac 	.word	0x200000ac

08002428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b094      	sub	sp, #80	; 0x50
 800242c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242e:	f107 0320 	add.w	r3, r7, #32
 8002432:	2230      	movs	r2, #48	; 0x30
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f006 fe0e 	bl	8009058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <SystemClock_Config+0xcc>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <SystemClock_Config+0xcc>)
 8002456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245a:	6413      	str	r3, [r2, #64]	; 0x40
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <SystemClock_Config+0xcc>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002468:	2300      	movs	r3, #0
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <SystemClock_Config+0xd0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <SystemClock_Config+0xd0>)
 8002472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <SystemClock_Config+0xd0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002484:	2302      	movs	r3, #2
 8002486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002488:	2301      	movs	r3, #1
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800248c:	2310      	movs	r3, #16
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002490:	2302      	movs	r3, #2
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002494:	2300      	movs	r3, #0
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002498:	2308      	movs	r3, #8
 800249a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800249c:	23a8      	movs	r3, #168	; 0xa8
 800249e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024a0:	2302      	movs	r3, #2
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024a4:	2304      	movs	r3, #4
 80024a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a8:	f107 0320 	add.w	r3, r7, #32
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 fa75 	bl	800599c <HAL_RCC_OscConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024b8:	f000 fa02 	bl	80028c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024bc:	230f      	movs	r3, #15
 80024be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c0:	2302      	movs	r3, #2
 80024c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80024ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024d4:	f107 030c 	add.w	r3, r7, #12
 80024d8:	2105      	movs	r1, #5
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fcd6 	bl	8005e8c <HAL_RCC_ClockConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024e6:	f000 f9eb 	bl	80028c0 <Error_Handler>
  }
}
 80024ea:	bf00      	nop
 80024ec:	3750      	adds	r7, #80	; 0x50
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40007000 	.word	0x40007000

080024fc <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	  timer_init();
 8002500:	f000 faf0 	bl	8002ae4 <timer_init>
	  button_init();
 8002504:	f7fe fd6c 	bl	8000fe0 <button_init>
	  lcd_init();
 8002508:	f7ff fcbe 	bl	8001e88 <lcd_init>
	  sensor_init();
 800250c:	f000 f9de 	bl	80028cc <sensor_init>
	  buzzer_init();
 8002510:	f7fe fdde 	bl	80010d0 <buzzer_init>
	  ds3231_init();
 8002514:	f7fe fe1e 	bl	8001154 <ds3231_init>
	  uart_init_rs232();
 8002518:	f000 fd7a 	bl	8003010 <uart_init_rs232>
	  setTimer2(50);
 800251c:	2032      	movs	r0, #50	; 0x32
 800251e:	f000 faeb 	bl	8002af8 <setTimer2>
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <test_LedDebug+0x3c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <test_LedDebug+0x40>)
 8002534:	fb83 1302 	smull	r1, r3, r3, r2
 8002538:	10d9      	asrs	r1, r3, #3
 800253a:	17d3      	asrs	r3, r2, #31
 800253c:	1ac9      	subs	r1, r1, r3
 800253e:	460b      	mov	r3, r1
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	1ad1      	subs	r1, r2, r3
 8002548:	b2ca      	uxtb	r2, r1
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <test_LedDebug+0x3c>)
 800254c:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <test_LedDebug+0x3c>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002556:	2110      	movs	r1, #16
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <test_LedDebug+0x44>)
 800255a:	f002 fa44 	bl	80049e6 <HAL_GPIO_TogglePin>
	}
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200000a8 	.word	0x200000a8
 8002568:	66666667 	.word	0x66666667
 800256c:	40021000 	.word	0x40021000

08002570 <test_Adc>:
        return 0;
}

uint8_t count_adc = 0;

void test_Adc(){
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1)%20;
 8002576:	4b51      	ldr	r3, [pc, #324]	; (80026bc <test_Adc+0x14c>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <test_Adc+0x150>)
 800257e:	fb83 1302 	smull	r1, r3, r3, r2
 8002582:	10d9      	asrs	r1, r3, #3
 8002584:	17d3      	asrs	r3, r2, #31
 8002586:	1ac9      	subs	r1, r1, r3
 8002588:	460b      	mov	r3, r1
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	1ad1      	subs	r1, r2, r3
 8002592:	b2ca      	uxtb	r2, r1
 8002594:	4b49      	ldr	r3, [pc, #292]	; (80026bc <test_Adc+0x14c>)
 8002596:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 8002598:	4b48      	ldr	r3, [pc, #288]	; (80026bc <test_Adc+0x14c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	f040 8089 	bne.w	80026b4 <test_Adc+0x144>
		sensor_Read();
 80025a2:	f000 f9a1 	bl	80028e8 <sensor_Read>
		lcd_ShowStr(20, 100, "Power Consumption:", RED, BLACK, 16, 0);
 80025a6:	2300      	movs	r3, #0
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	2310      	movs	r3, #16
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	2300      	movs	r3, #0
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025b6:	4a43      	ldr	r2, [pc, #268]	; (80026c4 <test_Adc+0x154>)
 80025b8:	2164      	movs	r1, #100	; 0x64
 80025ba:	2014      	movs	r0, #20
 80025bc:	f7ff fdc4 	bl	8002148 <lcd_ShowStr>
		lcd_ShowFloatNum(170, 100,sensor_GetPowerConsumption(), 4, RED, BLACK, 16);
 80025c0:	f000 f9be 	bl	8002940 <sensor_GetPowerConsumption>
 80025c4:	eef0 7a40 	vmov.f32	s15, s0
 80025c8:	2310      	movs	r3, #16
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	2300      	movs	r3, #0
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025d4:	2204      	movs	r2, #4
 80025d6:	eeb0 0a67 	vmov.f32	s0, s15
 80025da:	2164      	movs	r1, #100	; 0x64
 80025dc:	20aa      	movs	r0, #170	; 0xaa
 80025de:	f7ff fba7 	bl	8001d30 <lcd_ShowFloatNum>
		lcd_ShowStr(20, 120, "Light:", RED, BLACK, 16, 0);
 80025e2:	2300      	movs	r3, #0
 80025e4:	9302      	str	r3, [sp, #8]
 80025e6:	2310      	movs	r3, #16
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	2300      	movs	r3, #0
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025f2:	4a35      	ldr	r2, [pc, #212]	; (80026c8 <test_Adc+0x158>)
 80025f4:	2178      	movs	r1, #120	; 0x78
 80025f6:	2014      	movs	r0, #20
 80025f8:	f7ff fda6 	bl	8002148 <lcd_ShowStr>
		lcd_ShowStr(170, 120,sensor_GetLightIntensity(), RED, BLACK, 16, 0);
 80025fc:	f000 fa5c 	bl	8002ab8 <sensor_GetLightIntensity>
 8002600:	4602      	mov	r2, r0
 8002602:	2300      	movs	r3, #0
 8002604:	9302      	str	r3, [sp, #8]
 8002606:	2310      	movs	r3, #16
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	2300      	movs	r3, #0
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002612:	2178      	movs	r1, #120	; 0x78
 8002614:	20aa      	movs	r0, #170	; 0xaa
 8002616:	f7ff fd97 	bl	8002148 <lcd_ShowStr>
		lcd_DrawRectangle(160, 120, 260, 136, BLACK);
 800261a:	2300      	movs	r3, #0
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2388      	movs	r3, #136	; 0x88
 8002620:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002624:	2178      	movs	r1, #120	; 0x78
 8002626:	20a0      	movs	r0, #160	; 0xa0
 8002628:	f7ff f9e1 	bl	80019ee <lcd_DrawRectangle>
		lcd_ShowStr(20, 140, "Temperature:", RED, BLACK, 16, 0);
 800262c:	2300      	movs	r3, #0
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	2310      	movs	r3, #16
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	2300      	movs	r3, #0
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800263c:	4a23      	ldr	r2, [pc, #140]	; (80026cc <test_Adc+0x15c>)
 800263e:	218c      	movs	r1, #140	; 0x8c
 8002640:	2014      	movs	r0, #20
 8002642:	f7ff fd81 	bl	8002148 <lcd_ShowStr>
		lcd_ShowIntNum(170, 140, sensor_GetTemperature(), 4, RED, BLACK, 16);
 8002646:	f000 f95d 	bl	8002904 <sensor_GetTemperature>
 800264a:	eef0 7a40 	vmov.f32	s15, s0
 800264e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002652:	ee17 3a90 	vmov	r3, s15
 8002656:	b29a      	uxth	r2, r3
 8002658:	2310      	movs	r3, #16
 800265a:	9302      	str	r3, [sp, #8]
 800265c:	2300      	movs	r3, #0
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	2304      	movs	r3, #4
 8002668:	218c      	movs	r1, #140	; 0x8c
 800266a:	20aa      	movs	r0, #170	; 0xaa
 800266c:	f7ff fae2 	bl	8001c34 <lcd_ShowIntNum>
		lcd_ShowStr(20, 160, "Humidity:", RED, BLACK, 16, 0);
 8002670:	2300      	movs	r3, #0
 8002672:	9302      	str	r3, [sp, #8]
 8002674:	2310      	movs	r3, #16
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	2300      	movs	r3, #0
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002680:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <test_Adc+0x160>)
 8002682:	21a0      	movs	r1, #160	; 0xa0
 8002684:	2014      	movs	r0, #20
 8002686:	f7ff fd5f 	bl	8002148 <lcd_ShowStr>
		lcd_ShowIntNum(170, 160, sensor_GetHumidity(), 4, RED, BLACK, 16);
 800268a:	f000 f9e7 	bl	8002a5c <sensor_GetHumidity>
 800268e:	eef0 7a40 	vmov.f32	s15, s0
 8002692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002696:	ee17 3a90 	vmov	r3, s15
 800269a:	b29a      	uxth	r2, r3
 800269c:	2310      	movs	r3, #16
 800269e:	9302      	str	r3, [sp, #8]
 80026a0:	2300      	movs	r3, #0
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2304      	movs	r3, #4
 80026ac:	21a0      	movs	r1, #160	; 0xa0
 80026ae:	20aa      	movs	r0, #170	; 0xaa
 80026b0:	f7ff fac0 	bl	8001c34 <lcd_ShowIntNum>
	}
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200000a9 	.word	0x200000a9
 80026c0:	66666667 	.word	0x66666667
 80026c4:	080098dc 	.word	0x080098dc
 80026c8:	080098f0 	.word	0x080098f0
 80026cc:	080098f8 	.word	0x080098f8
 80026d0:	08009908 	.word	0x08009908

080026d4 <test_Buzzer>:

void test_Buzzer(){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
    static uint8_t buzzer_state = 0;
    if (sensor_GetHumidity() > 70) {
 80026d8:	f000 f9c0 	bl	8002a5c <sensor_GetHumidity>
 80026dc:	eef0 7a40 	vmov.f32	s15, s0
 80026e0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002724 <test_Buzzer+0x50>
 80026e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ec:	dd11      	ble.n	8002712 <test_Buzzer+0x3e>
        if (buzzer_state == 0) {
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <test_Buzzer+0x54>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <test_Buzzer+0x30>
            buzzer_SetVolume(50);
 80026f6:	2032      	movs	r0, #50	; 0x32
 80026f8:	f7fe fcf4 	bl	80010e4 <buzzer_SetVolume>
            buzzer_state = 1;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <test_Buzzer+0x54>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
        }
    } else {
        buzzer_SetVolume(0);
        buzzer_state = 0;
    }
}
 8002702:	e00c      	b.n	800271e <test_Buzzer+0x4a>
            buzzer_SetVolume(0);
 8002704:	2000      	movs	r0, #0
 8002706:	f7fe fced 	bl	80010e4 <buzzer_SetVolume>
            buzzer_state = 0;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <test_Buzzer+0x54>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
}
 8002710:	e005      	b.n	800271e <test_Buzzer+0x4a>
        buzzer_SetVolume(0);
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe fce6 	bl	80010e4 <buzzer_SetVolume>
        buzzer_state = 0;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <test_Buzzer+0x54>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	428c0000 	.word	0x428c0000
 8002728:	200000aa 	.word	0x200000aa

0800272c <test_Uart>:

void test_Uart(){
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
	uart_Rs232SendString("Power Consumption:");
 8002730:	482a      	ldr	r0, [pc, #168]	; (80027dc <test_Uart+0xb0>)
 8002732:	f000 fc7b 	bl	800302c <uart_Rs232SendString>
	uart_Rs232SendNum(sensor_GetPowerConsumption());
 8002736:	f000 f903 	bl	8002940 <sensor_GetPowerConsumption>
 800273a:	ee10 3a10 	vmov	r3, s0
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fefa 	bl	8000538 <__aeabi_f2d>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	ec43 2b10 	vmov	d0, r2, r3
 800274c:	f000 fc88 	bl	8003060 <uart_Rs232SendNum>
	uart_Rs232SendString("\n");
 8002750:	4823      	ldr	r0, [pc, #140]	; (80027e0 <test_Uart+0xb4>)
 8002752:	f000 fc6b 	bl	800302c <uart_Rs232SendString>
	uart_Rs232SendString("Light:");
 8002756:	4823      	ldr	r0, [pc, #140]	; (80027e4 <test_Uart+0xb8>)
 8002758:	f000 fc68 	bl	800302c <uart_Rs232SendString>
	uart_Rs232SendString(sensor_GetLightIntensity());
 800275c:	f000 f9ac 	bl	8002ab8 <sensor_GetLightIntensity>
 8002760:	4603      	mov	r3, r0
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fc62 	bl	800302c <uart_Rs232SendString>
	uart_Rs232SendString("\n");
 8002768:	481d      	ldr	r0, [pc, #116]	; (80027e0 <test_Uart+0xb4>)
 800276a:	f000 fc5f 	bl	800302c <uart_Rs232SendString>
	uart_Rs232SendString("Temperature:");
 800276e:	481e      	ldr	r0, [pc, #120]	; (80027e8 <test_Uart+0xbc>)
 8002770:	f000 fc5c 	bl	800302c <uart_Rs232SendString>
	uart_Rs232SendNum(sensor_GetTemperature());
 8002774:	f000 f8c6 	bl	8002904 <sensor_GetTemperature>
 8002778:	ee10 3a10 	vmov	r3, s0
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fedb 	bl	8000538 <__aeabi_f2d>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	ec43 2b10 	vmov	d0, r2, r3
 800278a:	f000 fc69 	bl	8003060 <uart_Rs232SendNum>
	uart_Rs232SendString("\n");
 800278e:	4814      	ldr	r0, [pc, #80]	; (80027e0 <test_Uart+0xb4>)
 8002790:	f000 fc4c 	bl	800302c <uart_Rs232SendString>
	uart_Rs232SendString("Humidity:");
 8002794:	4815      	ldr	r0, [pc, #84]	; (80027ec <test_Uart+0xc0>)
 8002796:	f000 fc49 	bl	800302c <uart_Rs232SendString>
	uart_Rs232SendNum(sensor_GetHumidity());
 800279a:	f000 f95f 	bl	8002a5c <sensor_GetHumidity>
 800279e:	ee10 3a10 	vmov	r3, s0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd fec8 	bl	8000538 <__aeabi_f2d>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	ec43 2b10 	vmov	d0, r2, r3
 80027b0:	f000 fc56 	bl	8003060 <uart_Rs232SendNum>
	uart_Rs232SendString("\n");
 80027b4:	480a      	ldr	r0, [pc, #40]	; (80027e0 <test_Uart+0xb4>)
 80027b6:	f000 fc39 	bl	800302c <uart_Rs232SendString>
	if (sensor_GetHumidity() > 70){
 80027ba:	f000 f94f 	bl	8002a5c <sensor_GetHumidity>
 80027be:	eef0 7a40 	vmov.f32	s15, s0
 80027c2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80027f0 <test_Uart+0xc4>
 80027c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ce:	dc00      	bgt.n	80027d2 <test_Uart+0xa6>
		uart_Rs232SendString("Humidity is too high!!!!! \n");
	}
}
 80027d0:	e002      	b.n	80027d8 <test_Uart+0xac>
		uart_Rs232SendString("Humidity is too high!!!!! \n");
 80027d2:	4808      	ldr	r0, [pc, #32]	; (80027f4 <test_Uart+0xc8>)
 80027d4:	f000 fc2a 	bl	800302c <uart_Rs232SendString>
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	080098dc 	.word	0x080098dc
 80027e0:	08009914 	.word	0x08009914
 80027e4:	080098f0 	.word	0x080098f0
 80027e8:	080098f8 	.word	0x080098f8
 80027ec:	08009908 	.word	0x08009908
 80027f0:	428c0000 	.word	0x428c0000
 80027f4:	08009918 	.word	0x08009918

080027f8 <updateTime>:

void updateTime(){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 80027fc:	2118      	movs	r1, #24
 80027fe:	2006      	movs	r0, #6
 8002800:	f7fe fcd8 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 8002804:	210b      	movs	r1, #11
 8002806:	2005      	movs	r0, #5
 8002808:	f7fe fcd4 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 11);
 800280c:	210b      	movs	r1, #11
 800280e:	2004      	movs	r0, #4
 8002810:	f7fe fcd0 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 2);
 8002814:	2102      	movs	r1, #2
 8002816:	2003      	movs	r0, #3
 8002818:	f7fe fccc 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 11);
 800281c:	210b      	movs	r1, #11
 800281e:	2002      	movs	r0, #2
 8002820:	f7fe fcc8 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 30);
 8002824:	211e      	movs	r1, #30
 8002826:	2001      	movs	r0, #1
 8002828:	f7fe fcc4 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 30);
 800282c:	211e      	movs	r1, #30
 800282e:	2000      	movs	r0, #0
 8002830:	f7fe fcc0 	bl	80011b4 <ds3231_Write>
}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}

08002838 <displayTime>:

void displayTime(){
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	led7_SetDigit(ds3231_hours / 10, 1, 0);
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <displayTime+0x7c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <displayTime+0x80>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	08db      	lsrs	r3, r3, #3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2200      	movs	r2, #0
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fd6a 	bl	8002328 <led7_SetDigit>
	led7_SetDigit(ds3231_hours % 10, 1, 0);
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <displayTime+0x7c>)
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <displayTime+0x80>)
 800285a:	fba3 1302 	umull	r1, r3, r3, r2
 800285e:	08d9      	lsrs	r1, r3, #3
 8002860:	460b      	mov	r3, r1
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2200      	movs	r2, #0
 800286e:	2101      	movs	r1, #1
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fd59 	bl	8002328 <led7_SetDigit>
	led7_SetDigit(ds3231_min / 10 , 1, 0);
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <displayTime+0x84>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <displayTime+0x80>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2200      	movs	r2, #0
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fd4d 	bl	8002328 <led7_SetDigit>
	led7_SetDigit(ds3231_min % 10, 1, 0);
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <displayTime+0x84>)
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <displayTime+0x80>)
 8002894:	fba3 1302 	umull	r1, r3, r3, r2
 8002898:	08d9      	lsrs	r1, r3, #3
 800289a:	460b      	mov	r3, r1
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2200      	movs	r2, #0
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fd3c 	bl	8002328 <led7_SetDigit>
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000191 	.word	0x20000191
 80028b8:	cccccccd 	.word	0xcccccccd
 80028bc:	2000018e 	.word	0x2000018e

080028c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028c4:	b672      	cpsid	i
}
 80028c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <Error_Handler+0x8>
	...

080028cc <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 80028d0:	2205      	movs	r2, #5
 80028d2:	4903      	ldr	r1, [pc, #12]	; (80028e0 <sensor_init+0x14>)
 80028d4:	4803      	ldr	r0, [pc, #12]	; (80028e4 <sensor_init+0x18>)
 80028d6:	f000 fdef 	bl	80034b8 <HAL_ADC_Start_DMA>
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	2000027c 	.word	0x2000027c
 80028e4:	200000c4 	.word	0x200000c4

080028e8 <sensor_Read>:

void sensor_Read(){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80028ec:	2205      	movs	r2, #5
 80028ee:	4903      	ldr	r1, [pc, #12]	; (80028fc <sensor_Read+0x14>)
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <sensor_Read+0x18>)
 80028f2:	f000 fde1 	bl	80034b8 <HAL_ADC_Start_DMA>
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000027c 	.word	0x2000027c
 8002900:	200000c4 	.word	0x200000c4

08002904 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <sensor_GetTemperature+0x30>)
 800290a:	891b      	ldrh	r3, [r3, #8]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002914:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002938 <sensor_GetTemperature+0x34>
 8002918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800291c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800293c <sensor_GetTemperature+0x38>
 8002920:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002924:	eef0 7a66 	vmov.f32	s15, s13
}
 8002928:	eeb0 0a67 	vmov.f32	s0, s15
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	2000027c 	.word	0x2000027c
 8002938:	43a50000 	.word	0x43a50000
 800293c:	457ff000 	.word	0x457ff000

08002940 <sensor_GetPowerConsumption>:

float sensor_GetPowerConsumption(){
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	af00      	add	r7, sp, #0
	return (((float)adc_receive[0]*3.3*12)/(4095*1.565)) * ((((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5);
 8002944:	4b40      	ldr	r3, [pc, #256]	; (8002a48 <sensor_GetPowerConsumption+0x108>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002950:	ee17 0a90 	vmov	r0, s15
 8002954:	f7fd fdf0 	bl	8000538 <__aeabi_f2d>
 8002958:	a335      	add	r3, pc, #212	; (adr r3, 8002a30 <sensor_GetPowerConsumption+0xf0>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fd fe43 	bl	80005e8 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <sensor_GetPowerConsumption+0x10c>)
 8002970:	f7fd fe3a 	bl	80005e8 <__aeabi_dmul>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	a32e      	add	r3, pc, #184	; (adr r3, 8002a38 <sensor_GetPowerConsumption+0xf8>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f7fd ff5b 	bl	800083c <__aeabi_ddiv>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4614      	mov	r4, r2
 800298c:	461d      	mov	r5, r3
 800298e:	4b2e      	ldr	r3, [pc, #184]	; (8002a48 <sensor_GetPowerConsumption+0x108>)
 8002990:	885b      	ldrh	r3, [r3, #2]
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800299a:	ee17 0a90 	vmov	r0, s15
 800299e:	f7fd fdcb 	bl	8000538 <__aeabi_f2d>
 80029a2:	a323      	add	r3, pc, #140	; (adr r3, 8002a30 <sensor_GetPowerConsumption+0xf0>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f7fd fe1e 	bl	80005e8 <__aeabi_dmul>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <sensor_GetPowerConsumption+0x110>)
 80029ba:	f7fd fe15 	bl	80005e8 <__aeabi_dmul>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	a31e      	add	r3, pc, #120	; (adr r3, 8002a40 <sensor_GetPowerConsumption+0x100>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd ff36 	bl	800083c <__aeabi_ddiv>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <sensor_GetPowerConsumption+0x114>)
 80029de:	f7fd fc4b 	bl	8000278 <__aeabi_dsub>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <sensor_GetPowerConsumption+0x118>)
 80029f0:	f7fd fdfa 	bl	80005e8 <__aeabi_dmul>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <sensor_GetPowerConsumption+0x114>)
 8002a02:	f7fd ff1b 	bl	800083c <__aeabi_ddiv>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	f7fd fdeb 	bl	80005e8 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7fd fff7 	bl	8000a0c <__aeabi_d2f>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	ee07 3a90 	vmov	s15, r3
}
 8002a24:	eeb0 0a67 	vmov.f32	s0, s15
 8002a28:	bdb0      	pop	{r4, r5, r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	f3af 8000 	nop.w
 8002a30:	66666666 	.word	0x66666666
 8002a34:	400a6666 	.word	0x400a6666
 8002a38:	cccccccd 	.word	0xcccccccd
 8002a3c:	40b908ac 	.word	0x40b908ac
 8002a40:	147ae148 	.word	0x147ae148
 8002a44:	40a4b2ee 	.word	0x40a4b2ee
 8002a48:	2000027c 	.word	0x2000027c
 8002a4c:	40280000 	.word	0x40280000
 8002a50:	408f4000 	.word	0x408f4000
 8002a54:	40040000 	.word	0x40040000
 8002a58:	40140000 	.word	0x40140000

08002a5c <sensor_GetHumidity>:

float sensor_GetHumidity(){
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
	if (adc_receive[3] < 180) return 0;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <sensor_GetHumidity+0x4c>)
 8002a62:	88db      	ldrh	r3, [r3, #6]
 8002a64:	2bb3      	cmp	r3, #179	; 0xb3
 8002a66:	d802      	bhi.n	8002a6e <sensor_GetHumidity+0x12>
 8002a68:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002aac <sensor_GetHumidity+0x50>
 8002a6c:	e015      	b.n	8002a9a <sensor_GetHumidity+0x3e>
	else if (adc_receive[3] > 3780) return 100;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <sensor_GetHumidity+0x4c>)
 8002a70:	88db      	ldrh	r3, [r3, #6]
 8002a72:	f640 62c4 	movw	r2, #3780	; 0xec4
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d902      	bls.n	8002a80 <sensor_GetHumidity+0x24>
 8002a7a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002ab0 <sensor_GetHumidity+0x54>
 8002a7e:	e00c      	b.n	8002a9a <sensor_GetHumidity+0x3e>
	else {
		return (adc_receive[3] - 180) * 100 / (3780 - 180);
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <sensor_GetHumidity+0x4c>)
 8002a82:	88db      	ldrh	r3, [r3, #6]
 8002a84:	3bb4      	subs	r3, #180	; 0xb4
 8002a86:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <sensor_GetHumidity+0x58>)
 8002a88:	fb82 1203 	smull	r1, r2, r2, r3
 8002a8c:	10d2      	asrs	r2, r2, #3
 8002a8e:	17db      	asrs	r3, r3, #31
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	}
}
 8002a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	2000027c 	.word	0x2000027c
 8002aac:	00000000 	.word	0x00000000
 8002ab0:	42c80000 	.word	0x42c80000
 8002ab4:	38e38e39 	.word	0x38e38e39

08002ab8 <sensor_GetLightIntensity>:

char* sensor_GetLightIntensity(){
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
	if (adc_receive[2] > 1500) return "Weak";
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <sensor_GetLightIntensity+0x20>)
 8002abe:	889b      	ldrh	r3, [r3, #4]
 8002ac0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <sensor_GetLightIntensity+0x14>
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <sensor_GetLightIntensity+0x24>)
 8002aca:	e000      	b.n	8002ace <sensor_GetLightIntensity+0x16>
	else return "Strong";
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <sensor_GetLightIntensity+0x28>)
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	2000027c 	.word	0x2000027c
 8002adc:	08009934 	.word	0x08009934
 8002ae0:	0800993c 	.word	0x0800993c

08002ae4 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <timer_init+0x10>)
 8002aea:	f004 fa07 	bl	8006efc <HAL_TIM_Base_Start_IT>
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000328 	.word	0x20000328

08002af8 <setTimer2>:

void setTimer2(uint16_t duration){
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002b02:	4a08      	ldr	r2, [pc, #32]	; (8002b24 <setTimer2+0x2c>)
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <setTimer2+0x2c>)
 8002b0a:	881a      	ldrh	r2, [r3, #0]
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <setTimer2+0x30>)
 8002b0e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <setTimer2+0x34>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	801a      	strh	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	200000b0 	.word	0x200000b0
 8002b28:	200000ae 	.word	0x200000ae
 8002b2c:	200000ac 	.word	0x200000ac

08002b30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d116      	bne.n	8002b70 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d010      	beq.n	8002b6c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b54:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b66:	881a      	ldrh	r2, [r3, #0]
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b6a:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002b6c:	f7ff fb50 	bl	8002210 <led7_Scan>
	}
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	200000ae 	.word	0x200000ae
 8002b7c:	200000ac 	.word	0x200000ac
 8002b80:	200000b0 	.word	0x200000b0

08002b84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <MX_SPI1_Init+0x68>)
 8002b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002bd0:	220a      	movs	r2, #10
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bd4:	4804      	ldr	r0, [pc, #16]	; (8002be8 <MX_SPI1_Init+0x64>)
 8002bd6:	f003 fb55 	bl	8006284 <HAL_SPI_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002be0:	f7ff fe6e 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000288 	.word	0x20000288
 8002bec:	40013000 	.word	0x40013000

08002bf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <HAL_SPI_MspInit+0x84>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d12b      	bne.n	8002c6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <HAL_SPI_MspInit+0x88>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <HAL_SPI_MspInit+0x88>)
 8002c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c20:	6453      	str	r3, [r2, #68]	; 0x44
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <HAL_SPI_MspInit+0x88>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_SPI_MspInit+0x88>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a10      	ldr	r2, [pc, #64]	; (8002c78 <HAL_SPI_MspInit+0x88>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_SPI_MspInit+0x88>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c4a:	2338      	movs	r3, #56	; 0x38
 8002c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c5a:	2305      	movs	r3, #5
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	4619      	mov	r1, r3
 8002c64:	4805      	ldr	r0, [pc, #20]	; (8002c7c <HAL_SPI_MspInit+0x8c>)
 8002c66:	f001 fd09 	bl	800467c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3728      	adds	r7, #40	; 0x28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40013000 	.word	0x40013000
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40020400 	.word	0x40020400

08002c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_MspInit+0x4c>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <HAL_MspInit+0x4c>)
 8002c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c94:	6453      	str	r3, [r2, #68]	; 0x44
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_MspInit+0x4c>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_MspInit+0x4c>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <HAL_MspInit+0x4c>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_MspInit+0x4c>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cd4:	e7fe      	b.n	8002cd4 <NMI_Handler+0x4>

08002cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cda:	e7fe      	b.n	8002cda <HardFault_Handler+0x4>

08002cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <MemManage_Handler+0x4>

08002ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <BusFault_Handler+0x4>

08002ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cec:	e7fe      	b.n	8002cec <UsageFault_Handler+0x4>

08002cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d1c:	f000 fb44 	bl	80033a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d28:	4802      	ldr	r0, [pc, #8]	; (8002d34 <TIM2_IRQHandler+0x10>)
 8002d2a:	f004 fa79 	bl	8007220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000328 	.word	0x20000328

08002d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d3c:	4802      	ldr	r0, [pc, #8]	; (8002d48 <USART1_IRQHandler+0x10>)
 8002d3e:	f005 f9d9 	bl	80080f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200003d4 	.word	0x200003d4

08002d4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d50:	4802      	ldr	r0, [pc, #8]	; (8002d5c <DMA2_Stream0_IRQHandler+0x10>)
 8002d52:	f001 fa29 	bl	80041a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000010c 	.word	0x2000010c

08002d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d68:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <_sbrk+0x5c>)
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <_sbrk+0x60>)
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <_sbrk+0x64>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <_sbrk+0x64>)
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <_sbrk+0x68>)
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d207      	bcs.n	8002da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d90:	f006 f938 	bl	8009004 <__errno>
 8002d94:	4603      	mov	r3, r0
 8002d96:	220c      	movs	r2, #12
 8002d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	e009      	b.n	8002db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <_sbrk+0x64>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <_sbrk+0x64>)
 8002db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20020000 	.word	0x20020000
 8002dc0:	00000400 	.word	0x00000400
 8002dc4:	200000b4 	.word	0x200000b4
 8002dc8:	20000430 	.word	0x20000430

08002dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <SystemInit+0x20>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <SystemInit+0x20>)
 8002dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002df6:	f107 0308 	add.w	r3, r7, #8
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e04:	463b      	mov	r3, r7
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <MX_TIM2_Init+0x94>)
 8002e0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <MX_TIM2_Init+0x94>)
 8002e16:	f240 3247 	movw	r2, #839	; 0x347
 8002e1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <MX_TIM2_Init+0x94>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <MX_TIM2_Init+0x94>)
 8002e24:	2263      	movs	r2, #99	; 0x63
 8002e26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <MX_TIM2_Init+0x94>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <MX_TIM2_Init+0x94>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e34:	4813      	ldr	r0, [pc, #76]	; (8002e84 <MX_TIM2_Init+0x94>)
 8002e36:	f004 f811 	bl	8006e5c <HAL_TIM_Base_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e40:	f7ff fd3e 	bl	80028c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e4a:	f107 0308 	add.w	r3, r7, #8
 8002e4e:	4619      	mov	r1, r3
 8002e50:	480c      	ldr	r0, [pc, #48]	; (8002e84 <MX_TIM2_Init+0x94>)
 8002e52:	f004 fbaf 	bl	80075b4 <HAL_TIM_ConfigClockSource>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e5c:	f7ff fd30 	bl	80028c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e60:	2300      	movs	r3, #0
 8002e62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e68:	463b      	mov	r3, r7
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4805      	ldr	r0, [pc, #20]	; (8002e84 <MX_TIM2_Init+0x94>)
 8002e6e:	f004 ffa1 	bl	8007db4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e78:	f7ff fd22 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000328 	.word	0x20000328

08002e88 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
 8002e9c:	615a      	str	r2, [r3, #20]
 8002e9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <MX_TIM13_Init+0x94>)
 8002ea2:	4a1f      	ldr	r2, [pc, #124]	; (8002f20 <MX_TIM13_Init+0x98>)
 8002ea4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <MX_TIM13_Init+0x94>)
 8002ea8:	f240 3247 	movw	r2, #839	; 0x347
 8002eac:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <MX_TIM13_Init+0x94>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <MX_TIM13_Init+0x94>)
 8002eb6:	2263      	movs	r2, #99	; 0x63
 8002eb8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eba:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <MX_TIM13_Init+0x94>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec0:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <MX_TIM13_Init+0x94>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002ec6:	4815      	ldr	r0, [pc, #84]	; (8002f1c <MX_TIM13_Init+0x94>)
 8002ec8:	f003 ffc8 	bl	8006e5c <HAL_TIM_Base_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002ed2:	f7ff fcf5 	bl	80028c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002ed6:	4811      	ldr	r0, [pc, #68]	; (8002f1c <MX_TIM13_Init+0x94>)
 8002ed8:	f004 f880 	bl	8006fdc <HAL_TIM_PWM_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002ee2:	f7ff fced 	bl	80028c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ee6:	2360      	movs	r3, #96	; 0x60
 8002ee8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4619      	mov	r1, r3
 8002efc:	4807      	ldr	r0, [pc, #28]	; (8002f1c <MX_TIM13_Init+0x94>)
 8002efe:	f004 fa97 	bl	8007430 <HAL_TIM_PWM_ConfigChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002f08:	f7ff fcda 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002f0c:	4803      	ldr	r0, [pc, #12]	; (8002f1c <MX_TIM13_Init+0x94>)
 8002f0e:	f000 f845 	bl	8002f9c <HAL_TIM_MspPostInit>

}
 8002f12:	bf00      	nop
 8002f14:	3720      	adds	r7, #32
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200002e0 	.word	0x200002e0
 8002f20:	40001c00 	.word	0x40001c00

08002f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d116      	bne.n	8002f64 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_TIM_Base_MspInit+0x70>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <HAL_TIM_Base_MspInit+0x70>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_TIM_Base_MspInit+0x70>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2100      	movs	r1, #0
 8002f56:	201c      	movs	r0, #28
 8002f58:	f000 ff57 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f5c:	201c      	movs	r0, #28
 8002f5e:	f000 ff70 	bl	8003e42 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002f62:	e012      	b.n	8002f8a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <HAL_TIM_Base_MspInit+0x74>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10d      	bne.n	8002f8a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <HAL_TIM_Base_MspInit+0x70>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <HAL_TIM_Base_MspInit+0x70>)
 8002f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_TIM_Base_MspInit+0x70>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40001c00 	.word	0x40001c00

08002f9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 030c 	add.w	r3, r7, #12
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <HAL_TIM_MspPostInit+0x68>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d11e      	bne.n	8002ffc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_TIM_MspPostInit+0x6c>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a10      	ldr	r2, [pc, #64]	; (8003008 <HAL_TIM_MspPostInit+0x6c>)
 8002fc8:	f043 0320 	orr.w	r3, r3, #32
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_TIM_MspPostInit+0x6c>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002fec:	2309      	movs	r3, #9
 8002fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4805      	ldr	r0, [pc, #20]	; (800300c <HAL_TIM_MspPostInit+0x70>)
 8002ff8:	f001 fb40 	bl	800467c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002ffc:	bf00      	nop
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40001c00 	.word	0x40001c00
 8003008:	40023800 	.word	0x40023800
 800300c:	40021400 	.word	0x40021400

08003010 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003014:	2201      	movs	r2, #1
 8003016:	4903      	ldr	r1, [pc, #12]	; (8003024 <uart_init_rs232+0x14>)
 8003018:	4803      	ldr	r0, [pc, #12]	; (8003028 <uart_init_rs232+0x18>)
 800301a:	f005 f83a 	bl	8008092 <HAL_UART_Receive_IT>
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200000b8 	.word	0x200000b8
 8003028:	200003d4 	.word	0x200003d4

0800302c <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4907      	ldr	r1, [pc, #28]	; (8003054 <uart_Rs232SendString+0x28>)
 8003038:	4807      	ldr	r0, [pc, #28]	; (8003058 <uart_Rs232SendString+0x2c>)
 800303a:	f006 f815 	bl	8009068 <siprintf>
 800303e:	4603      	mov	r3, r0
 8003040:	b29a      	uxth	r2, r3
 8003042:	230a      	movs	r3, #10
 8003044:	4904      	ldr	r1, [pc, #16]	; (8003058 <uart_Rs232SendString+0x2c>)
 8003046:	4805      	ldr	r0, [pc, #20]	; (800305c <uart_Rs232SendString+0x30>)
 8003048:	f004 ff91 	bl	8007f6e <HAL_UART_Transmit>
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	08009944 	.word	0x08009944
 8003058:	20000370 	.word	0x20000370
 800305c:	200003d4 	.word	0x200003d4

08003060 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 800306e:	4824      	ldr	r0, [pc, #144]	; (8003100 <uart_Rs232SendNum+0xa0>)
 8003070:	f7ff ffdc 	bl	800302c <uart_Rs232SendString>
		return;
 8003074:	e040      	b.n	80030f8 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 800307a:	230a      	movs	r3, #10
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	e038      	b.n	80030f2 <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	3b01      	subs	r3, #1
 8003084:	4619      	mov	r1, r3
 8003086:	200a      	movs	r0, #10
 8003088:	f7fe fdb8 	bl	8001bfc <mypow>
 800308c:	4603      	mov	r3, r0
 800308e:	461a      	mov	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4293      	cmp	r3, r2
 8003094:	d315      	bcc.n	80030c2 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3b01      	subs	r3, #1
 800309e:	4619      	mov	r1, r3
 80030a0:	200a      	movs	r0, #10
 80030a2:	f7fe fdab 	bl	8001bfc <mypow>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4914      	ldr	r1, [pc, #80]	; (8003104 <uart_Rs232SendNum+0xa4>)
 80030b4:	4814      	ldr	r0, [pc, #80]	; (8003108 <uart_Rs232SendNum+0xa8>)
 80030b6:	f005 ffd7 	bl	8009068 <siprintf>
            uart_Rs232SendString(msg);
 80030ba:	4813      	ldr	r0, [pc, #76]	; (8003108 <uart_Rs232SendNum+0xa8>)
 80030bc:	f7ff ffb6 	bl	800302c <uart_Rs232SendString>
 80030c0:	e005      	b.n	80030ce <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 80030c8:	480d      	ldr	r0, [pc, #52]	; (8003100 <uart_Rs232SendNum+0xa0>)
 80030ca:	f7ff ffaf 	bl	800302c <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	4619      	mov	r1, r3
 80030d4:	200a      	movs	r0, #10
 80030d6:	f7fe fd91 	bl	8001bfc <mypow>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80030e4:	fb02 f201 	mul.w	r2, r2, r1
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	dcc3      	bgt.n	8003080 <uart_Rs232SendNum+0x20>
    }
}
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	08009948 	.word	0x08009948
 8003104:	0800994c 	.word	0x0800994c
 8003108:	20000370 	.word	0x20000370

0800310c <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a06      	ldr	r2, [pc, #24]	; (8003134 <HAL_UART_RxCpltCallback+0x28>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d105      	bne.n	800312a <HAL_UART_RxCpltCallback+0x1e>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800311e:	230a      	movs	r3, #10
 8003120:	2201      	movs	r2, #1
 8003122:	4905      	ldr	r1, [pc, #20]	; (8003138 <HAL_UART_RxCpltCallback+0x2c>)
 8003124:	4805      	ldr	r0, [pc, #20]	; (800313c <HAL_UART_RxCpltCallback+0x30>)
 8003126:	f004 ff22 	bl	8007f6e <HAL_UART_Transmit>


		// turn on the receice interrupt
//		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
	}
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40011000 	.word	0x40011000
 8003138:	200000b8 	.word	0x200000b8
 800313c:	200003d4 	.word	0x200003d4

08003140 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <MX_USART1_UART_Init+0x4c>)
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <MX_USART1_UART_Init+0x50>)
 8003148:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <MX_USART1_UART_Init+0x4c>)
 800314c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003150:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <MX_USART1_UART_Init+0x4c>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <MX_USART1_UART_Init+0x4c>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <MX_USART1_UART_Init+0x4c>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <MX_USART1_UART_Init+0x4c>)
 8003166:	220c      	movs	r2, #12
 8003168:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <MX_USART1_UART_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <MX_USART1_UART_Init+0x4c>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003176:	4805      	ldr	r0, [pc, #20]	; (800318c <MX_USART1_UART_Init+0x4c>)
 8003178:	f004 feac 	bl	8007ed4 <HAL_UART_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003182:	f7ff fb9d 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200003d4 	.word	0x200003d4
 8003190:	40011000 	.word	0x40011000

08003194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	; 0x28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <HAL_UART_MspInit+0x94>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d134      	bne.n	8003220 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	4b1c      	ldr	r3, [pc, #112]	; (800322c <HAL_UART_MspInit+0x98>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	4a1b      	ldr	r2, [pc, #108]	; (800322c <HAL_UART_MspInit+0x98>)
 80031c0:	f043 0310 	orr.w	r3, r3, #16
 80031c4:	6453      	str	r3, [r2, #68]	; 0x44
 80031c6:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_UART_MspInit+0x98>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <HAL_UART_MspInit+0x98>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a14      	ldr	r2, [pc, #80]	; (800322c <HAL_UART_MspInit+0x98>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_UART_MspInit+0x98>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fc:	2303      	movs	r3, #3
 80031fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003200:	2307      	movs	r3, #7
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	4619      	mov	r1, r3
 800320a:	4809      	ldr	r0, [pc, #36]	; (8003230 <HAL_UART_MspInit+0x9c>)
 800320c:	f001 fa36 	bl	800467c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003210:	2200      	movs	r2, #0
 8003212:	2100      	movs	r1, #0
 8003214:	2025      	movs	r0, #37	; 0x25
 8003216:	f000 fdf8 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800321a:	2025      	movs	r0, #37	; 0x25
 800321c:	f000 fe11 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003220:	bf00      	nop
 8003222:	3728      	adds	r7, #40	; 0x28
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40011000 	.word	0x40011000
 800322c:	40023800 	.word	0x40023800
 8003230:	40020000 	.word	0x40020000

08003234 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	4413      	add	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	b2da      	uxtb	r2, r3
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	b2db      	uxtb	r3, r3
 8003256:	4413      	add	r3, r2
 8003258:	b2db      	uxtb	r3, r3
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <DEC2BCD+0x44>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	08db      	lsrs	r3, r3, #3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	b258      	sxtb	r0, r3
 8003282:	79fa      	ldrb	r2, [r7, #7]
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <DEC2BCD+0x44>)
 8003286:	fba3 1302 	umull	r1, r3, r3, r2
 800328a:	08d9      	lsrs	r1, r3, #3
 800328c:	460b      	mov	r3, r1
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	b25b      	sxtb	r3, r3
 800329a:	4303      	orrs	r3, r0
 800329c:	b25b      	sxtb	r3, r3
 800329e:	b2db      	uxtb	r3, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	cccccccd 	.word	0xcccccccd

080032b0 <Reset_Handler>:
 80032b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032e8 <LoopFillZerobss+0x12>
 80032b4:	480d      	ldr	r0, [pc, #52]	; (80032ec <LoopFillZerobss+0x16>)
 80032b6:	490e      	ldr	r1, [pc, #56]	; (80032f0 <LoopFillZerobss+0x1a>)
 80032b8:	4a0e      	ldr	r2, [pc, #56]	; (80032f4 <LoopFillZerobss+0x1e>)
 80032ba:	2300      	movs	r3, #0
 80032bc:	e002      	b.n	80032c4 <LoopCopyDataInit>

080032be <CopyDataInit>:
 80032be:	58d4      	ldr	r4, [r2, r3]
 80032c0:	50c4      	str	r4, [r0, r3]
 80032c2:	3304      	adds	r3, #4

080032c4 <LoopCopyDataInit>:
 80032c4:	18c4      	adds	r4, r0, r3
 80032c6:	428c      	cmp	r4, r1
 80032c8:	d3f9      	bcc.n	80032be <CopyDataInit>
 80032ca:	4a0b      	ldr	r2, [pc, #44]	; (80032f8 <LoopFillZerobss+0x22>)
 80032cc:	4c0b      	ldr	r4, [pc, #44]	; (80032fc <LoopFillZerobss+0x26>)
 80032ce:	2300      	movs	r3, #0
 80032d0:	e001      	b.n	80032d6 <LoopFillZerobss>

080032d2 <FillZerobss>:
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	3204      	adds	r2, #4

080032d6 <LoopFillZerobss>:
 80032d6:	42a2      	cmp	r2, r4
 80032d8:	d3fb      	bcc.n	80032d2 <FillZerobss>
 80032da:	f7ff fd77 	bl	8002dcc <SystemInit>
 80032de:	f005 fe97 	bl	8009010 <__libc_init_array>
 80032e2:	f7ff f865 	bl	80023b0 <main>
 80032e6:	4770      	bx	lr
 80032e8:	20020000 	.word	0x20020000
 80032ec:	20000000 	.word	0x20000000
 80032f0:	20000080 	.word	0x20000080
 80032f4:	0800c93c 	.word	0x0800c93c
 80032f8:	20000080 	.word	0x20000080
 80032fc:	2000042c 	.word	0x2000042c

08003300 <ADC_IRQHandler>:
 8003300:	e7fe      	b.n	8003300 <ADC_IRQHandler>
	...

08003304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <HAL_Init+0x40>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <HAL_Init+0x40>)
 800330e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_Init+0x40>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <HAL_Init+0x40>)
 800331a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800331e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_Init+0x40>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a07      	ldr	r2, [pc, #28]	; (8003344 <HAL_Init+0x40>)
 8003326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800332c:	2003      	movs	r0, #3
 800332e:	f000 fd61 	bl	8003df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003332:	200f      	movs	r0, #15
 8003334:	f000 f808 	bl	8003348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003338:	f7ff fca2 	bl	8002c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023c00 	.word	0x40023c00

08003348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_InitTick+0x54>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_InitTick+0x58>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	4619      	mov	r1, r3
 800335a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800335e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fd79 	bl	8003e5e <HAL_SYSTICK_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e00e      	b.n	8003394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b0f      	cmp	r3, #15
 800337a:	d80a      	bhi.n	8003392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800337c:	2200      	movs	r2, #0
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f000 fd41 	bl	8003e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003388:	4a06      	ldr	r2, [pc, #24]	; (80033a4 <HAL_InitTick+0x5c>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000010 	.word	0x20000010
 80033a0:	20000018 	.word	0x20000018
 80033a4:	20000014 	.word	0x20000014

080033a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_IncTick+0x20>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_IncTick+0x24>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4413      	add	r3, r2
 80033b8:	4a04      	ldr	r2, [pc, #16]	; (80033cc <HAL_IncTick+0x24>)
 80033ba:	6013      	str	r3, [r2, #0]
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000018 	.word	0x20000018
 80033cc:	20000418 	.word	0x20000418

080033d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return uwTick;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HAL_GetTick+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000418 	.word	0x20000418

080033e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033f0:	f7ff ffee 	bl	80033d0 <HAL_GetTick>
 80033f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d005      	beq.n	800340e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <HAL_Delay+0x44>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800340e:	bf00      	nop
 8003410:	f7ff ffde 	bl	80033d0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	429a      	cmp	r2, r3
 800341e:	d8f7      	bhi.n	8003410 <HAL_Delay+0x28>
  {
  }
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000018 	.word	0x20000018

08003430 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e033      	b.n	80034ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd fd32 	bl	8000eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d118      	bne.n	80034a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003476:	f023 0302 	bic.w	r3, r3, #2
 800347a:	f043 0202 	orr.w	r2, r3, #2
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fa68 	bl	8003958 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
 800349e:	e001      	b.n	80034a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_Start_DMA+0x1e>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e0e9      	b.n	80036aa <HAL_ADC_Start_DMA+0x1f2>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d018      	beq.n	800351e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034fc:	4b6d      	ldr	r3, [pc, #436]	; (80036b4 <HAL_ADC_Start_DMA+0x1fc>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a6d      	ldr	r2, [pc, #436]	; (80036b8 <HAL_ADC_Start_DMA+0x200>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0c9a      	lsrs	r2, r3, #18
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003510:	e002      	b.n	8003518 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	3b01      	subs	r3, #1
 8003516:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f9      	bne.n	8003512 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352c:	d107      	bne.n	800353e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800353c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	f040 80a1 	bne.w	8003690 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003578:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358c:	d106      	bne.n	800359c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f023 0206 	bic.w	r2, r3, #6
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
 800359a:	e002      	b.n	80035a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035aa:	4b44      	ldr	r3, [pc, #272]	; (80036bc <HAL_ADC_Start_DMA+0x204>)
 80035ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	4a43      	ldr	r2, [pc, #268]	; (80036c0 <HAL_ADC_Start_DMA+0x208>)
 80035b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	4a42      	ldr	r2, [pc, #264]	; (80036c4 <HAL_ADC_Start_DMA+0x20c>)
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	4a41      	ldr	r2, [pc, #260]	; (80036c8 <HAL_ADC_Start_DMA+0x210>)
 80035c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	334c      	adds	r3, #76	; 0x4c
 80035fa:	4619      	mov	r1, r3
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f000 fce8 	bl	8003fd4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2b00      	cmp	r3, #0
 800360e:	d12a      	bne.n	8003666 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2d      	ldr	r2, [pc, #180]	; (80036cc <HAL_ADC_Start_DMA+0x214>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d015      	beq.n	8003646 <HAL_ADC_Start_DMA+0x18e>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2c      	ldr	r2, [pc, #176]	; (80036d0 <HAL_ADC_Start_DMA+0x218>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d105      	bne.n	8003630 <HAL_ADC_Start_DMA+0x178>
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <HAL_ADC_Start_DMA+0x204>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <HAL_ADC_Start_DMA+0x21c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d136      	bne.n	80036a8 <HAL_ADC_Start_DMA+0x1f0>
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_ADC_Start_DMA+0x204>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	d130      	bne.n	80036a8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d129      	bne.n	80036a8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	e020      	b.n	80036a8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a18      	ldr	r2, [pc, #96]	; (80036cc <HAL_ADC_Start_DMA+0x214>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d11b      	bne.n	80036a8 <HAL_ADC_Start_DMA+0x1f0>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d114      	bne.n	80036a8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800368c:	609a      	str	r2, [r3, #8]
 800368e:	e00b      	b.n	80036a8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f043 0210 	orr.w	r2, r3, #16
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	f043 0201 	orr.w	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000010 	.word	0x20000010
 80036b8:	431bde83 	.word	0x431bde83
 80036bc:	40012300 	.word	0x40012300
 80036c0:	08003b51 	.word	0x08003b51
 80036c4:	08003c0b 	.word	0x08003c0b
 80036c8:	08003c27 	.word	0x08003c27
 80036cc:	40012000 	.word	0x40012000
 80036d0:	40012100 	.word	0x40012100
 80036d4:	40012200 	.word	0x40012200

080036d8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x1c>
 800372c:	2302      	movs	r3, #2
 800372e:	e105      	b.n	800393c <HAL_ADC_ConfigChannel+0x228>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b09      	cmp	r3, #9
 800373e:	d925      	bls.n	800378c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68d9      	ldr	r1, [r3, #12]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	3b1e      	subs	r3, #30
 8003756:	2207      	movs	r2, #7
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43da      	mvns	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	400a      	ands	r2, r1
 8003764:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68d9      	ldr	r1, [r3, #12]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	4618      	mov	r0, r3
 8003778:	4603      	mov	r3, r0
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4403      	add	r3, r0
 800377e:	3b1e      	subs	r3, #30
 8003780:	409a      	lsls	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	e022      	b.n	80037d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6919      	ldr	r1, [r3, #16]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	2207      	movs	r2, #7
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43da      	mvns	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	400a      	ands	r2, r1
 80037ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6919      	ldr	r1, [r3, #16]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	4618      	mov	r0, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4403      	add	r3, r0
 80037c8:	409a      	lsls	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d824      	bhi.n	8003824 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	3b05      	subs	r3, #5
 80037ec:	221f      	movs	r2, #31
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	400a      	ands	r2, r1
 80037fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	b29b      	uxth	r3, r3
 8003808:	4618      	mov	r0, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	3b05      	subs	r3, #5
 8003816:	fa00 f203 	lsl.w	r2, r0, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	635a      	str	r2, [r3, #52]	; 0x34
 8003822:	e04c      	b.n	80038be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	d824      	bhi.n	8003876 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	3b23      	subs	r3, #35	; 0x23
 800383e:	221f      	movs	r2, #31
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43da      	mvns	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	400a      	ands	r2, r1
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	4618      	mov	r0, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	3b23      	subs	r3, #35	; 0x23
 8003868:	fa00 f203 	lsl.w	r2, r0, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
 8003874:	e023      	b.n	80038be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	3b41      	subs	r3, #65	; 0x41
 8003888:	221f      	movs	r2, #31
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	400a      	ands	r2, r1
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	4618      	mov	r0, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	3b41      	subs	r3, #65	; 0x41
 80038b2:	fa00 f203 	lsl.w	r2, r0, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038be:	4b22      	ldr	r3, [pc, #136]	; (8003948 <HAL_ADC_ConfigChannel+0x234>)
 80038c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a21      	ldr	r2, [pc, #132]	; (800394c <HAL_ADC_ConfigChannel+0x238>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d109      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x1cc>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b12      	cmp	r3, #18
 80038d2:	d105      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <HAL_ADC_ConfigChannel+0x238>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d123      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x21e>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d003      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x1e6>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b11      	cmp	r3, #17
 80038f8:	d11b      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b10      	cmp	r3, #16
 800390c:	d111      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <HAL_ADC_ConfigChannel+0x23c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a10      	ldr	r2, [pc, #64]	; (8003954 <HAL_ADC_ConfigChannel+0x240>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	0c9a      	lsrs	r2, r3, #18
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003924:	e002      	b.n	800392c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	3b01      	subs	r3, #1
 800392a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f9      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	40012300 	.word	0x40012300
 800394c:	40012000 	.word	0x40012000
 8003950:	20000010 	.word	0x20000010
 8003954:	431bde83 	.word	0x431bde83

08003958 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003960:	4b79      	ldr	r3, [pc, #484]	; (8003b48 <ADC_Init+0x1f0>)
 8003962:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	431a      	orrs	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800398c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	021a      	lsls	r2, r3, #8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6899      	ldr	r1, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	4a58      	ldr	r2, [pc, #352]	; (8003b4c <ADC_Init+0x1f4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d022      	beq.n	8003a36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6899      	ldr	r1, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6899      	ldr	r1, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	e00f      	b.n	8003a56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0202 	bic.w	r2, r2, #2
 8003a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6899      	ldr	r1, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	7e1b      	ldrb	r3, [r3, #24]
 8003a70:	005a      	lsls	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003aa2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	035a      	lsls	r2, r3, #13
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	e007      	b.n	8003acc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	051a      	lsls	r2, r3, #20
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b0e:	025a      	lsls	r2, r3, #9
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6899      	ldr	r1, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	029a      	lsls	r2, r3, #10
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	40012300 	.word	0x40012300
 8003b4c:	0f000001 	.word	0x0f000001

08003b50 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d13c      	bne.n	8003be4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d12b      	bne.n	8003bdc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d127      	bne.n	8003bdc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d006      	beq.n	8003ba8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d119      	bne.n	8003bdc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0220 	bic.w	r2, r2, #32
 8003bb6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f043 0201 	orr.w	r2, r3, #1
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7ff fd7b 	bl	80036d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003be2:	e00e      	b.n	8003c02 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff fd85 	bl	8003700 <HAL_ADC_ErrorCallback>
}
 8003bf6:	e004      	b.n	8003c02 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff fd67 	bl	80036ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2240      	movs	r2, #64	; 0x40
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f043 0204 	orr.w	r2, r3, #4
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff fd5a 	bl	8003700 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <__NVIC_SetPriorityGrouping+0x44>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c70:	4013      	ands	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c86:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <__NVIC_SetPriorityGrouping+0x44>)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	60d3      	str	r3, [r2, #12]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	f003 0307 	and.w	r3, r3, #7
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	db0b      	blt.n	8003ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	f003 021f 	and.w	r2, r3, #31
 8003cd0:	4907      	ldr	r1, [pc, #28]	; (8003cf0 <__NVIC_EnableIRQ+0x38>)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	2001      	movs	r0, #1
 8003cda:	fa00 f202 	lsl.w	r2, r0, r2
 8003cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000e100 	.word	0xe000e100

08003cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	6039      	str	r1, [r7, #0]
 8003cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	db0a      	blt.n	8003d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	490c      	ldr	r1, [pc, #48]	; (8003d40 <__NVIC_SetPriority+0x4c>)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	0112      	lsls	r2, r2, #4
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	440b      	add	r3, r1
 8003d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d1c:	e00a      	b.n	8003d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4908      	ldr	r1, [pc, #32]	; (8003d44 <__NVIC_SetPriority+0x50>)
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	3b04      	subs	r3, #4
 8003d2c:	0112      	lsls	r2, r2, #4
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	440b      	add	r3, r1
 8003d32:	761a      	strb	r2, [r3, #24]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000e100 	.word	0xe000e100
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f1c3 0307 	rsb	r3, r3, #7
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	bf28      	it	cs
 8003d66:	2304      	movcs	r3, #4
 8003d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d902      	bls.n	8003d78 <NVIC_EncodePriority+0x30>
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3b03      	subs	r3, #3
 8003d76:	e000      	b.n	8003d7a <NVIC_EncodePriority+0x32>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d90:	f04f 31ff 	mov.w	r1, #4294967295
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	43d9      	mvns	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da0:	4313      	orrs	r3, r2
         );
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc0:	d301      	bcc.n	8003dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e00f      	b.n	8003de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <SysTick_Config+0x40>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dce:	210f      	movs	r1, #15
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	f7ff ff8e 	bl	8003cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <SysTick_Config+0x40>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dde:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <SysTick_Config+0x40>)
 8003de0:	2207      	movs	r2, #7
 8003de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	e000e010 	.word	0xe000e010

08003df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff29 	bl	8003c54 <__NVIC_SetPriorityGrouping>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e1c:	f7ff ff3e 	bl	8003c9c <__NVIC_GetPriorityGrouping>
 8003e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	6978      	ldr	r0, [r7, #20]
 8003e28:	f7ff ff8e 	bl	8003d48 <NVIC_EncodePriority>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff5d 	bl	8003cf4 <__NVIC_SetPriority>
}
 8003e3a:	bf00      	nop
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff31 	bl	8003cb8 <__NVIC_EnableIRQ>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ffa2 	bl	8003db0 <SysTick_Config>
 8003e6c:	4603      	mov	r3, r0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e84:	f7ff faa4 	bl	80033d0 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e099      	b.n	8003fc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eb4:	e00f      	b.n	8003ed6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eb6:	f7ff fa8b 	bl	80033d0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d908      	bls.n	8003ed6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e078      	b.n	8003fc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e8      	bne.n	8003eb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <HAL_DMA_Init+0x158>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d107      	bne.n	8003f40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0307 	bic.w	r3, r3, #7
 8003f56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d117      	bne.n	8003f9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00e      	beq.n	8003f9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fb01 	bl	8004584 <DMA_CheckFifoParam>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2240      	movs	r2, #64	; 0x40
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f96:	2301      	movs	r3, #1
 8003f98:	e016      	b.n	8003fc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fab8 	bl	8004518 <DMA_CalcBaseAndBitshift>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb0:	223f      	movs	r2, #63	; 0x3f
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	f010803f 	.word	0xf010803f

08003fd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_DMA_Start_IT+0x26>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e040      	b.n	800407c <HAL_DMA_Start_IT+0xa8>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d12f      	bne.n	800406e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fa4a 	bl	80044bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	223f      	movs	r2, #63	; 0x3f
 800402e:	409a      	lsls	r2, r3
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0216 	orr.w	r2, r2, #22
 8004042:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0208 	orr.w	r2, r2, #8
 800405a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e005      	b.n	800407a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004076:	2302      	movs	r3, #2
 8004078:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800407a:	7dfb      	ldrb	r3, [r7, #23]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004092:	f7ff f99d 	bl	80033d0 <HAL_GetTick>
 8004096:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d008      	beq.n	80040b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e052      	b.n	800415c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0216 	bic.w	r2, r2, #22
 80040c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_DMA_Abort+0x62>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0208 	bic.w	r2, r2, #8
 80040f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004106:	e013      	b.n	8004130 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004108:	f7ff f962 	bl	80033d0 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b05      	cmp	r3, #5
 8004114:	d90c      	bls.n	8004130 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2203      	movs	r2, #3
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e015      	b.n	800415c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e4      	bne.n	8004108 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004142:	223f      	movs	r2, #63	; 0x3f
 8004144:	409a      	lsls	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d004      	beq.n	8004182 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2280      	movs	r2, #128	; 0x80
 800417c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e00c      	b.n	800419c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2205      	movs	r2, #5
 8004186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041b4:	4b92      	ldr	r3, [pc, #584]	; (8004400 <HAL_DMA_IRQHandler+0x258>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a92      	ldr	r2, [pc, #584]	; (8004404 <HAL_DMA_IRQHandler+0x25c>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	0a9b      	lsrs	r3, r3, #10
 80041c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d2:	2208      	movs	r2, #8
 80041d4:	409a      	lsls	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4013      	ands	r3, r2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01a      	beq.n	8004214 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d013      	beq.n	8004214 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0204 	bic.w	r2, r2, #4
 80041fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	2208      	movs	r2, #8
 8004202:	409a      	lsls	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f043 0201 	orr.w	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	2201      	movs	r2, #1
 800421a:	409a      	lsls	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d012      	beq.n	800424a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	2201      	movs	r2, #1
 8004238:	409a      	lsls	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	f043 0202 	orr.w	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	2204      	movs	r2, #4
 8004250:	409a      	lsls	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d012      	beq.n	8004280 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	2204      	movs	r2, #4
 800426e:	409a      	lsls	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	f043 0204 	orr.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004284:	2210      	movs	r2, #16
 8004286:	409a      	lsls	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d043      	beq.n	8004318 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d03c      	beq.n	8004318 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a2:	2210      	movs	r2, #16
 80042a4:	409a      	lsls	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d018      	beq.n	80042ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d024      	beq.n	8004318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	4798      	blx	r3
 80042d6:	e01f      	b.n	8004318 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01b      	beq.n	8004318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	4798      	blx	r3
 80042e8:	e016      	b.n	8004318 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d107      	bne.n	8004308 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0208 	bic.w	r2, r2, #8
 8004306:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431c:	2220      	movs	r2, #32
 800431e:	409a      	lsls	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 808e 	beq.w	8004446 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8086 	beq.w	8004446 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433e:	2220      	movs	r2, #32
 8004340:	409a      	lsls	r2, r3
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b05      	cmp	r3, #5
 8004350:	d136      	bne.n	80043c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0216 	bic.w	r2, r2, #22
 8004360:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004370:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <HAL_DMA_IRQHandler+0x1da>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0208 	bic.w	r2, r2, #8
 8004390:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	223f      	movs	r2, #63	; 0x3f
 8004398:	409a      	lsls	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d07d      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
        }
        return;
 80043be:	e078      	b.n	80044b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01c      	beq.n	8004408 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d108      	bne.n	80043ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d030      	beq.n	8004446 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
 80043ec:	e02b      	b.n	8004446 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d027      	beq.n	8004446 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
 80043fe:	e022      	b.n	8004446 <HAL_DMA_IRQHandler+0x29e>
 8004400:	20000010 	.word	0x20000010
 8004404:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0210 	bic.w	r2, r2, #16
 8004424:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	2b00      	cmp	r3, #0
 800444c:	d032      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d022      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2205      	movs	r2, #5
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	3301      	adds	r3, #1
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	429a      	cmp	r2, r3
 800447c:	d307      	bcc.n	800448e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f2      	bne.n	8004472 <HAL_DMA_IRQHandler+0x2ca>
 800448c:	e000      	b.n	8004490 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800448e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
 80044b0:	e000      	b.n	80044b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80044b2:	bf00      	nop
    }
  }
}
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop

080044bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b40      	cmp	r3, #64	; 0x40
 80044e8:	d108      	bne.n	80044fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044fa:	e007      	b.n	800450c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	3b10      	subs	r3, #16
 8004528:	4a14      	ldr	r2, [pc, #80]	; (800457c <DMA_CalcBaseAndBitshift+0x64>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004532:	4a13      	ldr	r2, [pc, #76]	; (8004580 <DMA_CalcBaseAndBitshift+0x68>)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b03      	cmp	r3, #3
 8004544:	d909      	bls.n	800455a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	1d1a      	adds	r2, r3, #4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	659a      	str	r2, [r3, #88]	; 0x58
 8004558:	e007      	b.n	800456a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	aaaaaaab 	.word	0xaaaaaaab
 8004580:	0800c8f0 	.word	0x0800c8f0

08004584 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d11f      	bne.n	80045de <DMA_CheckFifoParam+0x5a>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d856      	bhi.n	8004652 <DMA_CheckFifoParam+0xce>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <DMA_CheckFifoParam+0x28>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045bd 	.word	0x080045bd
 80045b0:	080045cf 	.word	0x080045cf
 80045b4:	080045bd 	.word	0x080045bd
 80045b8:	08004653 	.word	0x08004653
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d046      	beq.n	8004656 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045cc:	e043      	b.n	8004656 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045d6:	d140      	bne.n	800465a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045dc:	e03d      	b.n	800465a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e6:	d121      	bne.n	800462c <DMA_CheckFifoParam+0xa8>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d837      	bhi.n	800465e <DMA_CheckFifoParam+0xda>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <DMA_CheckFifoParam+0x70>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004605 	.word	0x08004605
 80045f8:	0800460b 	.word	0x0800460b
 80045fc:	08004605 	.word	0x08004605
 8004600:	0800461d 	.word	0x0800461d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      break;
 8004608:	e030      	b.n	800466c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d025      	beq.n	8004662 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461a:	e022      	b.n	8004662 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004624:	d11f      	bne.n	8004666 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800462a:	e01c      	b.n	8004666 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d903      	bls.n	800463a <DMA_CheckFifoParam+0xb6>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b03      	cmp	r3, #3
 8004636:	d003      	beq.n	8004640 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004638:	e018      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
      break;
 800463e:	e015      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00e      	beq.n	800466a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
      break;
 8004650:	e00b      	b.n	800466a <DMA_CheckFifoParam+0xe6>
      break;
 8004652:	bf00      	nop
 8004654:	e00a      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
 8004658:	e008      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
 800465c:	e006      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;
 800465e:	bf00      	nop
 8004660:	e004      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;
 8004662:	bf00      	nop
 8004664:	e002      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;   
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <DMA_CheckFifoParam+0xe8>
      break;
 800466a:	bf00      	nop
    }
  } 
  
  return status; 
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop

0800467c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	; 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	e16b      	b.n	8004970 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004698:	2201      	movs	r2, #1
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4013      	ands	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	f040 815a 	bne.w	800496a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d005      	beq.n	80046ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d130      	bne.n	8004730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	2203      	movs	r2, #3
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004704:	2201      	movs	r2, #1
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 0201 	and.w	r2, r3, #1
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	2b03      	cmp	r3, #3
 800473a:	d017      	beq.n	800476c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	2203      	movs	r2, #3
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d123      	bne.n	80047c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	08da      	lsrs	r2, r3, #3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3208      	adds	r2, #8
 8004780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	220f      	movs	r2, #15
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	08da      	lsrs	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3208      	adds	r2, #8
 80047ba:	69b9      	ldr	r1, [r7, #24]
 80047bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2203      	movs	r2, #3
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 0203 	and.w	r2, r3, #3
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80b4 	beq.w	800496a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	4b60      	ldr	r3, [pc, #384]	; (8004988 <HAL_GPIO_Init+0x30c>)
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	4a5f      	ldr	r2, [pc, #380]	; (8004988 <HAL_GPIO_Init+0x30c>)
 800480c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004810:	6453      	str	r3, [r2, #68]	; 0x44
 8004812:	4b5d      	ldr	r3, [pc, #372]	; (8004988 <HAL_GPIO_Init+0x30c>)
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800481e:	4a5b      	ldr	r2, [pc, #364]	; (800498c <HAL_GPIO_Init+0x310>)
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	089b      	lsrs	r3, r3, #2
 8004824:	3302      	adds	r3, #2
 8004826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	220f      	movs	r2, #15
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a52      	ldr	r2, [pc, #328]	; (8004990 <HAL_GPIO_Init+0x314>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d02b      	beq.n	80048a2 <HAL_GPIO_Init+0x226>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a51      	ldr	r2, [pc, #324]	; (8004994 <HAL_GPIO_Init+0x318>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d025      	beq.n	800489e <HAL_GPIO_Init+0x222>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a50      	ldr	r2, [pc, #320]	; (8004998 <HAL_GPIO_Init+0x31c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01f      	beq.n	800489a <HAL_GPIO_Init+0x21e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a4f      	ldr	r2, [pc, #316]	; (800499c <HAL_GPIO_Init+0x320>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d019      	beq.n	8004896 <HAL_GPIO_Init+0x21a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a4e      	ldr	r2, [pc, #312]	; (80049a0 <HAL_GPIO_Init+0x324>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_GPIO_Init+0x216>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4d      	ldr	r2, [pc, #308]	; (80049a4 <HAL_GPIO_Init+0x328>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00d      	beq.n	800488e <HAL_GPIO_Init+0x212>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4c      	ldr	r2, [pc, #304]	; (80049a8 <HAL_GPIO_Init+0x32c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <HAL_GPIO_Init+0x20e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4b      	ldr	r2, [pc, #300]	; (80049ac <HAL_GPIO_Init+0x330>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d101      	bne.n	8004886 <HAL_GPIO_Init+0x20a>
 8004882:	2307      	movs	r3, #7
 8004884:	e00e      	b.n	80048a4 <HAL_GPIO_Init+0x228>
 8004886:	2308      	movs	r3, #8
 8004888:	e00c      	b.n	80048a4 <HAL_GPIO_Init+0x228>
 800488a:	2306      	movs	r3, #6
 800488c:	e00a      	b.n	80048a4 <HAL_GPIO_Init+0x228>
 800488e:	2305      	movs	r3, #5
 8004890:	e008      	b.n	80048a4 <HAL_GPIO_Init+0x228>
 8004892:	2304      	movs	r3, #4
 8004894:	e006      	b.n	80048a4 <HAL_GPIO_Init+0x228>
 8004896:	2303      	movs	r3, #3
 8004898:	e004      	b.n	80048a4 <HAL_GPIO_Init+0x228>
 800489a:	2302      	movs	r3, #2
 800489c:	e002      	b.n	80048a4 <HAL_GPIO_Init+0x228>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_GPIO_Init+0x228>
 80048a2:	2300      	movs	r3, #0
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	f002 0203 	and.w	r2, r2, #3
 80048aa:	0092      	lsls	r2, r2, #2
 80048ac:	4093      	lsls	r3, r2
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b4:	4935      	ldr	r1, [pc, #212]	; (800498c <HAL_GPIO_Init+0x310>)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	3302      	adds	r3, #2
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048c2:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_GPIO_Init+0x334>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048e6:	4a32      	ldr	r2, [pc, #200]	; (80049b0 <HAL_GPIO_Init+0x334>)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048ec:	4b30      	ldr	r3, [pc, #192]	; (80049b0 <HAL_GPIO_Init+0x334>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	43db      	mvns	r3, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4013      	ands	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004910:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <HAL_GPIO_Init+0x334>)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004916:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <HAL_GPIO_Init+0x334>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800493a:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <HAL_GPIO_Init+0x334>)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <HAL_GPIO_Init+0x334>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	43db      	mvns	r3, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004964:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <HAL_GPIO_Init+0x334>)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3301      	adds	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b0f      	cmp	r3, #15
 8004974:	f67f ae90 	bls.w	8004698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	3724      	adds	r7, #36	; 0x24
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	40013800 	.word	0x40013800
 8004990:	40020000 	.word	0x40020000
 8004994:	40020400 	.word	0x40020400
 8004998:	40020800 	.word	0x40020800
 800499c:	40020c00 	.word	0x40020c00
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40021400 	.word	0x40021400
 80049a8:	40021800 	.word	0x40021800
 80049ac:	40021c00 	.word	0x40021c00
 80049b0:	40013c00 	.word	0x40013c00

080049b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	807b      	strh	r3, [r7, #2]
 80049c0:	4613      	mov	r3, r2
 80049c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049c4:	787b      	ldrb	r3, [r7, #1]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049d0:	e003      	b.n	80049da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049d2:	887b      	ldrh	r3, [r7, #2]
 80049d4:	041a      	lsls	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	619a      	str	r2, [r3, #24]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049f8:	887a      	ldrh	r2, [r7, #2]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4013      	ands	r3, r2
 80049fe:	041a      	lsls	r2, r3, #16
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	43d9      	mvns	r1, r3
 8004a04:	887b      	ldrh	r3, [r7, #2]
 8004a06:	400b      	ands	r3, r1
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	619a      	str	r2, [r3, #24]
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e12b      	b.n	8004c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fc fe40 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	; 0x24
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a80:	f001 fbd8 	bl	8006234 <HAL_RCC_GetPCLK1Freq>
 8004a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4a81      	ldr	r2, [pc, #516]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d807      	bhi.n	8004aa0 <HAL_I2C_Init+0x84>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a80      	ldr	r2, [pc, #512]	; (8004c94 <HAL_I2C_Init+0x278>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	bf94      	ite	ls
 8004a98:	2301      	movls	r3, #1
 8004a9a:	2300      	movhi	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	e006      	b.n	8004aae <HAL_I2C_Init+0x92>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a7d      	ldr	r2, [pc, #500]	; (8004c98 <HAL_I2C_Init+0x27c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bf94      	ite	ls
 8004aa8:	2301      	movls	r3, #1
 8004aaa:	2300      	movhi	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0e7      	b.n	8004c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a78      	ldr	r2, [pc, #480]	; (8004c9c <HAL_I2C_Init+0x280>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0c9b      	lsrs	r3, r3, #18
 8004ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4a6a      	ldr	r2, [pc, #424]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d802      	bhi.n	8004af0 <HAL_I2C_Init+0xd4>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	3301      	adds	r3, #1
 8004aee:	e009      	b.n	8004b04 <HAL_I2C_Init+0xe8>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	4a69      	ldr	r2, [pc, #420]	; (8004ca0 <HAL_I2C_Init+0x284>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	099b      	lsrs	r3, r3, #6
 8004b02:	3301      	adds	r3, #1
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	495c      	ldr	r1, [pc, #368]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004b20:	428b      	cmp	r3, r1
 8004b22:	d819      	bhi.n	8004b58 <HAL_I2C_Init+0x13c>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	1e59      	subs	r1, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b32:	1c59      	adds	r1, r3, #1
 8004b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b38:	400b      	ands	r3, r1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_I2C_Init+0x138>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1e59      	subs	r1, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b52:	e051      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004b54:	2304      	movs	r3, #4
 8004b56:	e04f      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <HAL_I2C_Init+0x168>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1e58      	subs	r0, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6859      	ldr	r1, [r3, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	440b      	add	r3, r1
 8004b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e012      	b.n	8004baa <HAL_I2C_Init+0x18e>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1e58      	subs	r0, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	0099      	lsls	r1, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Init+0x196>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e022      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_I2C_Init+0x1bc>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1e58      	subs	r0, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	440b      	add	r3, r1
 8004bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	e00f      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1e58      	subs	r0, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	0099      	lsls	r1, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	6809      	ldr	r1, [r1, #0]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6911      	ldr	r1, [r2, #16]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	68d2      	ldr	r2, [r2, #12]
 8004c32:	4311      	orrs	r1, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	000186a0 	.word	0x000186a0
 8004c94:	001e847f 	.word	0x001e847f
 8004c98:	003d08ff 	.word	0x003d08ff
 8004c9c:	431bde83 	.word	0x431bde83
 8004ca0:	10624dd3 	.word	0x10624dd3

08004ca4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	4608      	mov	r0, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	817b      	strh	r3, [r7, #10]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	813b      	strh	r3, [r7, #8]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cbe:	f7fe fb87 	bl	80033d0 <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	f040 80d9 	bne.w	8004e84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	2319      	movs	r3, #25
 8004cd8:	2201      	movs	r2, #1
 8004cda:	496d      	ldr	r1, [pc, #436]	; (8004e90 <HAL_I2C_Mem_Write+0x1ec>)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fc7f 	bl	80055e0 <I2C_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e0cc      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_I2C_Mem_Write+0x56>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e0c5      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d007      	beq.n	8004d20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2221      	movs	r2, #33	; 0x21
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2240      	movs	r2, #64	; 0x40
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a3a      	ldr	r2, [r7, #32]
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a4d      	ldr	r2, [pc, #308]	; (8004e94 <HAL_I2C_Mem_Write+0x1f0>)
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d62:	88f8      	ldrh	r0, [r7, #6]
 8004d64:	893a      	ldrh	r2, [r7, #8]
 8004d66:	8979      	ldrh	r1, [r7, #10]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4603      	mov	r3, r0
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fab6 	bl	80052e4 <I2C_RequestMemoryWrite>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d052      	beq.n	8004e24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e081      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fd00 	bl	800578c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00d      	beq.n	8004dae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d107      	bne.n	8004daa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e06b      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	781a      	ldrb	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d11b      	bne.n	8004e24 <HAL_I2C_Mem_Write+0x180>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d017      	beq.n	8004e24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1aa      	bne.n	8004d82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fcec 	bl	800580e <I2C_WaitOnBTFFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d107      	bne.n	8004e54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e016      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	00100002 	.word	0x00100002
 8004e94:	ffff0000 	.word	0xffff0000

08004e98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08c      	sub	sp, #48	; 0x30
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	817b      	strh	r3, [r7, #10]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	813b      	strh	r3, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eb2:	f7fe fa8d 	bl	80033d0 <HAL_GetTick>
 8004eb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	f040 8208 	bne.w	80052d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	2319      	movs	r3, #25
 8004ecc:	2201      	movs	r2, #1
 8004ece:	497b      	ldr	r1, [pc, #492]	; (80050bc <HAL_I2C_Mem_Read+0x224>)
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fb85 	bl	80055e0 <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
 8004ede:	e1fb      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_I2C_Mem_Read+0x56>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e1f4      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d007      	beq.n	8004f14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2222      	movs	r2, #34	; 0x22
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2240      	movs	r2, #64	; 0x40
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4a5b      	ldr	r2, [pc, #364]	; (80050c0 <HAL_I2C_Mem_Read+0x228>)
 8004f54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f56:	88f8      	ldrh	r0, [r7, #6]
 8004f58:	893a      	ldrh	r2, [r7, #8]
 8004f5a:	8979      	ldrh	r1, [r7, #10]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	4603      	mov	r3, r0
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fa52 	bl	8005410 <I2C_RequestMemoryRead>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e1b0      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d113      	bne.n	8004fa6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	e184      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d11b      	bne.n	8004fe6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e164      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d11b      	bne.n	8005026 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500e:	2300      	movs	r3, #0
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	e144      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800503c:	e138      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005042:	2b03      	cmp	r3, #3
 8005044:	f200 80f1 	bhi.w	800522a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504c:	2b01      	cmp	r3, #1
 800504e:	d123      	bne.n	8005098 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005052:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fc1b 	bl	8005890 <I2C_WaitOnRXNEFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e139      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005096:	e10b      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	2b02      	cmp	r3, #2
 800509e:	d14e      	bne.n	800513e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	2200      	movs	r2, #0
 80050a8:	4906      	ldr	r1, [pc, #24]	; (80050c4 <HAL_I2C_Mem_Read+0x22c>)
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fa98 	bl	80055e0 <I2C_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e10e      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
 80050ba:	bf00      	nop
 80050bc:	00100002 	.word	0x00100002
 80050c0:	ffff0000 	.word	0xffff0000
 80050c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800513c:	e0b8      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	2200      	movs	r2, #0
 8005146:	4966      	ldr	r1, [pc, #408]	; (80052e0 <HAL_I2C_Mem_Read+0x448>)
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fa49 	bl	80055e0 <I2C_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0bf      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	2200      	movs	r2, #0
 80051a2:	494f      	ldr	r1, [pc, #316]	; (80052e0 <HAL_I2C_Mem_Read+0x448>)
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fa1b 	bl	80055e0 <I2C_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e091      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005228:	e042      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fb2e 	bl	8005890 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e04c      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b04      	cmp	r3, #4
 800527c:	d118      	bne.n	80052b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f47f aec2 	bne.w	800503e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e000      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052d6:	2302      	movs	r3, #2
  }
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3728      	adds	r7, #40	; 0x28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	00010004 	.word	0x00010004

080052e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	4608      	mov	r0, r1
 80052ee:	4611      	mov	r1, r2
 80052f0:	461a      	mov	r2, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	817b      	strh	r3, [r7, #10]
 80052f6:	460b      	mov	r3, r1
 80052f8:	813b      	strh	r3, [r7, #8]
 80052fa:	4613      	mov	r3, r2
 80052fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800530c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	2200      	movs	r2, #0
 8005316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f960 	bl	80055e0 <I2C_WaitOnFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00d      	beq.n	8005342 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005334:	d103      	bne.n	800533e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e05f      	b.n	8005402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005342:	897b      	ldrh	r3, [r7, #10]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005350:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	6a3a      	ldr	r2, [r7, #32]
 8005356:	492d      	ldr	r1, [pc, #180]	; (800540c <I2C_RequestMemoryWrite+0x128>)
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f998 	bl	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e04c      	b.n	8005402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800537e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005380:	6a39      	ldr	r1, [r7, #32]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fa02 	bl	800578c <I2C_WaitOnTXEFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00d      	beq.n	80053aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2b04      	cmp	r3, #4
 8005394:	d107      	bne.n	80053a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e02b      	b.n	8005402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d105      	bne.n	80053bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053b0:	893b      	ldrh	r3, [r7, #8]
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	611a      	str	r2, [r3, #16]
 80053ba:	e021      	b.n	8005400 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053bc:	893b      	ldrh	r3, [r7, #8]
 80053be:	0a1b      	lsrs	r3, r3, #8
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053cc:	6a39      	ldr	r1, [r7, #32]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f9dc 	bl	800578c <I2C_WaitOnTXEFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00d      	beq.n	80053f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d107      	bne.n	80053f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e005      	b.n	8005402 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053f6:	893b      	ldrh	r3, [r7, #8]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	00010002 	.word	0x00010002

08005410 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	4608      	mov	r0, r1
 800541a:	4611      	mov	r1, r2
 800541c:	461a      	mov	r2, r3
 800541e:	4603      	mov	r3, r0
 8005420:	817b      	strh	r3, [r7, #10]
 8005422:	460b      	mov	r3, r1
 8005424:	813b      	strh	r3, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005438:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	2200      	movs	r2, #0
 8005452:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f8c2 	bl	80055e0 <I2C_WaitOnFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00d      	beq.n	800547e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005470:	d103      	bne.n	800547a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005478:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e0aa      	b.n	80055d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800547e:	897b      	ldrh	r3, [r7, #10]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800548c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	4952      	ldr	r1, [pc, #328]	; (80055dc <I2C_RequestMemoryRead+0x1cc>)
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f8fa 	bl	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e097      	b.n	80055d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054bc:	6a39      	ldr	r1, [r7, #32]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 f964 	bl	800578c <I2C_WaitOnTXEFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00d      	beq.n	80054e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d107      	bne.n	80054e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e076      	b.n	80055d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d105      	bne.n	80054f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ec:	893b      	ldrh	r3, [r7, #8]
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	611a      	str	r2, [r3, #16]
 80054f6:	e021      	b.n	800553c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054f8:	893b      	ldrh	r3, [r7, #8]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005508:	6a39      	ldr	r1, [r7, #32]
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f93e 	bl	800578c <I2C_WaitOnTXEFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00d      	beq.n	8005532 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	2b04      	cmp	r3, #4
 800551c:	d107      	bne.n	800552e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e050      	b.n	80055d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005532:	893b      	ldrh	r3, [r7, #8]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800553c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553e:	6a39      	ldr	r1, [r7, #32]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f923 	bl	800578c <I2C_WaitOnTXEFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00d      	beq.n	8005568 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	2b04      	cmp	r3, #4
 8005552:	d107      	bne.n	8005564 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005562:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e035      	b.n	80055d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005576:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	2200      	movs	r2, #0
 8005580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f82b 	bl	80055e0 <I2C_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800559e:	d103      	bne.n	80055a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e013      	b.n	80055d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055ac:	897b      	ldrh	r3, [r7, #10]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	6a3a      	ldr	r2, [r7, #32]
 80055c0:	4906      	ldr	r1, [pc, #24]	; (80055dc <I2C_RequestMemoryRead+0x1cc>)
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f863 	bl	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	00010002 	.word	0x00010002

080055e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	4613      	mov	r3, r2
 80055ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f0:	e025      	b.n	800563e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d021      	beq.n	800563e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fa:	f7fd fee9 	bl	80033d0 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d302      	bcc.n	8005610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d116      	bne.n	800563e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f043 0220 	orr.w	r2, r3, #32
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e023      	b.n	8005686 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	0c1b      	lsrs	r3, r3, #16
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d10d      	bne.n	8005664 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	43da      	mvns	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4013      	ands	r3, r2
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	bf0c      	ite	eq
 800565a:	2301      	moveq	r3, #1
 800565c:	2300      	movne	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	e00c      	b.n	800567e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	43da      	mvns	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4013      	ands	r3, r2
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	429a      	cmp	r2, r3
 8005682:	d0b6      	beq.n	80055f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800569c:	e051      	b.n	8005742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ac:	d123      	bne.n	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f043 0204 	orr.w	r2, r3, #4
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e046      	b.n	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d021      	beq.n	8005742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fe:	f7fd fe67 	bl	80033d0 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d302      	bcc.n	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d116      	bne.n	8005742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e020      	b.n	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	d10c      	bne.n	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	43da      	mvns	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4013      	ands	r3, r2
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	bf14      	ite	ne
 800575e:	2301      	movne	r3, #1
 8005760:	2300      	moveq	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	e00b      	b.n	800577e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	43da      	mvns	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d18d      	bne.n	800569e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005798:	e02d      	b.n	80057f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f8ce 	bl	800593c <I2C_IsAcknowledgeFailed>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e02d      	b.n	8005806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d021      	beq.n	80057f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b2:	f7fd fe0d 	bl	80033d0 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d302      	bcc.n	80057c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d116      	bne.n	80057f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f043 0220 	orr.w	r2, r3, #32
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e007      	b.n	8005806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005800:	2b80      	cmp	r3, #128	; 0x80
 8005802:	d1ca      	bne.n	800579a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800581a:	e02d      	b.n	8005878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f88d 	bl	800593c <I2C_IsAcknowledgeFailed>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e02d      	b.n	8005888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d021      	beq.n	8005878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005834:	f7fd fdcc 	bl	80033d0 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	429a      	cmp	r2, r3
 8005842:	d302      	bcc.n	800584a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d116      	bne.n	8005878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e007      	b.n	8005888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b04      	cmp	r3, #4
 8005884:	d1ca      	bne.n	800581c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800589c:	e042      	b.n	8005924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d119      	bne.n	80058e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0210 	mvn.w	r2, #16
 80058b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e029      	b.n	8005934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e0:	f7fd fd76 	bl	80033d0 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d302      	bcc.n	80058f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d116      	bne.n	8005924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	f043 0220 	orr.w	r2, r3, #32
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e007      	b.n	8005934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b40      	cmp	r3, #64	; 0x40
 8005930:	d1b5      	bne.n	800589e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800594e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005952:	d11b      	bne.n	800598c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800595c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	f043 0204 	orr.w	r2, r3, #4
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e264      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d075      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ba:	4ba3      	ldr	r3, [pc, #652]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d00c      	beq.n	80059e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059c6:	4ba0      	ldr	r3, [pc, #640]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d112      	bne.n	80059f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059d2:	4b9d      	ldr	r3, [pc, #628]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059de:	d10b      	bne.n	80059f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e0:	4b99      	ldr	r3, [pc, #612]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d05b      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x108>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d157      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e23f      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a00:	d106      	bne.n	8005a10 <HAL_RCC_OscConfig+0x74>
 8005a02:	4b91      	ldr	r3, [pc, #580]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a90      	ldr	r2, [pc, #576]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e01d      	b.n	8005a4c <HAL_RCC_OscConfig+0xb0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a18:	d10c      	bne.n	8005a34 <HAL_RCC_OscConfig+0x98>
 8005a1a:	4b8b      	ldr	r3, [pc, #556]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a8a      	ldr	r2, [pc, #552]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b88      	ldr	r3, [pc, #544]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a87      	ldr	r2, [pc, #540]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e00b      	b.n	8005a4c <HAL_RCC_OscConfig+0xb0>
 8005a34:	4b84      	ldr	r3, [pc, #528]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a83      	ldr	r2, [pc, #524]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	4b81      	ldr	r3, [pc, #516]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a80      	ldr	r2, [pc, #512]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d013      	beq.n	8005a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a54:	f7fd fcbc 	bl	80033d0 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a5c:	f7fd fcb8 	bl	80033d0 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b64      	cmp	r3, #100	; 0x64
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e204      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a6e:	4b76      	ldr	r3, [pc, #472]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0f0      	beq.n	8005a5c <HAL_RCC_OscConfig+0xc0>
 8005a7a:	e014      	b.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7c:	f7fd fca8 	bl	80033d0 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a84:	f7fd fca4 	bl	80033d0 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b64      	cmp	r3, #100	; 0x64
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e1f0      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a96:	4b6c      	ldr	r3, [pc, #432]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0xe8>
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d063      	beq.n	8005b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ab2:	4b65      	ldr	r3, [pc, #404]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005abe:	4b62      	ldr	r3, [pc, #392]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d11c      	bne.n	8005b04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aca:	4b5f      	ldr	r3, [pc, #380]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d116      	bne.n	8005b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ad6:	4b5c      	ldr	r3, [pc, #368]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_RCC_OscConfig+0x152>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d001      	beq.n	8005aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e1c4      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aee:	4b56      	ldr	r3, [pc, #344]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4952      	ldr	r1, [pc, #328]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b02:	e03a      	b.n	8005b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d020      	beq.n	8005b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b0c:	4b4f      	ldr	r3, [pc, #316]	; (8005c4c <HAL_RCC_OscConfig+0x2b0>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b12:	f7fd fc5d 	bl	80033d0 <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b1a:	f7fd fc59 	bl	80033d0 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e1a5      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b2c:	4b46      	ldr	r3, [pc, #280]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0f0      	beq.n	8005b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b38:	4b43      	ldr	r3, [pc, #268]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4940      	ldr	r1, [pc, #256]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	600b      	str	r3, [r1, #0]
 8005b4c:	e015      	b.n	8005b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b4e:	4b3f      	ldr	r3, [pc, #252]	; (8005c4c <HAL_RCC_OscConfig+0x2b0>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7fd fc3c 	bl	80033d0 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b5c:	f7fd fc38 	bl	80033d0 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e184      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b6e:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d030      	beq.n	8005be8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d016      	beq.n	8005bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b8e:	4b30      	ldr	r3, [pc, #192]	; (8005c50 <HAL_RCC_OscConfig+0x2b4>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b94:	f7fd fc1c 	bl	80033d0 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b9c:	f7fd fc18 	bl	80033d0 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e164      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bae:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x200>
 8005bba:	e015      	b.n	8005be8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bbc:	4b24      	ldr	r3, [pc, #144]	; (8005c50 <HAL_RCC_OscConfig+0x2b4>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc2:	f7fd fc05 	bl	80033d0 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bca:	f7fd fc01 	bl	80033d0 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e14d      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f0      	bne.n	8005bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80a0 	beq.w	8005d36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bfa:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10f      	bne.n	8005c26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	4a0e      	ldr	r2, [pc, #56]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c14:	6413      	str	r3, [r2, #64]	; 0x40
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c26:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <HAL_RCC_OscConfig+0x2b8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d121      	bne.n	8005c76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <HAL_RCC_OscConfig+0x2b8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a07      	ldr	r2, [pc, #28]	; (8005c54 <HAL_RCC_OscConfig+0x2b8>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c3e:	f7fd fbc7 	bl	80033d0 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c44:	e011      	b.n	8005c6a <HAL_RCC_OscConfig+0x2ce>
 8005c46:	bf00      	nop
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	42470000 	.word	0x42470000
 8005c50:	42470e80 	.word	0x42470e80
 8005c54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c58:	f7fd fbba 	bl	80033d0 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e106      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6a:	4b85      	ldr	r3, [pc, #532]	; (8005e80 <HAL_RCC_OscConfig+0x4e4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d106      	bne.n	8005c8c <HAL_RCC_OscConfig+0x2f0>
 8005c7e:	4b81      	ldr	r3, [pc, #516]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	4a80      	ldr	r2, [pc, #512]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005c84:	f043 0301 	orr.w	r3, r3, #1
 8005c88:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8a:	e01c      	b.n	8005cc6 <HAL_RCC_OscConfig+0x32a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d10c      	bne.n	8005cae <HAL_RCC_OscConfig+0x312>
 8005c94:	4b7b      	ldr	r3, [pc, #492]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c98:	4a7a      	ldr	r2, [pc, #488]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005c9a:	f043 0304 	orr.w	r3, r3, #4
 8005c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca0:	4b78      	ldr	r3, [pc, #480]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca4:	4a77      	ldr	r2, [pc, #476]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	6713      	str	r3, [r2, #112]	; 0x70
 8005cac:	e00b      	b.n	8005cc6 <HAL_RCC_OscConfig+0x32a>
 8005cae:	4b75      	ldr	r3, [pc, #468]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb2:	4a74      	ldr	r2, [pc, #464]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cba:	4b72      	ldr	r3, [pc, #456]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbe:	4a71      	ldr	r2, [pc, #452]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005cc0:	f023 0304 	bic.w	r3, r3, #4
 8005cc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d015      	beq.n	8005cfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cce:	f7fd fb7f 	bl	80033d0 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd4:	e00a      	b.n	8005cec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cd6:	f7fd fb7b 	bl	80033d0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e0c5      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cec:	4b65      	ldr	r3, [pc, #404]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0ee      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x33a>
 8005cf8:	e014      	b.n	8005d24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfa:	f7fd fb69 	bl	80033d0 <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d00:	e00a      	b.n	8005d18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d02:	f7fd fb65 	bl	80033d0 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e0af      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d18:	4b5a      	ldr	r3, [pc, #360]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1ee      	bne.n	8005d02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d105      	bne.n	8005d36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d2a:	4b56      	ldr	r3, [pc, #344]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	4a55      	ldr	r2, [pc, #340]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 809b 	beq.w	8005e76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d40:	4b50      	ldr	r3, [pc, #320]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 030c 	and.w	r3, r3, #12
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d05c      	beq.n	8005e06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d141      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d54:	4b4c      	ldr	r3, [pc, #304]	; (8005e88 <HAL_RCC_OscConfig+0x4ec>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5a:	f7fd fb39 	bl	80033d0 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d62:	f7fd fb35 	bl	80033d0 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e081      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d74:	4b43      	ldr	r3, [pc, #268]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1f0      	bne.n	8005d62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	019b      	lsls	r3, r3, #6
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	061b      	lsls	r3, r3, #24
 8005da4:	4937      	ldr	r1, [pc, #220]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005daa:	4b37      	ldr	r3, [pc, #220]	; (8005e88 <HAL_RCC_OscConfig+0x4ec>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db0:	f7fd fb0e 	bl	80033d0 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db8:	f7fd fb0a 	bl	80033d0 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e056      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dca:	4b2e      	ldr	r3, [pc, #184]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0x41c>
 8005dd6:	e04e      	b.n	8005e76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd8:	4b2b      	ldr	r3, [pc, #172]	; (8005e88 <HAL_RCC_OscConfig+0x4ec>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dde:	f7fd faf7 	bl	80033d0 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de6:	f7fd faf3 	bl	80033d0 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e03f      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df8:	4b22      	ldr	r3, [pc, #136]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f0      	bne.n	8005de6 <HAL_RCC_OscConfig+0x44a>
 8005e04:	e037      	b.n	8005e76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e032      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e12:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d028      	beq.n	8005e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d121      	bne.n	8005e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d11a      	bne.n	8005e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e42:	4013      	ands	r3, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d111      	bne.n	8005e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	085b      	lsrs	r3, r3, #1
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d107      	bne.n	8005e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d001      	beq.n	8005e76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40007000 	.word	0x40007000
 8005e84:	40023800 	.word	0x40023800
 8005e88:	42470060 	.word	0x42470060

08005e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0cc      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ea0:	4b68      	ldr	r3, [pc, #416]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d90c      	bls.n	8005ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eae:	4b65      	ldr	r3, [pc, #404]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb6:	4b63      	ldr	r3, [pc, #396]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0b8      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d020      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ee0:	4b59      	ldr	r3, [pc, #356]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	4a58      	ldr	r2, [pc, #352]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ef8:	4b53      	ldr	r3, [pc, #332]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	4a52      	ldr	r2, [pc, #328]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f04:	4b50      	ldr	r3, [pc, #320]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	494d      	ldr	r1, [pc, #308]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d044      	beq.n	8005fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d107      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2a:	4b47      	ldr	r3, [pc, #284]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d119      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e07f      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d003      	beq.n	8005f4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d107      	bne.n	8005f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f4a:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e06f      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f5a:	4b3b      	ldr	r3, [pc, #236]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e067      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f6a:	4b37      	ldr	r3, [pc, #220]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f023 0203 	bic.w	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4934      	ldr	r1, [pc, #208]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f7c:	f7fd fa28 	bl	80033d0 <HAL_GetTick>
 8005f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f82:	e00a      	b.n	8005f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f84:	f7fd fa24 	bl	80033d0 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e04f      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9a:	4b2b      	ldr	r3, [pc, #172]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 020c 	and.w	r2, r3, #12
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d1eb      	bne.n	8005f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fac:	4b25      	ldr	r3, [pc, #148]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d20c      	bcs.n	8005fd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fba:	4b22      	ldr	r3, [pc, #136]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b20      	ldr	r3, [pc, #128]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e032      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fe0:	4b19      	ldr	r3, [pc, #100]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4916      	ldr	r1, [pc, #88]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	490e      	ldr	r1, [pc, #56]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	4313      	orrs	r3, r2
 8006010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006012:	f000 f821 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 8006016:	4602      	mov	r2, r0
 8006018:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	490a      	ldr	r1, [pc, #40]	; (800604c <HAL_RCC_ClockConfig+0x1c0>)
 8006024:	5ccb      	ldrb	r3, [r1, r3]
 8006026:	fa22 f303 	lsr.w	r3, r2, r3
 800602a:	4a09      	ldr	r2, [pc, #36]	; (8006050 <HAL_RCC_ClockConfig+0x1c4>)
 800602c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800602e:	4b09      	ldr	r3, [pc, #36]	; (8006054 <HAL_RCC_ClockConfig+0x1c8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fd f988 	bl	8003348 <HAL_InitTick>

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40023c00 	.word	0x40023c00
 8006048:	40023800 	.word	0x40023800
 800604c:	0800c8d8 	.word	0x0800c8d8
 8006050:	20000010 	.word	0x20000010
 8006054:	20000014 	.word	0x20000014

08006058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006058:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	2300      	movs	r3, #0
 800606a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006070:	4b67      	ldr	r3, [pc, #412]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 030c 	and.w	r3, r3, #12
 8006078:	2b08      	cmp	r3, #8
 800607a:	d00d      	beq.n	8006098 <HAL_RCC_GetSysClockFreq+0x40>
 800607c:	2b08      	cmp	r3, #8
 800607e:	f200 80bd 	bhi.w	80061fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_RCC_GetSysClockFreq+0x34>
 8006086:	2b04      	cmp	r3, #4
 8006088:	d003      	beq.n	8006092 <HAL_RCC_GetSysClockFreq+0x3a>
 800608a:	e0b7      	b.n	80061fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800608c:	4b61      	ldr	r3, [pc, #388]	; (8006214 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800608e:	60bb      	str	r3, [r7, #8]
       break;
 8006090:	e0b7      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006092:	4b61      	ldr	r3, [pc, #388]	; (8006218 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006094:	60bb      	str	r3, [r7, #8]
      break;
 8006096:	e0b4      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006098:	4b5d      	ldr	r3, [pc, #372]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060a2:	4b5b      	ldr	r3, [pc, #364]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d04d      	beq.n	800614a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ae:	4b58      	ldr	r3, [pc, #352]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	099b      	lsrs	r3, r3, #6
 80060b4:	461a      	mov	r2, r3
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060be:	f04f 0100 	mov.w	r1, #0
 80060c2:	ea02 0800 	and.w	r8, r2, r0
 80060c6:	ea03 0901 	and.w	r9, r3, r1
 80060ca:	4640      	mov	r0, r8
 80060cc:	4649      	mov	r1, r9
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	014b      	lsls	r3, r1, #5
 80060d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80060dc:	0142      	lsls	r2, r0, #5
 80060de:	4610      	mov	r0, r2
 80060e0:	4619      	mov	r1, r3
 80060e2:	ebb0 0008 	subs.w	r0, r0, r8
 80060e6:	eb61 0109 	sbc.w	r1, r1, r9
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	018b      	lsls	r3, r1, #6
 80060f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80060f8:	0182      	lsls	r2, r0, #6
 80060fa:	1a12      	subs	r2, r2, r0
 80060fc:	eb63 0301 	sbc.w	r3, r3, r1
 8006100:	f04f 0000 	mov.w	r0, #0
 8006104:	f04f 0100 	mov.w	r1, #0
 8006108:	00d9      	lsls	r1, r3, #3
 800610a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800610e:	00d0      	lsls	r0, r2, #3
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	eb12 0208 	adds.w	r2, r2, r8
 8006118:	eb43 0309 	adc.w	r3, r3, r9
 800611c:	f04f 0000 	mov.w	r0, #0
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	0259      	lsls	r1, r3, #9
 8006126:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800612a:	0250      	lsls	r0, r2, #9
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4610      	mov	r0, r2
 8006132:	4619      	mov	r1, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	461a      	mov	r2, r3
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	f7fa fcb6 	bl	8000aac <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4613      	mov	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e04a      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	099b      	lsrs	r3, r3, #6
 8006150:	461a      	mov	r2, r3
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	f240 10ff 	movw	r0, #511	; 0x1ff
 800615a:	f04f 0100 	mov.w	r1, #0
 800615e:	ea02 0400 	and.w	r4, r2, r0
 8006162:	ea03 0501 	and.w	r5, r3, r1
 8006166:	4620      	mov	r0, r4
 8006168:	4629      	mov	r1, r5
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	014b      	lsls	r3, r1, #5
 8006174:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006178:	0142      	lsls	r2, r0, #5
 800617a:	4610      	mov	r0, r2
 800617c:	4619      	mov	r1, r3
 800617e:	1b00      	subs	r0, r0, r4
 8006180:	eb61 0105 	sbc.w	r1, r1, r5
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	018b      	lsls	r3, r1, #6
 800618e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006192:	0182      	lsls	r2, r0, #6
 8006194:	1a12      	subs	r2, r2, r0
 8006196:	eb63 0301 	sbc.w	r3, r3, r1
 800619a:	f04f 0000 	mov.w	r0, #0
 800619e:	f04f 0100 	mov.w	r1, #0
 80061a2:	00d9      	lsls	r1, r3, #3
 80061a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061a8:	00d0      	lsls	r0, r2, #3
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	1912      	adds	r2, r2, r4
 80061b0:	eb45 0303 	adc.w	r3, r5, r3
 80061b4:	f04f 0000 	mov.w	r0, #0
 80061b8:	f04f 0100 	mov.w	r1, #0
 80061bc:	0299      	lsls	r1, r3, #10
 80061be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80061c2:	0290      	lsls	r0, r2, #10
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	f7fa fc6a 	bl	8000aac <__aeabi_uldivmod>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4613      	mov	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	0c1b      	lsrs	r3, r3, #16
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	3301      	adds	r3, #1
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	60bb      	str	r3, [r7, #8]
      break;
 80061fa:	e002      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061fe:	60bb      	str	r3, [r7, #8]
      break;
 8006200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006202:	68bb      	ldr	r3, [r7, #8]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800620e:	bf00      	nop
 8006210:	40023800 	.word	0x40023800
 8006214:	00f42400 	.word	0x00f42400
 8006218:	007a1200 	.word	0x007a1200

0800621c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006220:	4b03      	ldr	r3, [pc, #12]	; (8006230 <HAL_RCC_GetHCLKFreq+0x14>)
 8006222:	681b      	ldr	r3, [r3, #0]
}
 8006224:	4618      	mov	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000010 	.word	0x20000010

08006234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006238:	f7ff fff0 	bl	800621c <HAL_RCC_GetHCLKFreq>
 800623c:	4602      	mov	r2, r0
 800623e:	4b05      	ldr	r3, [pc, #20]	; (8006254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	0a9b      	lsrs	r3, r3, #10
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	4903      	ldr	r1, [pc, #12]	; (8006258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800624a:	5ccb      	ldrb	r3, [r1, r3]
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006250:	4618      	mov	r0, r3
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40023800 	.word	0x40023800
 8006258:	0800c8e8 	.word	0x0800c8e8

0800625c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006260:	f7ff ffdc 	bl	800621c <HAL_RCC_GetHCLKFreq>
 8006264:	4602      	mov	r2, r0
 8006266:	4b05      	ldr	r3, [pc, #20]	; (800627c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	0b5b      	lsrs	r3, r3, #13
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	4903      	ldr	r1, [pc, #12]	; (8006280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006272:	5ccb      	ldrb	r3, [r1, r3]
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006278:	4618      	mov	r0, r3
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40023800 	.word	0x40023800
 8006280:	0800c8e8 	.word	0x0800c8e8

08006284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e07b      	b.n	800638e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d108      	bne.n	80062b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a6:	d009      	beq.n	80062bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	61da      	str	r2, [r3, #28]
 80062ae:	e005      	b.n	80062bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fc fc8a 	bl	8002bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006340:	ea42 0103 	orr.w	r1, r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	0c1b      	lsrs	r3, r3, #16
 800635a:	f003 0104 	and.w	r1, r3, #4
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	f003 0210 	and.w	r2, r3, #16
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69da      	ldr	r2, [r3, #28]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800637c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b088      	sub	sp, #32
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_SPI_Transmit+0x22>
 80063b4:	2302      	movs	r3, #2
 80063b6:	e126      	b.n	8006606 <HAL_SPI_Transmit+0x270>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c0:	f7fd f806 	bl	80033d0 <HAL_GetTick>
 80063c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d002      	beq.n	80063dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
 80063d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063da:	e10b      	b.n	80065f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_SPI_Transmit+0x52>
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ec:	e102      	b.n	80065f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2203      	movs	r2, #3
 80063f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	88fa      	ldrh	r2, [r7, #6]
 800640c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006434:	d10f      	bne.n	8006456 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006454:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d007      	beq.n	8006474 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647c:	d14b      	bne.n	8006516 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_SPI_Transmit+0xf6>
 8006486:	8afb      	ldrh	r3, [r7, #22]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d13e      	bne.n	800650a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	881a      	ldrh	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	1c9a      	adds	r2, r3, #2
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064b0:	e02b      	b.n	800650a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d112      	bne.n	80064e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	881a      	ldrh	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	1c9a      	adds	r2, r3, #2
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80064e4:	e011      	b.n	800650a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e6:	f7fc ff73 	bl	80033d0 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d803      	bhi.n	80064fe <HAL_SPI_Transmit+0x168>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_Transmit+0x16e>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006508:	e074      	b.n	80065f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1ce      	bne.n	80064b2 <HAL_SPI_Transmit+0x11c>
 8006514:	e04c      	b.n	80065b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_SPI_Transmit+0x18e>
 800651e:	8afb      	ldrh	r3, [r7, #22]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d140      	bne.n	80065a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800654a:	e02c      	b.n	80065a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b02      	cmp	r3, #2
 8006558:	d113      	bne.n	8006582 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	330c      	adds	r3, #12
 8006564:	7812      	ldrb	r2, [r2, #0]
 8006566:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006580:	e011      	b.n	80065a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006582:	f7fc ff25 	bl	80033d0 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d803      	bhi.n	800659a <HAL_SPI_Transmit+0x204>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d102      	bne.n	80065a0 <HAL_SPI_Transmit+0x20a>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d102      	bne.n	80065a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065a4:	e026      	b.n	80065f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1cd      	bne.n	800654c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fbcb 	bl	8006d50 <SPI_EndRxTxTransaction>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2220      	movs	r2, #32
 80065c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e000      	b.n	80065f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80065f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006604:	7ffb      	ldrb	r3, [r7, #31]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3720      	adds	r7, #32
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b088      	sub	sp, #32
 8006612:	af02      	add	r7, sp, #8
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800662a:	d112      	bne.n	8006652 <HAL_SPI_Receive+0x44>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10e      	bne.n	8006652 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2204      	movs	r2, #4
 8006638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	4613      	mov	r3, r2
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f8f1 	bl	8006830 <HAL_SPI_TransmitReceive>
 800664e:	4603      	mov	r3, r0
 8006650:	e0ea      	b.n	8006828 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_SPI_Receive+0x52>
 800665c:	2302      	movs	r3, #2
 800665e:	e0e3      	b.n	8006828 <HAL_SPI_Receive+0x21a>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006668:	f7fc feb2 	bl	80033d0 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b01      	cmp	r3, #1
 8006678:	d002      	beq.n	8006680 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800667a:	2302      	movs	r3, #2
 800667c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800667e:	e0ca      	b.n	8006816 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_SPI_Receive+0x7e>
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006690:	e0c1      	b.n	8006816 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2204      	movs	r2, #4
 8006696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	88fa      	ldrh	r2, [r7, #6]
 80066aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d8:	d10f      	bne.n	80066fa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d007      	beq.n	8006718 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006716:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d162      	bne.n	80067e6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006720:	e02e      	b.n	8006780 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b01      	cmp	r3, #1
 800672e:	d115      	bne.n	800675c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f103 020c 	add.w	r2, r3, #12
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	7812      	ldrb	r2, [r2, #0]
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	87da      	strh	r2, [r3, #62]	; 0x3e
 800675a:	e011      	b.n	8006780 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800675c:	f7fc fe38 	bl	80033d0 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d803      	bhi.n	8006774 <HAL_SPI_Receive+0x166>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d102      	bne.n	800677a <HAL_SPI_Receive+0x16c>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800677e:	e04a      	b.n	8006816 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1cb      	bne.n	8006722 <HAL_SPI_Receive+0x114>
 800678a:	e031      	b.n	80067f0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b01      	cmp	r3, #1
 8006798:	d113      	bne.n	80067c2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	b292      	uxth	r2, r2
 80067a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	1c9a      	adds	r2, r3, #2
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067c0:	e011      	b.n	80067e6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067c2:	f7fc fe05 	bl	80033d0 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d803      	bhi.n	80067da <HAL_SPI_Receive+0x1cc>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d102      	bne.n	80067e0 <HAL_SPI_Receive+0x1d2>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d102      	bne.n	80067e6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067e4:	e017      	b.n	8006816 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1cd      	bne.n	800678c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 fa45 	bl	8006c84 <SPI_EndRxTransaction>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2220      	movs	r2, #32
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
 8006812:	e000      	b.n	8006816 <HAL_SPI_Receive+0x208>
  }

error :
 8006814:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	; 0x30
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800683e:	2301      	movs	r3, #1
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <HAL_SPI_TransmitReceive+0x26>
 8006852:	2302      	movs	r3, #2
 8006854:	e18a      	b.n	8006b6c <HAL_SPI_TransmitReceive+0x33c>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800685e:	f7fc fdb7 	bl	80033d0 <HAL_GetTick>
 8006862:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006874:	887b      	ldrh	r3, [r7, #2]
 8006876:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800687c:	2b01      	cmp	r3, #1
 800687e:	d00f      	beq.n	80068a0 <HAL_SPI_TransmitReceive+0x70>
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006886:	d107      	bne.n	8006898 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d103      	bne.n	8006898 <HAL_SPI_TransmitReceive+0x68>
 8006890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006894:	2b04      	cmp	r3, #4
 8006896:	d003      	beq.n	80068a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006898:	2302      	movs	r3, #2
 800689a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800689e:	e15b      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x82>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x82>
 80068ac:	887b      	ldrh	r3, [r7, #2]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d103      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068b8:	e14e      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d003      	beq.n	80068ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2205      	movs	r2, #5
 80068ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	887a      	ldrh	r2, [r7, #2]
 80068de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	887a      	ldrh	r2, [r7, #2]
 80068e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	887a      	ldrh	r2, [r7, #2]
 80068f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	887a      	ldrh	r2, [r7, #2]
 80068f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690e:	2b40      	cmp	r3, #64	; 0x40
 8006910:	d007      	beq.n	8006922 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800692a:	d178      	bne.n	8006a1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_SPI_TransmitReceive+0x10a>
 8006934:	8b7b      	ldrh	r3, [r7, #26]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d166      	bne.n	8006a08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	881a      	ldrh	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	1c9a      	adds	r2, r3, #2
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800695e:	e053      	b.n	8006a08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b02      	cmp	r3, #2
 800696c:	d11b      	bne.n	80069a6 <HAL_SPI_TransmitReceive+0x176>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006972:	b29b      	uxth	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d016      	beq.n	80069a6 <HAL_SPI_TransmitReceive+0x176>
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	2b01      	cmp	r3, #1
 800697c:	d113      	bne.n	80069a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	881a      	ldrh	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	1c9a      	adds	r2, r3, #2
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d119      	bne.n	80069e8 <HAL_SPI_TransmitReceive+0x1b8>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d014      	beq.n	80069e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	b292      	uxth	r2, r2
 80069ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	1c9a      	adds	r2, r3, #2
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069e4:	2301      	movs	r3, #1
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069e8:	f7fc fcf2 	bl	80033d0 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d807      	bhi.n	8006a08 <HAL_SPI_TransmitReceive+0x1d8>
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d003      	beq.n	8006a08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a06:	e0a7      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1a6      	bne.n	8006960 <HAL_SPI_TransmitReceive+0x130>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1a1      	bne.n	8006960 <HAL_SPI_TransmitReceive+0x130>
 8006a1c:	e07c      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <HAL_SPI_TransmitReceive+0x1fc>
 8006a26:	8b7b      	ldrh	r3, [r7, #26]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d16b      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	7812      	ldrb	r2, [r2, #0]
 8006a38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a52:	e057      	b.n	8006b04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d11c      	bne.n	8006a9c <HAL_SPI_TransmitReceive+0x26c>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d017      	beq.n	8006a9c <HAL_SPI_TransmitReceive+0x26c>
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d114      	bne.n	8006a9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	330c      	adds	r3, #12
 8006a7c:	7812      	ldrb	r2, [r2, #0]
 8006a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d119      	bne.n	8006ade <HAL_SPI_TransmitReceive+0x2ae>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d014      	beq.n	8006ade <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ada:	2301      	movs	r3, #1
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ade:	f7fc fc77 	bl	80033d0 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d803      	bhi.n	8006af6 <HAL_SPI_TransmitReceive+0x2c6>
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d102      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x2cc>
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d103      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b02:	e029      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1a2      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x224>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d19d      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f917 	bl	8006d50 <SPI_EndRxTxTransaction>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d006      	beq.n	8006b36 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2220      	movs	r2, #32
 8006b32:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b34:	e010      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10b      	bne.n	8006b56 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	e000      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3730      	adds	r7, #48	; 0x30
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	4613      	mov	r3, r2
 8006b82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b84:	f7fc fc24 	bl	80033d0 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	4413      	add	r3, r2
 8006b92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b94:	f7fc fc1c 	bl	80033d0 <HAL_GetTick>
 8006b98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b9a:	4b39      	ldr	r3, [pc, #228]	; (8006c80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	015b      	lsls	r3, r3, #5
 8006ba0:	0d1b      	lsrs	r3, r3, #20
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	fb02 f303 	mul.w	r3, r2, r3
 8006ba8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006baa:	e054      	b.n	8006c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb2:	d050      	beq.n	8006c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bb4:	f7fc fc0c 	bl	80033d0 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d902      	bls.n	8006bca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d13d      	bne.n	8006c46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006be2:	d111      	bne.n	8006c08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bec:	d004      	beq.n	8006bf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf6:	d107      	bne.n	8006c08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c10:	d10f      	bne.n	8006c32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e017      	b.n	8006c76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	bf0c      	ite	eq
 8006c66:	2301      	moveq	r3, #1
 8006c68:	2300      	movne	r3, #0
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d19b      	bne.n	8006bac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3720      	adds	r7, #32
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000010 	.word	0x20000010

08006c84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c98:	d111      	bne.n	8006cbe <SPI_EndRxTransaction+0x3a>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca2:	d004      	beq.n	8006cae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cac:	d107      	bne.n	8006cbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc6:	d12a      	bne.n	8006d1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd0:	d012      	beq.n	8006cf8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2180      	movs	r1, #128	; 0x80
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7ff ff49 	bl	8006b74 <SPI_WaitFlagStateUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d02d      	beq.n	8006d44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cec:	f043 0220 	orr.w	r2, r3, #32
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e026      	b.n	8006d46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2101      	movs	r1, #1
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff ff36 	bl	8006b74 <SPI_WaitFlagStateUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01a      	beq.n	8006d44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d12:	f043 0220 	orr.w	r2, r3, #32
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e013      	b.n	8006d46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2200      	movs	r2, #0
 8006d26:	2101      	movs	r1, #1
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7ff ff23 	bl	8006b74 <SPI_WaitFlagStateUntilTimeout>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d38:	f043 0220 	orr.w	r2, r3, #32
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e000      	b.n	8006d46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <SPI_EndRxTxTransaction+0x7c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1b      	ldr	r2, [pc, #108]	; (8006dd0 <SPI_EndRxTxTransaction+0x80>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	0d5b      	lsrs	r3, r3, #21
 8006d68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d6c:	fb02 f303 	mul.w	r3, r2, r3
 8006d70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d7a:	d112      	bne.n	8006da2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2200      	movs	r2, #0
 8006d84:	2180      	movs	r1, #128	; 0x80
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fef4 	bl	8006b74 <SPI_WaitFlagStateUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e00f      	b.n	8006dc2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	d0f2      	beq.n	8006da2 <SPI_EndRxTxTransaction+0x52>
 8006dbc:	e000      	b.n	8006dc0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006dbe:	bf00      	nop
  }

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000010 	.word	0x20000010
 8006dd0:	165e9f81 	.word	0x165e9f81

08006dd4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e034      	b.n	8006e54 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f7fa fb24 	bl	800144c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	f002 f828 	bl	8008e64 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	f002 f872 	bl	8008f08 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6858      	ldr	r0, [r3, #4]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	6879      	ldr	r1, [r7, #4]
 8006e32:	f002 f8a7 	bl	8008f84 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	6892      	ldr	r2, [r2, #8]
 8006e3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	6892      	ldr	r2, [r2, #8]
 8006e4a:	f041 0101 	orr.w	r1, r1, #1
 8006e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e041      	b.n	8006ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fc f84e 	bl	8002f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	f000 fc7a 	bl	8007794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d001      	beq.n	8006f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e04e      	b.n	8006fb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a23      	ldr	r2, [pc, #140]	; (8006fc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d022      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3e:	d01d      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1f      	ldr	r2, [pc, #124]	; (8006fc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d018      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1c      	ldr	r2, [pc, #112]	; (8006fcc <HAL_TIM_Base_Start_IT+0xd0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00e      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1b      	ldr	r2, [pc, #108]	; (8006fd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d009      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0x80>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d111      	bne.n	8006fa0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b06      	cmp	r3, #6
 8006f8c:	d010      	beq.n	8006fb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f042 0201 	orr.w	r2, r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9e:	e007      	b.n	8006fb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	40000400 	.word	0x40000400
 8006fc8:	40000800 	.word	0x40000800
 8006fcc:	40000c00 	.word	0x40000c00
 8006fd0:	40010400 	.word	0x40010400
 8006fd4:	40014000 	.word	0x40014000
 8006fd8:	40001800 	.word	0x40001800

08006fdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e041      	b.n	8007072 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d106      	bne.n	8007008 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f839 	bl	800707a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f000 fbba 	bl	8007794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
	...

08007090 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d109      	bne.n	80070b4 <HAL_TIM_PWM_Start+0x24>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	bf14      	ite	ne
 80070ac:	2301      	movne	r3, #1
 80070ae:	2300      	moveq	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	e022      	b.n	80070fa <HAL_TIM_PWM_Start+0x6a>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d109      	bne.n	80070ce <HAL_TIM_PWM_Start+0x3e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	bf14      	ite	ne
 80070c6:	2301      	movne	r3, #1
 80070c8:	2300      	moveq	r3, #0
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	e015      	b.n	80070fa <HAL_TIM_PWM_Start+0x6a>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d109      	bne.n	80070e8 <HAL_TIM_PWM_Start+0x58>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b01      	cmp	r3, #1
 80070de:	bf14      	ite	ne
 80070e0:	2301      	movne	r3, #1
 80070e2:	2300      	moveq	r3, #0
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	e008      	b.n	80070fa <HAL_TIM_PWM_Start+0x6a>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	bf14      	ite	ne
 80070f4:	2301      	movne	r3, #1
 80070f6:	2300      	moveq	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e07c      	b.n	80071fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d104      	bne.n	8007112 <HAL_TIM_PWM_Start+0x82>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007110:	e013      	b.n	800713a <HAL_TIM_PWM_Start+0xaa>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b04      	cmp	r3, #4
 8007116:	d104      	bne.n	8007122 <HAL_TIM_PWM_Start+0x92>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007120:	e00b      	b.n	800713a <HAL_TIM_PWM_Start+0xaa>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b08      	cmp	r3, #8
 8007126:	d104      	bne.n	8007132 <HAL_TIM_PWM_Start+0xa2>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007130:	e003      	b.n	800713a <HAL_TIM_PWM_Start+0xaa>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2201      	movs	r2, #1
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fe10 	bl	8007d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a2d      	ldr	r2, [pc, #180]	; (8007204 <HAL_TIM_PWM_Start+0x174>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d004      	beq.n	800715c <HAL_TIM_PWM_Start+0xcc>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a2c      	ldr	r2, [pc, #176]	; (8007208 <HAL_TIM_PWM_Start+0x178>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d101      	bne.n	8007160 <HAL_TIM_PWM_Start+0xd0>
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <HAL_TIM_PWM_Start+0xd2>
 8007160:	2300      	movs	r3, #0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d007      	beq.n	8007176 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a22      	ldr	r2, [pc, #136]	; (8007204 <HAL_TIM_PWM_Start+0x174>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d022      	beq.n	80071c6 <HAL_TIM_PWM_Start+0x136>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007188:	d01d      	beq.n	80071c6 <HAL_TIM_PWM_Start+0x136>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a1f      	ldr	r2, [pc, #124]	; (800720c <HAL_TIM_PWM_Start+0x17c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d018      	beq.n	80071c6 <HAL_TIM_PWM_Start+0x136>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a1d      	ldr	r2, [pc, #116]	; (8007210 <HAL_TIM_PWM_Start+0x180>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d013      	beq.n	80071c6 <HAL_TIM_PWM_Start+0x136>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1c      	ldr	r2, [pc, #112]	; (8007214 <HAL_TIM_PWM_Start+0x184>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00e      	beq.n	80071c6 <HAL_TIM_PWM_Start+0x136>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a16      	ldr	r2, [pc, #88]	; (8007208 <HAL_TIM_PWM_Start+0x178>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d009      	beq.n	80071c6 <HAL_TIM_PWM_Start+0x136>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a18      	ldr	r2, [pc, #96]	; (8007218 <HAL_TIM_PWM_Start+0x188>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d004      	beq.n	80071c6 <HAL_TIM_PWM_Start+0x136>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a16      	ldr	r2, [pc, #88]	; (800721c <HAL_TIM_PWM_Start+0x18c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d111      	bne.n	80071ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b06      	cmp	r3, #6
 80071d6:	d010      	beq.n	80071fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e8:	e007      	b.n	80071fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 0201 	orr.w	r2, r2, #1
 80071f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40010000 	.word	0x40010000
 8007208:	40010400 	.word	0x40010400
 800720c:	40000400 	.word	0x40000400
 8007210:	40000800 	.word	0x40000800
 8007214:	40000c00 	.word	0x40000c00
 8007218:	40014000 	.word	0x40014000
 800721c:	40001800 	.word	0x40001800

08007220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b02      	cmp	r3, #2
 8007234:	d122      	bne.n	800727c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b02      	cmp	r3, #2
 8007242:	d11b      	bne.n	800727c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0202 	mvn.w	r2, #2
 800724c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fa77 	bl	8007756 <HAL_TIM_IC_CaptureCallback>
 8007268:	e005      	b.n	8007276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa69 	bl	8007742 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fa7a 	bl	800776a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0304 	and.w	r3, r3, #4
 8007286:	2b04      	cmp	r3, #4
 8007288:	d122      	bne.n	80072d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b04      	cmp	r3, #4
 8007296:	d11b      	bne.n	80072d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f06f 0204 	mvn.w	r2, #4
 80072a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2202      	movs	r2, #2
 80072a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa4d 	bl	8007756 <HAL_TIM_IC_CaptureCallback>
 80072bc:	e005      	b.n	80072ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fa3f 	bl	8007742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fa50 	bl	800776a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d122      	bne.n	8007324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d11b      	bne.n	8007324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f06f 0208 	mvn.w	r2, #8
 80072f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2204      	movs	r2, #4
 80072fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa23 	bl	8007756 <HAL_TIM_IC_CaptureCallback>
 8007310:	e005      	b.n	800731e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa15 	bl	8007742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fa26 	bl	800776a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0310 	and.w	r3, r3, #16
 800732e:	2b10      	cmp	r3, #16
 8007330:	d122      	bne.n	8007378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b10      	cmp	r3, #16
 800733e:	d11b      	bne.n	8007378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0210 	mvn.w	r2, #16
 8007348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2208      	movs	r2, #8
 800734e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f9f9 	bl	8007756 <HAL_TIM_IC_CaptureCallback>
 8007364:	e005      	b.n	8007372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9eb 	bl	8007742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f9fc 	bl	800776a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b01      	cmp	r3, #1
 8007384:	d10e      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b01      	cmp	r3, #1
 8007392:	d107      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f06f 0201 	mvn.w	r2, #1
 800739c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7fb fbc6 	bl	8002b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ae:	2b80      	cmp	r3, #128	; 0x80
 80073b0:	d10e      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073bc:	2b80      	cmp	r3, #128	; 0x80
 80073be:	d107      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fd78 	bl	8007ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073da:	2b40      	cmp	r3, #64	; 0x40
 80073dc:	d10e      	bne.n	80073fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e8:	2b40      	cmp	r3, #64	; 0x40
 80073ea:	d107      	bne.n	80073fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f9c1 	bl	800777e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b20      	cmp	r3, #32
 8007408:	d10e      	bne.n	8007428 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b20      	cmp	r3, #32
 8007416:	d107      	bne.n	8007428 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0220 	mvn.w	r2, #32
 8007420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fd42 	bl	8007eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007446:	2b01      	cmp	r3, #1
 8007448:	d101      	bne.n	800744e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800744a:	2302      	movs	r3, #2
 800744c:	e0ae      	b.n	80075ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b0c      	cmp	r3, #12
 800745a:	f200 809f 	bhi.w	800759c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800745e:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	08007499 	.word	0x08007499
 8007468:	0800759d 	.word	0x0800759d
 800746c:	0800759d 	.word	0x0800759d
 8007470:	0800759d 	.word	0x0800759d
 8007474:	080074d9 	.word	0x080074d9
 8007478:	0800759d 	.word	0x0800759d
 800747c:	0800759d 	.word	0x0800759d
 8007480:	0800759d 	.word	0x0800759d
 8007484:	0800751b 	.word	0x0800751b
 8007488:	0800759d 	.word	0x0800759d
 800748c:	0800759d 	.word	0x0800759d
 8007490:	0800759d 	.word	0x0800759d
 8007494:	0800755b 	.word	0x0800755b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fa18 	bl	80078d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0208 	orr.w	r2, r2, #8
 80074b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0204 	bic.w	r2, r2, #4
 80074c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6999      	ldr	r1, [r3, #24]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	691a      	ldr	r2, [r3, #16]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	619a      	str	r2, [r3, #24]
      break;
 80074d6:	e064      	b.n	80075a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fa68 	bl	80079b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699a      	ldr	r2, [r3, #24]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6999      	ldr	r1, [r3, #24]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	021a      	lsls	r2, r3, #8
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	619a      	str	r2, [r3, #24]
      break;
 8007518:	e043      	b.n	80075a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	4618      	mov	r0, r3
 8007522:	f000 fabd 	bl	8007aa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69da      	ldr	r2, [r3, #28]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0208 	orr.w	r2, r2, #8
 8007534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69da      	ldr	r2, [r3, #28]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0204 	bic.w	r2, r2, #4
 8007544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69d9      	ldr	r1, [r3, #28]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	61da      	str	r2, [r3, #28]
      break;
 8007558:	e023      	b.n	80075a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fb11 	bl	8007b88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69da      	ldr	r2, [r3, #28]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69d9      	ldr	r1, [r3, #28]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	021a      	lsls	r2, r3, #8
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	61da      	str	r2, [r3, #28]
      break;
 800759a:	e002      	b.n	80075a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	75fb      	strb	r3, [r7, #23]
      break;
 80075a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d101      	bne.n	80075d0 <HAL_TIM_ConfigClockSource+0x1c>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e0b4      	b.n	800773a <HAL_TIM_ConfigClockSource+0x186>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007608:	d03e      	beq.n	8007688 <HAL_TIM_ConfigClockSource+0xd4>
 800760a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800760e:	f200 8087 	bhi.w	8007720 <HAL_TIM_ConfigClockSource+0x16c>
 8007612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007616:	f000 8086 	beq.w	8007726 <HAL_TIM_ConfigClockSource+0x172>
 800761a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761e:	d87f      	bhi.n	8007720 <HAL_TIM_ConfigClockSource+0x16c>
 8007620:	2b70      	cmp	r3, #112	; 0x70
 8007622:	d01a      	beq.n	800765a <HAL_TIM_ConfigClockSource+0xa6>
 8007624:	2b70      	cmp	r3, #112	; 0x70
 8007626:	d87b      	bhi.n	8007720 <HAL_TIM_ConfigClockSource+0x16c>
 8007628:	2b60      	cmp	r3, #96	; 0x60
 800762a:	d050      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x11a>
 800762c:	2b60      	cmp	r3, #96	; 0x60
 800762e:	d877      	bhi.n	8007720 <HAL_TIM_ConfigClockSource+0x16c>
 8007630:	2b50      	cmp	r3, #80	; 0x50
 8007632:	d03c      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0xfa>
 8007634:	2b50      	cmp	r3, #80	; 0x50
 8007636:	d873      	bhi.n	8007720 <HAL_TIM_ConfigClockSource+0x16c>
 8007638:	2b40      	cmp	r3, #64	; 0x40
 800763a:	d058      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x13a>
 800763c:	2b40      	cmp	r3, #64	; 0x40
 800763e:	d86f      	bhi.n	8007720 <HAL_TIM_ConfigClockSource+0x16c>
 8007640:	2b30      	cmp	r3, #48	; 0x30
 8007642:	d064      	beq.n	800770e <HAL_TIM_ConfigClockSource+0x15a>
 8007644:	2b30      	cmp	r3, #48	; 0x30
 8007646:	d86b      	bhi.n	8007720 <HAL_TIM_ConfigClockSource+0x16c>
 8007648:	2b20      	cmp	r3, #32
 800764a:	d060      	beq.n	800770e <HAL_TIM_ConfigClockSource+0x15a>
 800764c:	2b20      	cmp	r3, #32
 800764e:	d867      	bhi.n	8007720 <HAL_TIM_ConfigClockSource+0x16c>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d05c      	beq.n	800770e <HAL_TIM_ConfigClockSource+0x15a>
 8007654:	2b10      	cmp	r3, #16
 8007656:	d05a      	beq.n	800770e <HAL_TIM_ConfigClockSource+0x15a>
 8007658:	e062      	b.n	8007720 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6818      	ldr	r0, [r3, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	6899      	ldr	r1, [r3, #8]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f000 fb5d 	bl	8007d28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800767c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	609a      	str	r2, [r3, #8]
      break;
 8007686:	e04f      	b.n	8007728 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	6899      	ldr	r1, [r3, #8]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f000 fb46 	bl	8007d28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076aa:	609a      	str	r2, [r3, #8]
      break;
 80076ac:	e03c      	b.n	8007728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	6859      	ldr	r1, [r3, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f000 faba 	bl	8007c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2150      	movs	r1, #80	; 0x50
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fb13 	bl	8007cf2 <TIM_ITRx_SetConfig>
      break;
 80076cc:	e02c      	b.n	8007728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	6859      	ldr	r1, [r3, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	461a      	mov	r2, r3
 80076dc:	f000 fad9 	bl	8007c92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2160      	movs	r1, #96	; 0x60
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fb03 	bl	8007cf2 <TIM_ITRx_SetConfig>
      break;
 80076ec:	e01c      	b.n	8007728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	6859      	ldr	r1, [r3, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	461a      	mov	r2, r3
 80076fc:	f000 fa9a 	bl	8007c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2140      	movs	r1, #64	; 0x40
 8007706:	4618      	mov	r0, r3
 8007708:	f000 faf3 	bl	8007cf2 <TIM_ITRx_SetConfig>
      break;
 800770c:	e00c      	b.n	8007728 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4619      	mov	r1, r3
 8007718:	4610      	mov	r0, r2
 800771a:	f000 faea 	bl	8007cf2 <TIM_ITRx_SetConfig>
      break;
 800771e:	e003      	b.n	8007728 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
      break;
 8007724:	e000      	b.n	8007728 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
	...

08007794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a40      	ldr	r2, [pc, #256]	; (80078a8 <TIM_Base_SetConfig+0x114>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d013      	beq.n	80077d4 <TIM_Base_SetConfig+0x40>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b2:	d00f      	beq.n	80077d4 <TIM_Base_SetConfig+0x40>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a3d      	ldr	r2, [pc, #244]	; (80078ac <TIM_Base_SetConfig+0x118>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00b      	beq.n	80077d4 <TIM_Base_SetConfig+0x40>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a3c      	ldr	r2, [pc, #240]	; (80078b0 <TIM_Base_SetConfig+0x11c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d007      	beq.n	80077d4 <TIM_Base_SetConfig+0x40>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a3b      	ldr	r2, [pc, #236]	; (80078b4 <TIM_Base_SetConfig+0x120>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d003      	beq.n	80077d4 <TIM_Base_SetConfig+0x40>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a3a      	ldr	r2, [pc, #232]	; (80078b8 <TIM_Base_SetConfig+0x124>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d108      	bne.n	80077e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a2f      	ldr	r2, [pc, #188]	; (80078a8 <TIM_Base_SetConfig+0x114>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d02b      	beq.n	8007846 <TIM_Base_SetConfig+0xb2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f4:	d027      	beq.n	8007846 <TIM_Base_SetConfig+0xb2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a2c      	ldr	r2, [pc, #176]	; (80078ac <TIM_Base_SetConfig+0x118>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d023      	beq.n	8007846 <TIM_Base_SetConfig+0xb2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a2b      	ldr	r2, [pc, #172]	; (80078b0 <TIM_Base_SetConfig+0x11c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d01f      	beq.n	8007846 <TIM_Base_SetConfig+0xb2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a2a      	ldr	r2, [pc, #168]	; (80078b4 <TIM_Base_SetConfig+0x120>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d01b      	beq.n	8007846 <TIM_Base_SetConfig+0xb2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a29      	ldr	r2, [pc, #164]	; (80078b8 <TIM_Base_SetConfig+0x124>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d017      	beq.n	8007846 <TIM_Base_SetConfig+0xb2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a28      	ldr	r2, [pc, #160]	; (80078bc <TIM_Base_SetConfig+0x128>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d013      	beq.n	8007846 <TIM_Base_SetConfig+0xb2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a27      	ldr	r2, [pc, #156]	; (80078c0 <TIM_Base_SetConfig+0x12c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00f      	beq.n	8007846 <TIM_Base_SetConfig+0xb2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a26      	ldr	r2, [pc, #152]	; (80078c4 <TIM_Base_SetConfig+0x130>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d00b      	beq.n	8007846 <TIM_Base_SetConfig+0xb2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a25      	ldr	r2, [pc, #148]	; (80078c8 <TIM_Base_SetConfig+0x134>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d007      	beq.n	8007846 <TIM_Base_SetConfig+0xb2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a24      	ldr	r2, [pc, #144]	; (80078cc <TIM_Base_SetConfig+0x138>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d003      	beq.n	8007846 <TIM_Base_SetConfig+0xb2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a23      	ldr	r2, [pc, #140]	; (80078d0 <TIM_Base_SetConfig+0x13c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d108      	bne.n	8007858 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800784c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a0a      	ldr	r2, [pc, #40]	; (80078a8 <TIM_Base_SetConfig+0x114>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d003      	beq.n	800788c <TIM_Base_SetConfig+0xf8>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a0c      	ldr	r2, [pc, #48]	; (80078b8 <TIM_Base_SetConfig+0x124>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d103      	bne.n	8007894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	615a      	str	r2, [r3, #20]
}
 800789a:	bf00      	nop
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	40010000 	.word	0x40010000
 80078ac:	40000400 	.word	0x40000400
 80078b0:	40000800 	.word	0x40000800
 80078b4:	40000c00 	.word	0x40000c00
 80078b8:	40010400 	.word	0x40010400
 80078bc:	40014000 	.word	0x40014000
 80078c0:	40014400 	.word	0x40014400
 80078c4:	40014800 	.word	0x40014800
 80078c8:	40001800 	.word	0x40001800
 80078cc:	40001c00 	.word	0x40001c00
 80078d0:	40002000 	.word	0x40002000

080078d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f023 0201 	bic.w	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0303 	bic.w	r3, r3, #3
 800790a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	4313      	orrs	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f023 0302 	bic.w	r3, r3, #2
 800791c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	4313      	orrs	r3, r2
 8007926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a20      	ldr	r2, [pc, #128]	; (80079ac <TIM_OC1_SetConfig+0xd8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d003      	beq.n	8007938 <TIM_OC1_SetConfig+0x64>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <TIM_OC1_SetConfig+0xdc>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d10c      	bne.n	8007952 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f023 0308 	bic.w	r3, r3, #8
 800793e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f023 0304 	bic.w	r3, r3, #4
 8007950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a15      	ldr	r2, [pc, #84]	; (80079ac <TIM_OC1_SetConfig+0xd8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d003      	beq.n	8007962 <TIM_OC1_SetConfig+0x8e>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a14      	ldr	r2, [pc, #80]	; (80079b0 <TIM_OC1_SetConfig+0xdc>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d111      	bne.n	8007986 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	4313      	orrs	r3, r2
 800797a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4313      	orrs	r3, r2
 8007984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	621a      	str	r2, [r3, #32]
}
 80079a0:	bf00      	nop
 80079a2:	371c      	adds	r7, #28
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	40010000 	.word	0x40010000
 80079b0:	40010400 	.word	0x40010400

080079b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f023 0210 	bic.w	r2, r3, #16
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	021b      	lsls	r3, r3, #8
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f023 0320 	bic.w	r3, r3, #32
 80079fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	011b      	lsls	r3, r3, #4
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a22      	ldr	r2, [pc, #136]	; (8007a98 <TIM_OC2_SetConfig+0xe4>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d003      	beq.n	8007a1c <TIM_OC2_SetConfig+0x68>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a21      	ldr	r2, [pc, #132]	; (8007a9c <TIM_OC2_SetConfig+0xe8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d10d      	bne.n	8007a38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	011b      	lsls	r3, r3, #4
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <TIM_OC2_SetConfig+0xe4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d003      	beq.n	8007a48 <TIM_OC2_SetConfig+0x94>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a16      	ldr	r2, [pc, #88]	; (8007a9c <TIM_OC2_SetConfig+0xe8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d113      	bne.n	8007a70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	621a      	str	r2, [r3, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	40010000 	.word	0x40010000
 8007a9c:	40010400 	.word	0x40010400

08007aa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	021b      	lsls	r3, r3, #8
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <TIM_OC3_SetConfig+0xe0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d003      	beq.n	8007b06 <TIM_OC3_SetConfig+0x66>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a20      	ldr	r2, [pc, #128]	; (8007b84 <TIM_OC3_SetConfig+0xe4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d10d      	bne.n	8007b22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a16      	ldr	r2, [pc, #88]	; (8007b80 <TIM_OC3_SetConfig+0xe0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d003      	beq.n	8007b32 <TIM_OC3_SetConfig+0x92>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a15      	ldr	r2, [pc, #84]	; (8007b84 <TIM_OC3_SetConfig+0xe4>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d113      	bne.n	8007b5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	621a      	str	r2, [r3, #32]
}
 8007b74:	bf00      	nop
 8007b76:	371c      	adds	r7, #28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	40010000 	.word	0x40010000
 8007b84:	40010400 	.word	0x40010400

08007b88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	031b      	lsls	r3, r3, #12
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a12      	ldr	r2, [pc, #72]	; (8007c2c <TIM_OC4_SetConfig+0xa4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d003      	beq.n	8007bf0 <TIM_OC4_SetConfig+0x68>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a11      	ldr	r2, [pc, #68]	; (8007c30 <TIM_OC4_SetConfig+0xa8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d109      	bne.n	8007c04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	019b      	lsls	r3, r3, #6
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	621a      	str	r2, [r3, #32]
}
 8007c1e:	bf00      	nop
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	40010000 	.word	0x40010000
 8007c30:	40010400 	.word	0x40010400

08007c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	f023 0201 	bic.w	r2, r3, #1
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	011b      	lsls	r3, r3, #4
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f023 030a 	bic.w	r3, r3, #10
 8007c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	621a      	str	r2, [r3, #32]
}
 8007c86:	bf00      	nop
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b087      	sub	sp, #28
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	f023 0210 	bic.w	r2, r3, #16
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	031b      	lsls	r3, r3, #12
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	621a      	str	r2, [r3, #32]
}
 8007ce6:	bf00      	nop
 8007ce8:	371c      	adds	r7, #28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b085      	sub	sp, #20
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	f043 0307 	orr.w	r3, r3, #7
 8007d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	609a      	str	r2, [r3, #8]
}
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	021a      	lsls	r2, r3, #8
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	609a      	str	r2, [r3, #8]
}
 8007d5c:	bf00      	nop
 8007d5e:	371c      	adds	r7, #28
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f003 031f 	and.w	r3, r3, #31
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a1a      	ldr	r2, [r3, #32]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	43db      	mvns	r3, r3
 8007d8a:	401a      	ands	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a1a      	ldr	r2, [r3, #32]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f003 031f 	and.w	r3, r3, #31
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007da0:	431a      	orrs	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	621a      	str	r2, [r3, #32]
}
 8007da6:	bf00      	nop
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
	...

08007db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d101      	bne.n	8007dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	e05a      	b.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a21      	ldr	r2, [pc, #132]	; (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d022      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e18:	d01d      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d018      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1b      	ldr	r2, [pc, #108]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d013      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a1a      	ldr	r2, [pc, #104]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d00e      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a18      	ldr	r2, [pc, #96]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d009      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a17      	ldr	r2, [pc, #92]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d004      	beq.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a15      	ldr	r2, [pc, #84]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d10c      	bne.n	8007e70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	40010000 	.word	0x40010000
 8007e94:	40000400 	.word	0x40000400
 8007e98:	40000800 	.word	0x40000800
 8007e9c:	40000c00 	.word	0x40000c00
 8007ea0:	40010400 	.word	0x40010400
 8007ea4:	40014000 	.word	0x40014000
 8007ea8:	40001800 	.word	0x40001800

08007eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e03f      	b.n	8007f66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fb f94a 	bl	8003194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2224      	movs	r2, #36	; 0x24
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fddb 	bl	8008ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	695a      	ldr	r2, [r3, #20]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b08a      	sub	sp, #40	; 0x28
 8007f72:	af02      	add	r7, sp, #8
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	603b      	str	r3, [r7, #0]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d17c      	bne.n	8008088 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <HAL_UART_Transmit+0x2c>
 8007f94:	88fb      	ldrh	r3, [r7, #6]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e075      	b.n	800808a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d101      	bne.n	8007fac <HAL_UART_Transmit+0x3e>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e06e      	b.n	800808a <HAL_UART_Transmit+0x11c>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2221      	movs	r2, #33	; 0x21
 8007fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fc2:	f7fb fa05 	bl	80033d0 <HAL_GetTick>
 8007fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	88fa      	ldrh	r2, [r7, #6]
 8007fcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	88fa      	ldrh	r2, [r7, #6]
 8007fd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fdc:	d108      	bne.n	8007ff0 <HAL_UART_Transmit+0x82>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d104      	bne.n	8007ff0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	61bb      	str	r3, [r7, #24]
 8007fee:	e003      	b.n	8007ff8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008000:	e02a      	b.n	8008058 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2200      	movs	r2, #0
 800800a:	2180      	movs	r1, #128	; 0x80
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 fb1f 	bl	8008650 <UART_WaitOnFlagUntilTimeout>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e036      	b.n	800808a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10b      	bne.n	800803a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008030:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	3302      	adds	r3, #2
 8008036:	61bb      	str	r3, [r7, #24]
 8008038:	e007      	b.n	800804a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	781a      	ldrb	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	3301      	adds	r3, #1
 8008048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800804e:	b29b      	uxth	r3, r3
 8008050:	3b01      	subs	r3, #1
 8008052:	b29a      	uxth	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800805c:	b29b      	uxth	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1cf      	bne.n	8008002 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2200      	movs	r2, #0
 800806a:	2140      	movs	r1, #64	; 0x40
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 faef 	bl	8008650 <UART_WaitOnFlagUntilTimeout>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e006      	b.n	800808a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2220      	movs	r2, #32
 8008080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	e000      	b.n	800808a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008088:	2302      	movs	r3, #2
  }
}
 800808a:	4618      	mov	r0, r3
 800808c:	3720      	adds	r7, #32
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	4613      	mov	r3, r2
 800809e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b20      	cmp	r3, #32
 80080aa:	d11d      	bne.n	80080e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <HAL_UART_Receive_IT+0x26>
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e016      	b.n	80080ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <HAL_UART_Receive_IT+0x38>
 80080c6:	2302      	movs	r3, #2
 80080c8:	e00f      	b.n	80080ea <HAL_UART_Receive_IT+0x58>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080d8:	88fb      	ldrh	r3, [r7, #6]
 80080da:	461a      	mov	r2, r3
 80080dc:	68b9      	ldr	r1, [r7, #8]
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 fb24 	bl	800872c <UART_Start_Receive_IT>
 80080e4:	4603      	mov	r3, r0
 80080e6:	e000      	b.n	80080ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80080e8:	2302      	movs	r3, #2
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b0ba      	sub	sp, #232	; 0xe8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800811a:	2300      	movs	r3, #0
 800811c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008120:	2300      	movs	r3, #0
 8008122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812a:	f003 030f 	and.w	r3, r3, #15
 800812e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10f      	bne.n	800815a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800813a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813e:	f003 0320 	and.w	r3, r3, #32
 8008142:	2b00      	cmp	r3, #0
 8008144:	d009      	beq.n	800815a <HAL_UART_IRQHandler+0x66>
 8008146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fc03 	bl	800895e <UART_Receive_IT>
      return;
 8008158:	e256      	b.n	8008608 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800815a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 80de 	beq.w	8008320 <HAL_UART_IRQHandler+0x22c>
 8008164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d106      	bne.n	800817e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008174:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 80d1 	beq.w	8008320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800817e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <HAL_UART_IRQHandler+0xae>
 800818a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008192:	2b00      	cmp	r3, #0
 8008194:	d005      	beq.n	80081a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	f043 0201 	orr.w	r2, r3, #1
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a6:	f003 0304 	and.w	r3, r3, #4
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00b      	beq.n	80081c6 <HAL_UART_IRQHandler+0xd2>
 80081ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	f043 0202 	orr.w	r2, r3, #2
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00b      	beq.n	80081ea <HAL_UART_IRQHandler+0xf6>
 80081d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	f043 0204 	orr.w	r2, r3, #4
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80081ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ee:	f003 0308 	and.w	r3, r3, #8
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d011      	beq.n	800821a <HAL_UART_IRQHandler+0x126>
 80081f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d105      	bne.n	800820e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d005      	beq.n	800821a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	f043 0208 	orr.w	r2, r3, #8
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 81ed 	beq.w	80085fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	2b00      	cmp	r3, #0
 800822e:	d008      	beq.n	8008242 <HAL_UART_IRQHandler+0x14e>
 8008230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fb8e 	bl	800895e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824c:	2b40      	cmp	r3, #64	; 0x40
 800824e:	bf0c      	ite	eq
 8008250:	2301      	moveq	r3, #1
 8008252:	2300      	movne	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d103      	bne.n	800826e <HAL_UART_IRQHandler+0x17a>
 8008266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d04f      	beq.n	800830e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa96 	bl	80087a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827e:	2b40      	cmp	r3, #64	; 0x40
 8008280:	d141      	bne.n	8008306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3314      	adds	r3, #20
 8008288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800829c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3314      	adds	r3, #20
 80082aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1d9      	bne.n	8008282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d013      	beq.n	80082fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	4a7d      	ldr	r2, [pc, #500]	; (80084d0 <HAL_UART_IRQHandler+0x3dc>)
 80082dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fb ff3e 	bl	8004164 <HAL_DMA_Abort_IT>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d016      	beq.n	800831c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082fc:	e00e      	b.n	800831c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f990 	bl	8008624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008304:	e00a      	b.n	800831c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f98c 	bl	8008624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800830c:	e006      	b.n	800831c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f988 	bl	8008624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800831a:	e170      	b.n	80085fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831c:	bf00      	nop
    return;
 800831e:	e16e      	b.n	80085fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008324:	2b01      	cmp	r3, #1
 8008326:	f040 814a 	bne.w	80085be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800832a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832e:	f003 0310 	and.w	r3, r3, #16
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8143 	beq.w	80085be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 813c 	beq.w	80085be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008346:	2300      	movs	r3, #0
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	60bb      	str	r3, [r7, #8]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	60bb      	str	r3, [r7, #8]
 800835a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008366:	2b40      	cmp	r3, #64	; 0x40
 8008368:	f040 80b4 	bne.w	80084d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8140 	beq.w	8008602 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800838a:	429a      	cmp	r2, r3
 800838c:	f080 8139 	bcs.w	8008602 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008396:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a2:	f000 8088 	beq.w	80084b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	330c      	adds	r3, #12
 80083ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	330c      	adds	r3, #12
 80083ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80083d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1d9      	bne.n	80083a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3314      	adds	r3, #20
 80083f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008404:	f023 0301 	bic.w	r3, r3, #1
 8008408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3314      	adds	r3, #20
 8008412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800841a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800841e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e1      	bne.n	80083f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3314      	adds	r3, #20
 8008434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800843e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3314      	adds	r3, #20
 800844e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e3      	bne.n	800842e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	330c      	adds	r3, #12
 800847a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847e:	e853 3f00 	ldrex	r3, [r3]
 8008482:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008486:	f023 0310 	bic.w	r3, r3, #16
 800848a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	330c      	adds	r3, #12
 8008494:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008498:	65ba      	str	r2, [r7, #88]	; 0x58
 800849a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800849e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084a0:	e841 2300 	strex	r3, r2, [r1]
 80084a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1e3      	bne.n	8008474 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fb fde7 	bl	8004084 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084be:	b29b      	uxth	r3, r3
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f8b6 	bl	8008638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084cc:	e099      	b.n	8008602 <HAL_UART_IRQHandler+0x50e>
 80084ce:	bf00      	nop
 80084d0:	08008867 	.word	0x08008867
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084dc:	b29b      	uxth	r3, r3
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 808b 	beq.w	8008606 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80084f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 8086 	beq.w	8008606 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	330c      	adds	r3, #12
 8008500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	330c      	adds	r3, #12
 800851a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800851e:	647a      	str	r2, [r7, #68]	; 0x44
 8008520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e3      	bne.n	80084fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3314      	adds	r3, #20
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	623b      	str	r3, [r7, #32]
   return(result);
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	f023 0301 	bic.w	r3, r3, #1
 8008548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3314      	adds	r3, #20
 8008552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008556:	633a      	str	r2, [r7, #48]	; 0x30
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800855c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e3      	bne.n	8008532 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	330c      	adds	r3, #12
 800857e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	60fb      	str	r3, [r7, #12]
   return(result);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0310 	bic.w	r3, r3, #16
 800858e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	330c      	adds	r3, #12
 8008598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800859c:	61fa      	str	r2, [r7, #28]
 800859e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	69b9      	ldr	r1, [r7, #24]
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	e841 2300 	strex	r3, r2, [r1]
 80085a8:	617b      	str	r3, [r7, #20]
   return(result);
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e3      	bne.n	8008578 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f83e 	bl	8008638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085bc:	e023      	b.n	8008606 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <HAL_UART_IRQHandler+0x4ea>
 80085ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f959 	bl	800888e <UART_Transmit_IT>
    return;
 80085dc:	e014      	b.n	8008608 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00e      	beq.n	8008608 <HAL_UART_IRQHandler+0x514>
 80085ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d008      	beq.n	8008608 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f999 	bl	800892e <UART_EndTransmit_IT>
    return;
 80085fc:	e004      	b.n	8008608 <HAL_UART_IRQHandler+0x514>
    return;
 80085fe:	bf00      	nop
 8008600:	e002      	b.n	8008608 <HAL_UART_IRQHandler+0x514>
      return;
 8008602:	bf00      	nop
 8008604:	e000      	b.n	8008608 <HAL_UART_IRQHandler+0x514>
      return;
 8008606:	bf00      	nop
  }
}
 8008608:	37e8      	adds	r7, #232	; 0xe8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop

08008610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b090      	sub	sp, #64	; 0x40
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	603b      	str	r3, [r7, #0]
 800865c:	4613      	mov	r3, r2
 800865e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008660:	e050      	b.n	8008704 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008668:	d04c      	beq.n	8008704 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800866a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800866c:	2b00      	cmp	r3, #0
 800866e:	d007      	beq.n	8008680 <UART_WaitOnFlagUntilTimeout+0x30>
 8008670:	f7fa feae 	bl	80033d0 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800867c:	429a      	cmp	r2, r3
 800867e:	d241      	bcs.n	8008704 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	330c      	adds	r3, #12
 8008686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	330c      	adds	r3, #12
 800869e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086a0:	637a      	str	r2, [r7, #52]	; 0x34
 80086a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e5      	bne.n	8008680 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3314      	adds	r3, #20
 80086ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	e853 3f00 	ldrex	r3, [r3]
 80086c2:	613b      	str	r3, [r7, #16]
   return(result);
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f023 0301 	bic.w	r3, r3, #1
 80086ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3314      	adds	r3, #20
 80086d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086d4:	623a      	str	r2, [r7, #32]
 80086d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d8:	69f9      	ldr	r1, [r7, #28]
 80086da:	6a3a      	ldr	r2, [r7, #32]
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e5      	bne.n	80086b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2220      	movs	r2, #32
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e00f      	b.n	8008724 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	4013      	ands	r3, r2
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	429a      	cmp	r2, r3
 8008712:	bf0c      	ite	eq
 8008714:	2301      	moveq	r3, #1
 8008716:	2300      	movne	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	429a      	cmp	r2, r3
 8008720:	d09f      	beq.n	8008662 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3740      	adds	r7, #64	; 0x40
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	4613      	mov	r3, r2
 8008738:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	88fa      	ldrh	r2, [r7, #6]
 8008744:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	88fa      	ldrh	r2, [r7, #6]
 800874a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2222      	movs	r2, #34	; 0x22
 8008756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008770:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695a      	ldr	r2, [r3, #20]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f042 0201 	orr.w	r2, r2, #1
 8008780:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f042 0220 	orr.w	r2, r2, #32
 8008790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b095      	sub	sp, #84	; 0x54
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	330c      	adds	r3, #12
 80087ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	330c      	adds	r3, #12
 80087c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087c8:	643a      	str	r2, [r7, #64]	; 0x40
 80087ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3314      	adds	r3, #20
 80087e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	f023 0301 	bic.w	r3, r3, #1
 80087f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3314      	adds	r3, #20
 80087fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e5      	bne.n	80087dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	2b01      	cmp	r3, #1
 8008816:	d119      	bne.n	800884c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	330c      	adds	r3, #12
 800881e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	e853 3f00 	ldrex	r3, [r3]
 8008826:	60bb      	str	r3, [r7, #8]
   return(result);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f023 0310 	bic.w	r3, r3, #16
 800882e:	647b      	str	r3, [r7, #68]	; 0x44
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	330c      	adds	r3, #12
 8008836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008838:	61ba      	str	r2, [r7, #24]
 800883a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	6979      	ldr	r1, [r7, #20]
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	613b      	str	r3, [r7, #16]
   return(result);
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e5      	bne.n	8008818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2220      	movs	r2, #32
 8008850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	631a      	str	r2, [r3, #48]	; 0x30
}
 800885a:	bf00      	nop
 800885c:	3754      	adds	r7, #84	; 0x54
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f7ff fecf 	bl	8008624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800888e:	b480      	push	{r7}
 8008890:	b085      	sub	sp, #20
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b21      	cmp	r3, #33	; 0x21
 80088a0:	d13e      	bne.n	8008920 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088aa:	d114      	bne.n	80088d6 <UART_Transmit_IT+0x48>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d110      	bne.n	80088d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	1c9a      	adds	r2, r3, #2
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	621a      	str	r2, [r3, #32]
 80088d4:	e008      	b.n	80088e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	1c59      	adds	r1, r3, #1
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	6211      	str	r1, [r2, #32]
 80088e0:	781a      	ldrb	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	3b01      	subs	r3, #1
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	4619      	mov	r1, r3
 80088f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10f      	bne.n	800891c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800890a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800891a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	e000      	b.n	8008922 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008920:	2302      	movs	r3, #2
  }
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008944:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2220      	movs	r2, #32
 800894a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff fe5e 	bl	8008610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b08c      	sub	sp, #48	; 0x30
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b22      	cmp	r3, #34	; 0x22
 8008970:	f040 80ab 	bne.w	8008aca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800897c:	d117      	bne.n	80089ae <UART_Receive_IT+0x50>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d113      	bne.n	80089ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008986:	2300      	movs	r3, #0
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	b29b      	uxth	r3, r3
 8008998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899c:	b29a      	uxth	r2, r3
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a6:	1c9a      	adds	r2, r3, #2
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	629a      	str	r2, [r3, #40]	; 0x28
 80089ac:	e026      	b.n	80089fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80089b4:	2300      	movs	r3, #0
 80089b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089c0:	d007      	beq.n	80089d2 <UART_Receive_IT+0x74>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10a      	bne.n	80089e0 <UART_Receive_IT+0x82>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d106      	bne.n	80089e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	701a      	strb	r2, [r3, #0]
 80089de:	e008      	b.n	80089f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	3b01      	subs	r3, #1
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d15a      	bne.n	8008ac6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68da      	ldr	r2, [r3, #12]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f022 0220 	bic.w	r2, r2, #32
 8008a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	695a      	ldr	r2, [r3, #20]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0201 	bic.w	r2, r2, #1
 8008a3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d135      	bne.n	8008abc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	330c      	adds	r3, #12
 8008a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	613b      	str	r3, [r7, #16]
   return(result);
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f023 0310 	bic.w	r3, r3, #16
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	330c      	adds	r3, #12
 8008a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a76:	623a      	str	r2, [r7, #32]
 8008a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	69f9      	ldr	r1, [r7, #28]
 8008a7c:	6a3a      	ldr	r2, [r7, #32]
 8008a7e:	e841 2300 	strex	r3, r2, [r1]
 8008a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1e5      	bne.n	8008a56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0310 	and.w	r3, r3, #16
 8008a94:	2b10      	cmp	r3, #16
 8008a96:	d10a      	bne.n	8008aae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a98:	2300      	movs	r3, #0
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff fdbf 	bl	8008638 <HAL_UARTEx_RxEventCallback>
 8008aba:	e002      	b.n	8008ac2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7fa fb25 	bl	800310c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	e002      	b.n	8008acc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e000      	b.n	8008acc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008aca:	2302      	movs	r3, #2
  }
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3730      	adds	r7, #48	; 0x30
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad8:	b09f      	sub	sp, #124	; 0x7c
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aea:	68d9      	ldr	r1, [r3, #12]
 8008aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	ea40 0301 	orr.w	r3, r0, r1
 8008af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af8:	689a      	ldr	r2, [r3, #8]
 8008afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	431a      	orrs	r2, r3
 8008b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	431a      	orrs	r2, r3
 8008b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b18:	f021 010c 	bic.w	r1, r1, #12
 8008b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b22:	430b      	orrs	r3, r1
 8008b24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b32:	6999      	ldr	r1, [r3, #24]
 8008b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	ea40 0301 	orr.w	r3, r0, r1
 8008b3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4bc5      	ldr	r3, [pc, #788]	; (8008e58 <UART_SetConfig+0x384>)
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d004      	beq.n	8008b52 <UART_SetConfig+0x7e>
 8008b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	4bc3      	ldr	r3, [pc, #780]	; (8008e5c <UART_SetConfig+0x388>)
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d103      	bne.n	8008b5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b52:	f7fd fb83 	bl	800625c <HAL_RCC_GetPCLK2Freq>
 8008b56:	6778      	str	r0, [r7, #116]	; 0x74
 8008b58:	e002      	b.n	8008b60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b5a:	f7fd fb6b 	bl	8006234 <HAL_RCC_GetPCLK1Freq>
 8008b5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b68:	f040 80b6 	bne.w	8008cd8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b6e:	461c      	mov	r4, r3
 8008b70:	f04f 0500 	mov.w	r5, #0
 8008b74:	4622      	mov	r2, r4
 8008b76:	462b      	mov	r3, r5
 8008b78:	1891      	adds	r1, r2, r2
 8008b7a:	6439      	str	r1, [r7, #64]	; 0x40
 8008b7c:	415b      	adcs	r3, r3
 8008b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b84:	1912      	adds	r2, r2, r4
 8008b86:	eb45 0303 	adc.w	r3, r5, r3
 8008b8a:	f04f 0000 	mov.w	r0, #0
 8008b8e:	f04f 0100 	mov.w	r1, #0
 8008b92:	00d9      	lsls	r1, r3, #3
 8008b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b98:	00d0      	lsls	r0, r2, #3
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	1911      	adds	r1, r2, r4
 8008ba0:	6639      	str	r1, [r7, #96]	; 0x60
 8008ba2:	416b      	adcs	r3, r5
 8008ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	461a      	mov	r2, r3
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	1891      	adds	r1, r2, r2
 8008bb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bb4:	415b      	adcs	r3, r3
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008bc0:	f7f7 ff74 	bl	8000aac <__aeabi_uldivmod>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4ba5      	ldr	r3, [pc, #660]	; (8008e60 <UART_SetConfig+0x38c>)
 8008bca:	fba3 2302 	umull	r2, r3, r3, r2
 8008bce:	095b      	lsrs	r3, r3, #5
 8008bd0:	011e      	lsls	r6, r3, #4
 8008bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd4:	461c      	mov	r4, r3
 8008bd6:	f04f 0500 	mov.w	r5, #0
 8008bda:	4622      	mov	r2, r4
 8008bdc:	462b      	mov	r3, r5
 8008bde:	1891      	adds	r1, r2, r2
 8008be0:	6339      	str	r1, [r7, #48]	; 0x30
 8008be2:	415b      	adcs	r3, r3
 8008be4:	637b      	str	r3, [r7, #52]	; 0x34
 8008be6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008bea:	1912      	adds	r2, r2, r4
 8008bec:	eb45 0303 	adc.w	r3, r5, r3
 8008bf0:	f04f 0000 	mov.w	r0, #0
 8008bf4:	f04f 0100 	mov.w	r1, #0
 8008bf8:	00d9      	lsls	r1, r3, #3
 8008bfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bfe:	00d0      	lsls	r0, r2, #3
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	1911      	adds	r1, r2, r4
 8008c06:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c08:	416b      	adcs	r3, r5
 8008c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	461a      	mov	r2, r3
 8008c12:	f04f 0300 	mov.w	r3, #0
 8008c16:	1891      	adds	r1, r2, r2
 8008c18:	62b9      	str	r1, [r7, #40]	; 0x28
 8008c1a:	415b      	adcs	r3, r3
 8008c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008c26:	f7f7 ff41 	bl	8000aac <__aeabi_uldivmod>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4b8c      	ldr	r3, [pc, #560]	; (8008e60 <UART_SetConfig+0x38c>)
 8008c30:	fba3 1302 	umull	r1, r3, r3, r2
 8008c34:	095b      	lsrs	r3, r3, #5
 8008c36:	2164      	movs	r1, #100	; 0x64
 8008c38:	fb01 f303 	mul.w	r3, r1, r3
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	3332      	adds	r3, #50	; 0x32
 8008c42:	4a87      	ldr	r2, [pc, #540]	; (8008e60 <UART_SetConfig+0x38c>)
 8008c44:	fba2 2303 	umull	r2, r3, r2, r3
 8008c48:	095b      	lsrs	r3, r3, #5
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c50:	441e      	add	r6, r3
 8008c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c54:	4618      	mov	r0, r3
 8008c56:	f04f 0100 	mov.w	r1, #0
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	1894      	adds	r4, r2, r2
 8008c60:	623c      	str	r4, [r7, #32]
 8008c62:	415b      	adcs	r3, r3
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
 8008c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c6a:	1812      	adds	r2, r2, r0
 8008c6c:	eb41 0303 	adc.w	r3, r1, r3
 8008c70:	f04f 0400 	mov.w	r4, #0
 8008c74:	f04f 0500 	mov.w	r5, #0
 8008c78:	00dd      	lsls	r5, r3, #3
 8008c7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c7e:	00d4      	lsls	r4, r2, #3
 8008c80:	4622      	mov	r2, r4
 8008c82:	462b      	mov	r3, r5
 8008c84:	1814      	adds	r4, r2, r0
 8008c86:	653c      	str	r4, [r7, #80]	; 0x50
 8008c88:	414b      	adcs	r3, r1
 8008c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	461a      	mov	r2, r3
 8008c92:	f04f 0300 	mov.w	r3, #0
 8008c96:	1891      	adds	r1, r2, r2
 8008c98:	61b9      	str	r1, [r7, #24]
 8008c9a:	415b      	adcs	r3, r3
 8008c9c:	61fb      	str	r3, [r7, #28]
 8008c9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ca2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008ca6:	f7f7 ff01 	bl	8000aac <__aeabi_uldivmod>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4b6c      	ldr	r3, [pc, #432]	; (8008e60 <UART_SetConfig+0x38c>)
 8008cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8008cb4:	095b      	lsrs	r3, r3, #5
 8008cb6:	2164      	movs	r1, #100	; 0x64
 8008cb8:	fb01 f303 	mul.w	r3, r1, r3
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	3332      	adds	r3, #50	; 0x32
 8008cc2:	4a67      	ldr	r2, [pc, #412]	; (8008e60 <UART_SetConfig+0x38c>)
 8008cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc8:	095b      	lsrs	r3, r3, #5
 8008cca:	f003 0207 	and.w	r2, r3, #7
 8008cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4432      	add	r2, r6
 8008cd4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cd6:	e0b9      	b.n	8008e4c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cda:	461c      	mov	r4, r3
 8008cdc:	f04f 0500 	mov.w	r5, #0
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	462b      	mov	r3, r5
 8008ce4:	1891      	adds	r1, r2, r2
 8008ce6:	6139      	str	r1, [r7, #16]
 8008ce8:	415b      	adcs	r3, r3
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cf0:	1912      	adds	r2, r2, r4
 8008cf2:	eb45 0303 	adc.w	r3, r5, r3
 8008cf6:	f04f 0000 	mov.w	r0, #0
 8008cfa:	f04f 0100 	mov.w	r1, #0
 8008cfe:	00d9      	lsls	r1, r3, #3
 8008d00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d04:	00d0      	lsls	r0, r2, #3
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	eb12 0804 	adds.w	r8, r2, r4
 8008d0e:	eb43 0905 	adc.w	r9, r3, r5
 8008d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f04f 0100 	mov.w	r1, #0
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	f04f 0300 	mov.w	r3, #0
 8008d24:	008b      	lsls	r3, r1, #2
 8008d26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d2a:	0082      	lsls	r2, r0, #2
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	4649      	mov	r1, r9
 8008d30:	f7f7 febc 	bl	8000aac <__aeabi_uldivmod>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4b49      	ldr	r3, [pc, #292]	; (8008e60 <UART_SetConfig+0x38c>)
 8008d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d3e:	095b      	lsrs	r3, r3, #5
 8008d40:	011e      	lsls	r6, r3, #4
 8008d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d44:	4618      	mov	r0, r3
 8008d46:	f04f 0100 	mov.w	r1, #0
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	1894      	adds	r4, r2, r2
 8008d50:	60bc      	str	r4, [r7, #8]
 8008d52:	415b      	adcs	r3, r3
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d5a:	1812      	adds	r2, r2, r0
 8008d5c:	eb41 0303 	adc.w	r3, r1, r3
 8008d60:	f04f 0400 	mov.w	r4, #0
 8008d64:	f04f 0500 	mov.w	r5, #0
 8008d68:	00dd      	lsls	r5, r3, #3
 8008d6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d6e:	00d4      	lsls	r4, r2, #3
 8008d70:	4622      	mov	r2, r4
 8008d72:	462b      	mov	r3, r5
 8008d74:	1814      	adds	r4, r2, r0
 8008d76:	64bc      	str	r4, [r7, #72]	; 0x48
 8008d78:	414b      	adcs	r3, r1
 8008d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f04f 0100 	mov.w	r1, #0
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	f04f 0300 	mov.w	r3, #0
 8008d8e:	008b      	lsls	r3, r1, #2
 8008d90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d94:	0082      	lsls	r2, r0, #2
 8008d96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008d9a:	f7f7 fe87 	bl	8000aac <__aeabi_uldivmod>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4b2f      	ldr	r3, [pc, #188]	; (8008e60 <UART_SetConfig+0x38c>)
 8008da4:	fba3 1302 	umull	r1, r3, r3, r2
 8008da8:	095b      	lsrs	r3, r3, #5
 8008daa:	2164      	movs	r1, #100	; 0x64
 8008dac:	fb01 f303 	mul.w	r3, r1, r3
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	011b      	lsls	r3, r3, #4
 8008db4:	3332      	adds	r3, #50	; 0x32
 8008db6:	4a2a      	ldr	r2, [pc, #168]	; (8008e60 <UART_SetConfig+0x38c>)
 8008db8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dc2:	441e      	add	r6, r3
 8008dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f04f 0100 	mov.w	r1, #0
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	1894      	adds	r4, r2, r2
 8008dd2:	603c      	str	r4, [r7, #0]
 8008dd4:	415b      	adcs	r3, r3
 8008dd6:	607b      	str	r3, [r7, #4]
 8008dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ddc:	1812      	adds	r2, r2, r0
 8008dde:	eb41 0303 	adc.w	r3, r1, r3
 8008de2:	f04f 0400 	mov.w	r4, #0
 8008de6:	f04f 0500 	mov.w	r5, #0
 8008dea:	00dd      	lsls	r5, r3, #3
 8008dec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008df0:	00d4      	lsls	r4, r2, #3
 8008df2:	4622      	mov	r2, r4
 8008df4:	462b      	mov	r3, r5
 8008df6:	eb12 0a00 	adds.w	sl, r2, r0
 8008dfa:	eb43 0b01 	adc.w	fp, r3, r1
 8008dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f04f 0100 	mov.w	r1, #0
 8008e08:	f04f 0200 	mov.w	r2, #0
 8008e0c:	f04f 0300 	mov.w	r3, #0
 8008e10:	008b      	lsls	r3, r1, #2
 8008e12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e16:	0082      	lsls	r2, r0, #2
 8008e18:	4650      	mov	r0, sl
 8008e1a:	4659      	mov	r1, fp
 8008e1c:	f7f7 fe46 	bl	8000aac <__aeabi_uldivmod>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <UART_SetConfig+0x38c>)
 8008e26:	fba3 1302 	umull	r1, r3, r3, r2
 8008e2a:	095b      	lsrs	r3, r3, #5
 8008e2c:	2164      	movs	r1, #100	; 0x64
 8008e2e:	fb01 f303 	mul.w	r3, r1, r3
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	011b      	lsls	r3, r3, #4
 8008e36:	3332      	adds	r3, #50	; 0x32
 8008e38:	4a09      	ldr	r2, [pc, #36]	; (8008e60 <UART_SetConfig+0x38c>)
 8008e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3e:	095b      	lsrs	r3, r3, #5
 8008e40:	f003 020f 	and.w	r2, r3, #15
 8008e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4432      	add	r2, r6
 8008e4a:	609a      	str	r2, [r3, #8]
}
 8008e4c:	bf00      	nop
 8008e4e:	377c      	adds	r7, #124	; 0x7c
 8008e50:	46bd      	mov	sp, r7
 8008e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e56:	bf00      	nop
 8008e58:	40011000 	.word	0x40011000
 8008e5c:	40011400 	.word	0x40011400
 8008e60:	51eb851f 	.word	0x51eb851f

08008e64 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	4b20      	ldr	r3, [pc, #128]	; (8008f04 <FSMC_NORSRAM_Init+0xa0>)
 8008e82:	4013      	ands	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008e8e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008e94:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008e9a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008ea0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8008ea6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008eac:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008eb2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008eb8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008ebe:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008ec4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8008eca:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008ed0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	2b08      	cmp	r3, #8
 8008ede:	d103      	bne.n	8008ee8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ee6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68f9      	ldr	r1, [r7, #12]
 8008ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	fff00080 	.word	0xfff00080

08008f08 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f22:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008f2a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f36:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008f3e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008f46:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f50:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	3b02      	subs	r3, #2
 8008f58:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008f5a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f60:	4313      	orrs	r3, r2
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6979      	ldr	r1, [r7, #20]
 8008f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
	...

08008f84 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f9c:	d122      	bne.n	8008fe4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	4b15      	ldr	r3, [pc, #84]	; (8009000 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008fac:	4013      	ands	r3, r2
 8008fae:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008fba:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008fc2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008fca:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008fd0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	6979      	ldr	r1, [r7, #20]
 8008fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008fe2:	e005      	b.n	8008ff0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	cff00000 	.word	0xcff00000

08009004 <__errno>:
 8009004:	4b01      	ldr	r3, [pc, #4]	; (800900c <__errno+0x8>)
 8009006:	6818      	ldr	r0, [r3, #0]
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	2000001c 	.word	0x2000001c

08009010 <__libc_init_array>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	4d0d      	ldr	r5, [pc, #52]	; (8009048 <__libc_init_array+0x38>)
 8009014:	4c0d      	ldr	r4, [pc, #52]	; (800904c <__libc_init_array+0x3c>)
 8009016:	1b64      	subs	r4, r4, r5
 8009018:	10a4      	asrs	r4, r4, #2
 800901a:	2600      	movs	r6, #0
 800901c:	42a6      	cmp	r6, r4
 800901e:	d109      	bne.n	8009034 <__libc_init_array+0x24>
 8009020:	4d0b      	ldr	r5, [pc, #44]	; (8009050 <__libc_init_array+0x40>)
 8009022:	4c0c      	ldr	r4, [pc, #48]	; (8009054 <__libc_init_array+0x44>)
 8009024:	f000 fc4e 	bl	80098c4 <_init>
 8009028:	1b64      	subs	r4, r4, r5
 800902a:	10a4      	asrs	r4, r4, #2
 800902c:	2600      	movs	r6, #0
 800902e:	42a6      	cmp	r6, r4
 8009030:	d105      	bne.n	800903e <__libc_init_array+0x2e>
 8009032:	bd70      	pop	{r4, r5, r6, pc}
 8009034:	f855 3b04 	ldr.w	r3, [r5], #4
 8009038:	4798      	blx	r3
 800903a:	3601      	adds	r6, #1
 800903c:	e7ee      	b.n	800901c <__libc_init_array+0xc>
 800903e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009042:	4798      	blx	r3
 8009044:	3601      	adds	r6, #1
 8009046:	e7f2      	b.n	800902e <__libc_init_array+0x1e>
 8009048:	0800c934 	.word	0x0800c934
 800904c:	0800c934 	.word	0x0800c934
 8009050:	0800c934 	.word	0x0800c934
 8009054:	0800c938 	.word	0x0800c938

08009058 <memset>:
 8009058:	4402      	add	r2, r0
 800905a:	4603      	mov	r3, r0
 800905c:	4293      	cmp	r3, r2
 800905e:	d100      	bne.n	8009062 <memset+0xa>
 8009060:	4770      	bx	lr
 8009062:	f803 1b01 	strb.w	r1, [r3], #1
 8009066:	e7f9      	b.n	800905c <memset+0x4>

08009068 <siprintf>:
 8009068:	b40e      	push	{r1, r2, r3}
 800906a:	b500      	push	{lr}
 800906c:	b09c      	sub	sp, #112	; 0x70
 800906e:	ab1d      	add	r3, sp, #116	; 0x74
 8009070:	9002      	str	r0, [sp, #8]
 8009072:	9006      	str	r0, [sp, #24]
 8009074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009078:	4809      	ldr	r0, [pc, #36]	; (80090a0 <siprintf+0x38>)
 800907a:	9107      	str	r1, [sp, #28]
 800907c:	9104      	str	r1, [sp, #16]
 800907e:	4909      	ldr	r1, [pc, #36]	; (80090a4 <siprintf+0x3c>)
 8009080:	f853 2b04 	ldr.w	r2, [r3], #4
 8009084:	9105      	str	r1, [sp, #20]
 8009086:	6800      	ldr	r0, [r0, #0]
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	a902      	add	r1, sp, #8
 800908c:	f000 f868 	bl	8009160 <_svfiprintf_r>
 8009090:	9b02      	ldr	r3, [sp, #8]
 8009092:	2200      	movs	r2, #0
 8009094:	701a      	strb	r2, [r3, #0]
 8009096:	b01c      	add	sp, #112	; 0x70
 8009098:	f85d eb04 	ldr.w	lr, [sp], #4
 800909c:	b003      	add	sp, #12
 800909e:	4770      	bx	lr
 80090a0:	2000001c 	.word	0x2000001c
 80090a4:	ffff0208 	.word	0xffff0208

080090a8 <__ssputs_r>:
 80090a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ac:	688e      	ldr	r6, [r1, #8]
 80090ae:	429e      	cmp	r6, r3
 80090b0:	4682      	mov	sl, r0
 80090b2:	460c      	mov	r4, r1
 80090b4:	4690      	mov	r8, r2
 80090b6:	461f      	mov	r7, r3
 80090b8:	d838      	bhi.n	800912c <__ssputs_r+0x84>
 80090ba:	898a      	ldrh	r2, [r1, #12]
 80090bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090c0:	d032      	beq.n	8009128 <__ssputs_r+0x80>
 80090c2:	6825      	ldr	r5, [r4, #0]
 80090c4:	6909      	ldr	r1, [r1, #16]
 80090c6:	eba5 0901 	sub.w	r9, r5, r1
 80090ca:	6965      	ldr	r5, [r4, #20]
 80090cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090d4:	3301      	adds	r3, #1
 80090d6:	444b      	add	r3, r9
 80090d8:	106d      	asrs	r5, r5, #1
 80090da:	429d      	cmp	r5, r3
 80090dc:	bf38      	it	cc
 80090de:	461d      	movcc	r5, r3
 80090e0:	0553      	lsls	r3, r2, #21
 80090e2:	d531      	bpl.n	8009148 <__ssputs_r+0xa0>
 80090e4:	4629      	mov	r1, r5
 80090e6:	f000 fb47 	bl	8009778 <_malloc_r>
 80090ea:	4606      	mov	r6, r0
 80090ec:	b950      	cbnz	r0, 8009104 <__ssputs_r+0x5c>
 80090ee:	230c      	movs	r3, #12
 80090f0:	f8ca 3000 	str.w	r3, [sl]
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090fa:	81a3      	strh	r3, [r4, #12]
 80090fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009104:	6921      	ldr	r1, [r4, #16]
 8009106:	464a      	mov	r2, r9
 8009108:	f000 fabe 	bl	8009688 <memcpy>
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	6126      	str	r6, [r4, #16]
 800911a:	6165      	str	r5, [r4, #20]
 800911c:	444e      	add	r6, r9
 800911e:	eba5 0509 	sub.w	r5, r5, r9
 8009122:	6026      	str	r6, [r4, #0]
 8009124:	60a5      	str	r5, [r4, #8]
 8009126:	463e      	mov	r6, r7
 8009128:	42be      	cmp	r6, r7
 800912a:	d900      	bls.n	800912e <__ssputs_r+0x86>
 800912c:	463e      	mov	r6, r7
 800912e:	4632      	mov	r2, r6
 8009130:	6820      	ldr	r0, [r4, #0]
 8009132:	4641      	mov	r1, r8
 8009134:	f000 fab6 	bl	80096a4 <memmove>
 8009138:	68a3      	ldr	r3, [r4, #8]
 800913a:	6822      	ldr	r2, [r4, #0]
 800913c:	1b9b      	subs	r3, r3, r6
 800913e:	4432      	add	r2, r6
 8009140:	60a3      	str	r3, [r4, #8]
 8009142:	6022      	str	r2, [r4, #0]
 8009144:	2000      	movs	r0, #0
 8009146:	e7db      	b.n	8009100 <__ssputs_r+0x58>
 8009148:	462a      	mov	r2, r5
 800914a:	f000 fb6f 	bl	800982c <_realloc_r>
 800914e:	4606      	mov	r6, r0
 8009150:	2800      	cmp	r0, #0
 8009152:	d1e1      	bne.n	8009118 <__ssputs_r+0x70>
 8009154:	6921      	ldr	r1, [r4, #16]
 8009156:	4650      	mov	r0, sl
 8009158:	f000 fabe 	bl	80096d8 <_free_r>
 800915c:	e7c7      	b.n	80090ee <__ssputs_r+0x46>
	...

08009160 <_svfiprintf_r>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	4698      	mov	r8, r3
 8009166:	898b      	ldrh	r3, [r1, #12]
 8009168:	061b      	lsls	r3, r3, #24
 800916a:	b09d      	sub	sp, #116	; 0x74
 800916c:	4607      	mov	r7, r0
 800916e:	460d      	mov	r5, r1
 8009170:	4614      	mov	r4, r2
 8009172:	d50e      	bpl.n	8009192 <_svfiprintf_r+0x32>
 8009174:	690b      	ldr	r3, [r1, #16]
 8009176:	b963      	cbnz	r3, 8009192 <_svfiprintf_r+0x32>
 8009178:	2140      	movs	r1, #64	; 0x40
 800917a:	f000 fafd 	bl	8009778 <_malloc_r>
 800917e:	6028      	str	r0, [r5, #0]
 8009180:	6128      	str	r0, [r5, #16]
 8009182:	b920      	cbnz	r0, 800918e <_svfiprintf_r+0x2e>
 8009184:	230c      	movs	r3, #12
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	f04f 30ff 	mov.w	r0, #4294967295
 800918c:	e0d1      	b.n	8009332 <_svfiprintf_r+0x1d2>
 800918e:	2340      	movs	r3, #64	; 0x40
 8009190:	616b      	str	r3, [r5, #20]
 8009192:	2300      	movs	r3, #0
 8009194:	9309      	str	r3, [sp, #36]	; 0x24
 8009196:	2320      	movs	r3, #32
 8009198:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800919c:	f8cd 800c 	str.w	r8, [sp, #12]
 80091a0:	2330      	movs	r3, #48	; 0x30
 80091a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800934c <_svfiprintf_r+0x1ec>
 80091a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091aa:	f04f 0901 	mov.w	r9, #1
 80091ae:	4623      	mov	r3, r4
 80091b0:	469a      	mov	sl, r3
 80091b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b6:	b10a      	cbz	r2, 80091bc <_svfiprintf_r+0x5c>
 80091b8:	2a25      	cmp	r2, #37	; 0x25
 80091ba:	d1f9      	bne.n	80091b0 <_svfiprintf_r+0x50>
 80091bc:	ebba 0b04 	subs.w	fp, sl, r4
 80091c0:	d00b      	beq.n	80091da <_svfiprintf_r+0x7a>
 80091c2:	465b      	mov	r3, fp
 80091c4:	4622      	mov	r2, r4
 80091c6:	4629      	mov	r1, r5
 80091c8:	4638      	mov	r0, r7
 80091ca:	f7ff ff6d 	bl	80090a8 <__ssputs_r>
 80091ce:	3001      	adds	r0, #1
 80091d0:	f000 80aa 	beq.w	8009328 <_svfiprintf_r+0x1c8>
 80091d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d6:	445a      	add	r2, fp
 80091d8:	9209      	str	r2, [sp, #36]	; 0x24
 80091da:	f89a 3000 	ldrb.w	r3, [sl]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 80a2 	beq.w	8009328 <_svfiprintf_r+0x1c8>
 80091e4:	2300      	movs	r3, #0
 80091e6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ee:	f10a 0a01 	add.w	sl, sl, #1
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	9307      	str	r3, [sp, #28]
 80091f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091fa:	931a      	str	r3, [sp, #104]	; 0x68
 80091fc:	4654      	mov	r4, sl
 80091fe:	2205      	movs	r2, #5
 8009200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009204:	4851      	ldr	r0, [pc, #324]	; (800934c <_svfiprintf_r+0x1ec>)
 8009206:	f7f6 ffe3 	bl	80001d0 <memchr>
 800920a:	9a04      	ldr	r2, [sp, #16]
 800920c:	b9d8      	cbnz	r0, 8009246 <_svfiprintf_r+0xe6>
 800920e:	06d0      	lsls	r0, r2, #27
 8009210:	bf44      	itt	mi
 8009212:	2320      	movmi	r3, #32
 8009214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009218:	0711      	lsls	r1, r2, #28
 800921a:	bf44      	itt	mi
 800921c:	232b      	movmi	r3, #43	; 0x2b
 800921e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009222:	f89a 3000 	ldrb.w	r3, [sl]
 8009226:	2b2a      	cmp	r3, #42	; 0x2a
 8009228:	d015      	beq.n	8009256 <_svfiprintf_r+0xf6>
 800922a:	9a07      	ldr	r2, [sp, #28]
 800922c:	4654      	mov	r4, sl
 800922e:	2000      	movs	r0, #0
 8009230:	f04f 0c0a 	mov.w	ip, #10
 8009234:	4621      	mov	r1, r4
 8009236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800923a:	3b30      	subs	r3, #48	; 0x30
 800923c:	2b09      	cmp	r3, #9
 800923e:	d94e      	bls.n	80092de <_svfiprintf_r+0x17e>
 8009240:	b1b0      	cbz	r0, 8009270 <_svfiprintf_r+0x110>
 8009242:	9207      	str	r2, [sp, #28]
 8009244:	e014      	b.n	8009270 <_svfiprintf_r+0x110>
 8009246:	eba0 0308 	sub.w	r3, r0, r8
 800924a:	fa09 f303 	lsl.w	r3, r9, r3
 800924e:	4313      	orrs	r3, r2
 8009250:	9304      	str	r3, [sp, #16]
 8009252:	46a2      	mov	sl, r4
 8009254:	e7d2      	b.n	80091fc <_svfiprintf_r+0x9c>
 8009256:	9b03      	ldr	r3, [sp, #12]
 8009258:	1d19      	adds	r1, r3, #4
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	9103      	str	r1, [sp, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	bfbb      	ittet	lt
 8009262:	425b      	neglt	r3, r3
 8009264:	f042 0202 	orrlt.w	r2, r2, #2
 8009268:	9307      	strge	r3, [sp, #28]
 800926a:	9307      	strlt	r3, [sp, #28]
 800926c:	bfb8      	it	lt
 800926e:	9204      	strlt	r2, [sp, #16]
 8009270:	7823      	ldrb	r3, [r4, #0]
 8009272:	2b2e      	cmp	r3, #46	; 0x2e
 8009274:	d10c      	bne.n	8009290 <_svfiprintf_r+0x130>
 8009276:	7863      	ldrb	r3, [r4, #1]
 8009278:	2b2a      	cmp	r3, #42	; 0x2a
 800927a:	d135      	bne.n	80092e8 <_svfiprintf_r+0x188>
 800927c:	9b03      	ldr	r3, [sp, #12]
 800927e:	1d1a      	adds	r2, r3, #4
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	9203      	str	r2, [sp, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	bfb8      	it	lt
 8009288:	f04f 33ff 	movlt.w	r3, #4294967295
 800928c:	3402      	adds	r4, #2
 800928e:	9305      	str	r3, [sp, #20]
 8009290:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800935c <_svfiprintf_r+0x1fc>
 8009294:	7821      	ldrb	r1, [r4, #0]
 8009296:	2203      	movs	r2, #3
 8009298:	4650      	mov	r0, sl
 800929a:	f7f6 ff99 	bl	80001d0 <memchr>
 800929e:	b140      	cbz	r0, 80092b2 <_svfiprintf_r+0x152>
 80092a0:	2340      	movs	r3, #64	; 0x40
 80092a2:	eba0 000a 	sub.w	r0, r0, sl
 80092a6:	fa03 f000 	lsl.w	r0, r3, r0
 80092aa:	9b04      	ldr	r3, [sp, #16]
 80092ac:	4303      	orrs	r3, r0
 80092ae:	3401      	adds	r4, #1
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b6:	4826      	ldr	r0, [pc, #152]	; (8009350 <_svfiprintf_r+0x1f0>)
 80092b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092bc:	2206      	movs	r2, #6
 80092be:	f7f6 ff87 	bl	80001d0 <memchr>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d038      	beq.n	8009338 <_svfiprintf_r+0x1d8>
 80092c6:	4b23      	ldr	r3, [pc, #140]	; (8009354 <_svfiprintf_r+0x1f4>)
 80092c8:	bb1b      	cbnz	r3, 8009312 <_svfiprintf_r+0x1b2>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	3307      	adds	r3, #7
 80092ce:	f023 0307 	bic.w	r3, r3, #7
 80092d2:	3308      	adds	r3, #8
 80092d4:	9303      	str	r3, [sp, #12]
 80092d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d8:	4433      	add	r3, r6
 80092da:	9309      	str	r3, [sp, #36]	; 0x24
 80092dc:	e767      	b.n	80091ae <_svfiprintf_r+0x4e>
 80092de:	fb0c 3202 	mla	r2, ip, r2, r3
 80092e2:	460c      	mov	r4, r1
 80092e4:	2001      	movs	r0, #1
 80092e6:	e7a5      	b.n	8009234 <_svfiprintf_r+0xd4>
 80092e8:	2300      	movs	r3, #0
 80092ea:	3401      	adds	r4, #1
 80092ec:	9305      	str	r3, [sp, #20]
 80092ee:	4619      	mov	r1, r3
 80092f0:	f04f 0c0a 	mov.w	ip, #10
 80092f4:	4620      	mov	r0, r4
 80092f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092fa:	3a30      	subs	r2, #48	; 0x30
 80092fc:	2a09      	cmp	r2, #9
 80092fe:	d903      	bls.n	8009308 <_svfiprintf_r+0x1a8>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d0c5      	beq.n	8009290 <_svfiprintf_r+0x130>
 8009304:	9105      	str	r1, [sp, #20]
 8009306:	e7c3      	b.n	8009290 <_svfiprintf_r+0x130>
 8009308:	fb0c 2101 	mla	r1, ip, r1, r2
 800930c:	4604      	mov	r4, r0
 800930e:	2301      	movs	r3, #1
 8009310:	e7f0      	b.n	80092f4 <_svfiprintf_r+0x194>
 8009312:	ab03      	add	r3, sp, #12
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	462a      	mov	r2, r5
 8009318:	4b0f      	ldr	r3, [pc, #60]	; (8009358 <_svfiprintf_r+0x1f8>)
 800931a:	a904      	add	r1, sp, #16
 800931c:	4638      	mov	r0, r7
 800931e:	f3af 8000 	nop.w
 8009322:	1c42      	adds	r2, r0, #1
 8009324:	4606      	mov	r6, r0
 8009326:	d1d6      	bne.n	80092d6 <_svfiprintf_r+0x176>
 8009328:	89ab      	ldrh	r3, [r5, #12]
 800932a:	065b      	lsls	r3, r3, #25
 800932c:	f53f af2c 	bmi.w	8009188 <_svfiprintf_r+0x28>
 8009330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009332:	b01d      	add	sp, #116	; 0x74
 8009334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009338:	ab03      	add	r3, sp, #12
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	462a      	mov	r2, r5
 800933e:	4b06      	ldr	r3, [pc, #24]	; (8009358 <_svfiprintf_r+0x1f8>)
 8009340:	a904      	add	r1, sp, #16
 8009342:	4638      	mov	r0, r7
 8009344:	f000 f87a 	bl	800943c <_printf_i>
 8009348:	e7eb      	b.n	8009322 <_svfiprintf_r+0x1c2>
 800934a:	bf00      	nop
 800934c:	0800c8f8 	.word	0x0800c8f8
 8009350:	0800c902 	.word	0x0800c902
 8009354:	00000000 	.word	0x00000000
 8009358:	080090a9 	.word	0x080090a9
 800935c:	0800c8fe 	.word	0x0800c8fe

08009360 <_printf_common>:
 8009360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009364:	4616      	mov	r6, r2
 8009366:	4699      	mov	r9, r3
 8009368:	688a      	ldr	r2, [r1, #8]
 800936a:	690b      	ldr	r3, [r1, #16]
 800936c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009370:	4293      	cmp	r3, r2
 8009372:	bfb8      	it	lt
 8009374:	4613      	movlt	r3, r2
 8009376:	6033      	str	r3, [r6, #0]
 8009378:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800937c:	4607      	mov	r7, r0
 800937e:	460c      	mov	r4, r1
 8009380:	b10a      	cbz	r2, 8009386 <_printf_common+0x26>
 8009382:	3301      	adds	r3, #1
 8009384:	6033      	str	r3, [r6, #0]
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	0699      	lsls	r1, r3, #26
 800938a:	bf42      	ittt	mi
 800938c:	6833      	ldrmi	r3, [r6, #0]
 800938e:	3302      	addmi	r3, #2
 8009390:	6033      	strmi	r3, [r6, #0]
 8009392:	6825      	ldr	r5, [r4, #0]
 8009394:	f015 0506 	ands.w	r5, r5, #6
 8009398:	d106      	bne.n	80093a8 <_printf_common+0x48>
 800939a:	f104 0a19 	add.w	sl, r4, #25
 800939e:	68e3      	ldr	r3, [r4, #12]
 80093a0:	6832      	ldr	r2, [r6, #0]
 80093a2:	1a9b      	subs	r3, r3, r2
 80093a4:	42ab      	cmp	r3, r5
 80093a6:	dc26      	bgt.n	80093f6 <_printf_common+0x96>
 80093a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093ac:	1e13      	subs	r3, r2, #0
 80093ae:	6822      	ldr	r2, [r4, #0]
 80093b0:	bf18      	it	ne
 80093b2:	2301      	movne	r3, #1
 80093b4:	0692      	lsls	r2, r2, #26
 80093b6:	d42b      	bmi.n	8009410 <_printf_common+0xb0>
 80093b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093bc:	4649      	mov	r1, r9
 80093be:	4638      	mov	r0, r7
 80093c0:	47c0      	blx	r8
 80093c2:	3001      	adds	r0, #1
 80093c4:	d01e      	beq.n	8009404 <_printf_common+0xa4>
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	68e5      	ldr	r5, [r4, #12]
 80093ca:	6832      	ldr	r2, [r6, #0]
 80093cc:	f003 0306 	and.w	r3, r3, #6
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	bf08      	it	eq
 80093d4:	1aad      	subeq	r5, r5, r2
 80093d6:	68a3      	ldr	r3, [r4, #8]
 80093d8:	6922      	ldr	r2, [r4, #16]
 80093da:	bf0c      	ite	eq
 80093dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093e0:	2500      	movne	r5, #0
 80093e2:	4293      	cmp	r3, r2
 80093e4:	bfc4      	itt	gt
 80093e6:	1a9b      	subgt	r3, r3, r2
 80093e8:	18ed      	addgt	r5, r5, r3
 80093ea:	2600      	movs	r6, #0
 80093ec:	341a      	adds	r4, #26
 80093ee:	42b5      	cmp	r5, r6
 80093f0:	d11a      	bne.n	8009428 <_printf_common+0xc8>
 80093f2:	2000      	movs	r0, #0
 80093f4:	e008      	b.n	8009408 <_printf_common+0xa8>
 80093f6:	2301      	movs	r3, #1
 80093f8:	4652      	mov	r2, sl
 80093fa:	4649      	mov	r1, r9
 80093fc:	4638      	mov	r0, r7
 80093fe:	47c0      	blx	r8
 8009400:	3001      	adds	r0, #1
 8009402:	d103      	bne.n	800940c <_printf_common+0xac>
 8009404:	f04f 30ff 	mov.w	r0, #4294967295
 8009408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940c:	3501      	adds	r5, #1
 800940e:	e7c6      	b.n	800939e <_printf_common+0x3e>
 8009410:	18e1      	adds	r1, r4, r3
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	2030      	movs	r0, #48	; 0x30
 8009416:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800941a:	4422      	add	r2, r4
 800941c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009420:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009424:	3302      	adds	r3, #2
 8009426:	e7c7      	b.n	80093b8 <_printf_common+0x58>
 8009428:	2301      	movs	r3, #1
 800942a:	4622      	mov	r2, r4
 800942c:	4649      	mov	r1, r9
 800942e:	4638      	mov	r0, r7
 8009430:	47c0      	blx	r8
 8009432:	3001      	adds	r0, #1
 8009434:	d0e6      	beq.n	8009404 <_printf_common+0xa4>
 8009436:	3601      	adds	r6, #1
 8009438:	e7d9      	b.n	80093ee <_printf_common+0x8e>
	...

0800943c <_printf_i>:
 800943c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009440:	460c      	mov	r4, r1
 8009442:	4691      	mov	r9, r2
 8009444:	7e27      	ldrb	r7, [r4, #24]
 8009446:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009448:	2f78      	cmp	r7, #120	; 0x78
 800944a:	4680      	mov	r8, r0
 800944c:	469a      	mov	sl, r3
 800944e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009452:	d807      	bhi.n	8009464 <_printf_i+0x28>
 8009454:	2f62      	cmp	r7, #98	; 0x62
 8009456:	d80a      	bhi.n	800946e <_printf_i+0x32>
 8009458:	2f00      	cmp	r7, #0
 800945a:	f000 80d8 	beq.w	800960e <_printf_i+0x1d2>
 800945e:	2f58      	cmp	r7, #88	; 0x58
 8009460:	f000 80a3 	beq.w	80095aa <_printf_i+0x16e>
 8009464:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800946c:	e03a      	b.n	80094e4 <_printf_i+0xa8>
 800946e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009472:	2b15      	cmp	r3, #21
 8009474:	d8f6      	bhi.n	8009464 <_printf_i+0x28>
 8009476:	a001      	add	r0, pc, #4	; (adr r0, 800947c <_printf_i+0x40>)
 8009478:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800947c:	080094d5 	.word	0x080094d5
 8009480:	080094e9 	.word	0x080094e9
 8009484:	08009465 	.word	0x08009465
 8009488:	08009465 	.word	0x08009465
 800948c:	08009465 	.word	0x08009465
 8009490:	08009465 	.word	0x08009465
 8009494:	080094e9 	.word	0x080094e9
 8009498:	08009465 	.word	0x08009465
 800949c:	08009465 	.word	0x08009465
 80094a0:	08009465 	.word	0x08009465
 80094a4:	08009465 	.word	0x08009465
 80094a8:	080095f5 	.word	0x080095f5
 80094ac:	08009519 	.word	0x08009519
 80094b0:	080095d7 	.word	0x080095d7
 80094b4:	08009465 	.word	0x08009465
 80094b8:	08009465 	.word	0x08009465
 80094bc:	08009617 	.word	0x08009617
 80094c0:	08009465 	.word	0x08009465
 80094c4:	08009519 	.word	0x08009519
 80094c8:	08009465 	.word	0x08009465
 80094cc:	08009465 	.word	0x08009465
 80094d0:	080095df 	.word	0x080095df
 80094d4:	680b      	ldr	r3, [r1, #0]
 80094d6:	1d1a      	adds	r2, r3, #4
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	600a      	str	r2, [r1, #0]
 80094dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094e4:	2301      	movs	r3, #1
 80094e6:	e0a3      	b.n	8009630 <_printf_i+0x1f4>
 80094e8:	6825      	ldr	r5, [r4, #0]
 80094ea:	6808      	ldr	r0, [r1, #0]
 80094ec:	062e      	lsls	r6, r5, #24
 80094ee:	f100 0304 	add.w	r3, r0, #4
 80094f2:	d50a      	bpl.n	800950a <_printf_i+0xce>
 80094f4:	6805      	ldr	r5, [r0, #0]
 80094f6:	600b      	str	r3, [r1, #0]
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	da03      	bge.n	8009504 <_printf_i+0xc8>
 80094fc:	232d      	movs	r3, #45	; 0x2d
 80094fe:	426d      	negs	r5, r5
 8009500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009504:	485e      	ldr	r0, [pc, #376]	; (8009680 <_printf_i+0x244>)
 8009506:	230a      	movs	r3, #10
 8009508:	e019      	b.n	800953e <_printf_i+0x102>
 800950a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800950e:	6805      	ldr	r5, [r0, #0]
 8009510:	600b      	str	r3, [r1, #0]
 8009512:	bf18      	it	ne
 8009514:	b22d      	sxthne	r5, r5
 8009516:	e7ef      	b.n	80094f8 <_printf_i+0xbc>
 8009518:	680b      	ldr	r3, [r1, #0]
 800951a:	6825      	ldr	r5, [r4, #0]
 800951c:	1d18      	adds	r0, r3, #4
 800951e:	6008      	str	r0, [r1, #0]
 8009520:	0628      	lsls	r0, r5, #24
 8009522:	d501      	bpl.n	8009528 <_printf_i+0xec>
 8009524:	681d      	ldr	r5, [r3, #0]
 8009526:	e002      	b.n	800952e <_printf_i+0xf2>
 8009528:	0669      	lsls	r1, r5, #25
 800952a:	d5fb      	bpl.n	8009524 <_printf_i+0xe8>
 800952c:	881d      	ldrh	r5, [r3, #0]
 800952e:	4854      	ldr	r0, [pc, #336]	; (8009680 <_printf_i+0x244>)
 8009530:	2f6f      	cmp	r7, #111	; 0x6f
 8009532:	bf0c      	ite	eq
 8009534:	2308      	moveq	r3, #8
 8009536:	230a      	movne	r3, #10
 8009538:	2100      	movs	r1, #0
 800953a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800953e:	6866      	ldr	r6, [r4, #4]
 8009540:	60a6      	str	r6, [r4, #8]
 8009542:	2e00      	cmp	r6, #0
 8009544:	bfa2      	ittt	ge
 8009546:	6821      	ldrge	r1, [r4, #0]
 8009548:	f021 0104 	bicge.w	r1, r1, #4
 800954c:	6021      	strge	r1, [r4, #0]
 800954e:	b90d      	cbnz	r5, 8009554 <_printf_i+0x118>
 8009550:	2e00      	cmp	r6, #0
 8009552:	d04d      	beq.n	80095f0 <_printf_i+0x1b4>
 8009554:	4616      	mov	r6, r2
 8009556:	fbb5 f1f3 	udiv	r1, r5, r3
 800955a:	fb03 5711 	mls	r7, r3, r1, r5
 800955e:	5dc7      	ldrb	r7, [r0, r7]
 8009560:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009564:	462f      	mov	r7, r5
 8009566:	42bb      	cmp	r3, r7
 8009568:	460d      	mov	r5, r1
 800956a:	d9f4      	bls.n	8009556 <_printf_i+0x11a>
 800956c:	2b08      	cmp	r3, #8
 800956e:	d10b      	bne.n	8009588 <_printf_i+0x14c>
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	07df      	lsls	r7, r3, #31
 8009574:	d508      	bpl.n	8009588 <_printf_i+0x14c>
 8009576:	6923      	ldr	r3, [r4, #16]
 8009578:	6861      	ldr	r1, [r4, #4]
 800957a:	4299      	cmp	r1, r3
 800957c:	bfde      	ittt	le
 800957e:	2330      	movle	r3, #48	; 0x30
 8009580:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009584:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009588:	1b92      	subs	r2, r2, r6
 800958a:	6122      	str	r2, [r4, #16]
 800958c:	f8cd a000 	str.w	sl, [sp]
 8009590:	464b      	mov	r3, r9
 8009592:	aa03      	add	r2, sp, #12
 8009594:	4621      	mov	r1, r4
 8009596:	4640      	mov	r0, r8
 8009598:	f7ff fee2 	bl	8009360 <_printf_common>
 800959c:	3001      	adds	r0, #1
 800959e:	d14c      	bne.n	800963a <_printf_i+0x1fe>
 80095a0:	f04f 30ff 	mov.w	r0, #4294967295
 80095a4:	b004      	add	sp, #16
 80095a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095aa:	4835      	ldr	r0, [pc, #212]	; (8009680 <_printf_i+0x244>)
 80095ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	680e      	ldr	r6, [r1, #0]
 80095b4:	061f      	lsls	r7, r3, #24
 80095b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80095ba:	600e      	str	r6, [r1, #0]
 80095bc:	d514      	bpl.n	80095e8 <_printf_i+0x1ac>
 80095be:	07d9      	lsls	r1, r3, #31
 80095c0:	bf44      	itt	mi
 80095c2:	f043 0320 	orrmi.w	r3, r3, #32
 80095c6:	6023      	strmi	r3, [r4, #0]
 80095c8:	b91d      	cbnz	r5, 80095d2 <_printf_i+0x196>
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	f023 0320 	bic.w	r3, r3, #32
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	2310      	movs	r3, #16
 80095d4:	e7b0      	b.n	8009538 <_printf_i+0xfc>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	f043 0320 	orr.w	r3, r3, #32
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	2378      	movs	r3, #120	; 0x78
 80095e0:	4828      	ldr	r0, [pc, #160]	; (8009684 <_printf_i+0x248>)
 80095e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095e6:	e7e3      	b.n	80095b0 <_printf_i+0x174>
 80095e8:	065e      	lsls	r6, r3, #25
 80095ea:	bf48      	it	mi
 80095ec:	b2ad      	uxthmi	r5, r5
 80095ee:	e7e6      	b.n	80095be <_printf_i+0x182>
 80095f0:	4616      	mov	r6, r2
 80095f2:	e7bb      	b.n	800956c <_printf_i+0x130>
 80095f4:	680b      	ldr	r3, [r1, #0]
 80095f6:	6826      	ldr	r6, [r4, #0]
 80095f8:	6960      	ldr	r0, [r4, #20]
 80095fa:	1d1d      	adds	r5, r3, #4
 80095fc:	600d      	str	r5, [r1, #0]
 80095fe:	0635      	lsls	r5, r6, #24
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	d501      	bpl.n	8009608 <_printf_i+0x1cc>
 8009604:	6018      	str	r0, [r3, #0]
 8009606:	e002      	b.n	800960e <_printf_i+0x1d2>
 8009608:	0671      	lsls	r1, r6, #25
 800960a:	d5fb      	bpl.n	8009604 <_printf_i+0x1c8>
 800960c:	8018      	strh	r0, [r3, #0]
 800960e:	2300      	movs	r3, #0
 8009610:	6123      	str	r3, [r4, #16]
 8009612:	4616      	mov	r6, r2
 8009614:	e7ba      	b.n	800958c <_printf_i+0x150>
 8009616:	680b      	ldr	r3, [r1, #0]
 8009618:	1d1a      	adds	r2, r3, #4
 800961a:	600a      	str	r2, [r1, #0]
 800961c:	681e      	ldr	r6, [r3, #0]
 800961e:	6862      	ldr	r2, [r4, #4]
 8009620:	2100      	movs	r1, #0
 8009622:	4630      	mov	r0, r6
 8009624:	f7f6 fdd4 	bl	80001d0 <memchr>
 8009628:	b108      	cbz	r0, 800962e <_printf_i+0x1f2>
 800962a:	1b80      	subs	r0, r0, r6
 800962c:	6060      	str	r0, [r4, #4]
 800962e:	6863      	ldr	r3, [r4, #4]
 8009630:	6123      	str	r3, [r4, #16]
 8009632:	2300      	movs	r3, #0
 8009634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009638:	e7a8      	b.n	800958c <_printf_i+0x150>
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	4632      	mov	r2, r6
 800963e:	4649      	mov	r1, r9
 8009640:	4640      	mov	r0, r8
 8009642:	47d0      	blx	sl
 8009644:	3001      	adds	r0, #1
 8009646:	d0ab      	beq.n	80095a0 <_printf_i+0x164>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	079b      	lsls	r3, r3, #30
 800964c:	d413      	bmi.n	8009676 <_printf_i+0x23a>
 800964e:	68e0      	ldr	r0, [r4, #12]
 8009650:	9b03      	ldr	r3, [sp, #12]
 8009652:	4298      	cmp	r0, r3
 8009654:	bfb8      	it	lt
 8009656:	4618      	movlt	r0, r3
 8009658:	e7a4      	b.n	80095a4 <_printf_i+0x168>
 800965a:	2301      	movs	r3, #1
 800965c:	4632      	mov	r2, r6
 800965e:	4649      	mov	r1, r9
 8009660:	4640      	mov	r0, r8
 8009662:	47d0      	blx	sl
 8009664:	3001      	adds	r0, #1
 8009666:	d09b      	beq.n	80095a0 <_printf_i+0x164>
 8009668:	3501      	adds	r5, #1
 800966a:	68e3      	ldr	r3, [r4, #12]
 800966c:	9903      	ldr	r1, [sp, #12]
 800966e:	1a5b      	subs	r3, r3, r1
 8009670:	42ab      	cmp	r3, r5
 8009672:	dcf2      	bgt.n	800965a <_printf_i+0x21e>
 8009674:	e7eb      	b.n	800964e <_printf_i+0x212>
 8009676:	2500      	movs	r5, #0
 8009678:	f104 0619 	add.w	r6, r4, #25
 800967c:	e7f5      	b.n	800966a <_printf_i+0x22e>
 800967e:	bf00      	nop
 8009680:	0800c909 	.word	0x0800c909
 8009684:	0800c91a 	.word	0x0800c91a

08009688 <memcpy>:
 8009688:	440a      	add	r2, r1
 800968a:	4291      	cmp	r1, r2
 800968c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009690:	d100      	bne.n	8009694 <memcpy+0xc>
 8009692:	4770      	bx	lr
 8009694:	b510      	push	{r4, lr}
 8009696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800969a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800969e:	4291      	cmp	r1, r2
 80096a0:	d1f9      	bne.n	8009696 <memcpy+0xe>
 80096a2:	bd10      	pop	{r4, pc}

080096a4 <memmove>:
 80096a4:	4288      	cmp	r0, r1
 80096a6:	b510      	push	{r4, lr}
 80096a8:	eb01 0402 	add.w	r4, r1, r2
 80096ac:	d902      	bls.n	80096b4 <memmove+0x10>
 80096ae:	4284      	cmp	r4, r0
 80096b0:	4623      	mov	r3, r4
 80096b2:	d807      	bhi.n	80096c4 <memmove+0x20>
 80096b4:	1e43      	subs	r3, r0, #1
 80096b6:	42a1      	cmp	r1, r4
 80096b8:	d008      	beq.n	80096cc <memmove+0x28>
 80096ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096c2:	e7f8      	b.n	80096b6 <memmove+0x12>
 80096c4:	4402      	add	r2, r0
 80096c6:	4601      	mov	r1, r0
 80096c8:	428a      	cmp	r2, r1
 80096ca:	d100      	bne.n	80096ce <memmove+0x2a>
 80096cc:	bd10      	pop	{r4, pc}
 80096ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096d6:	e7f7      	b.n	80096c8 <memmove+0x24>

080096d8 <_free_r>:
 80096d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096da:	2900      	cmp	r1, #0
 80096dc:	d048      	beq.n	8009770 <_free_r+0x98>
 80096de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e2:	9001      	str	r0, [sp, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f1a1 0404 	sub.w	r4, r1, #4
 80096ea:	bfb8      	it	lt
 80096ec:	18e4      	addlt	r4, r4, r3
 80096ee:	f000 f8d3 	bl	8009898 <__malloc_lock>
 80096f2:	4a20      	ldr	r2, [pc, #128]	; (8009774 <_free_r+0x9c>)
 80096f4:	9801      	ldr	r0, [sp, #4]
 80096f6:	6813      	ldr	r3, [r2, #0]
 80096f8:	4615      	mov	r5, r2
 80096fa:	b933      	cbnz	r3, 800970a <_free_r+0x32>
 80096fc:	6063      	str	r3, [r4, #4]
 80096fe:	6014      	str	r4, [r2, #0]
 8009700:	b003      	add	sp, #12
 8009702:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009706:	f000 b8cd 	b.w	80098a4 <__malloc_unlock>
 800970a:	42a3      	cmp	r3, r4
 800970c:	d90b      	bls.n	8009726 <_free_r+0x4e>
 800970e:	6821      	ldr	r1, [r4, #0]
 8009710:	1862      	adds	r2, r4, r1
 8009712:	4293      	cmp	r3, r2
 8009714:	bf04      	itt	eq
 8009716:	681a      	ldreq	r2, [r3, #0]
 8009718:	685b      	ldreq	r3, [r3, #4]
 800971a:	6063      	str	r3, [r4, #4]
 800971c:	bf04      	itt	eq
 800971e:	1852      	addeq	r2, r2, r1
 8009720:	6022      	streq	r2, [r4, #0]
 8009722:	602c      	str	r4, [r5, #0]
 8009724:	e7ec      	b.n	8009700 <_free_r+0x28>
 8009726:	461a      	mov	r2, r3
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	b10b      	cbz	r3, 8009730 <_free_r+0x58>
 800972c:	42a3      	cmp	r3, r4
 800972e:	d9fa      	bls.n	8009726 <_free_r+0x4e>
 8009730:	6811      	ldr	r1, [r2, #0]
 8009732:	1855      	adds	r5, r2, r1
 8009734:	42a5      	cmp	r5, r4
 8009736:	d10b      	bne.n	8009750 <_free_r+0x78>
 8009738:	6824      	ldr	r4, [r4, #0]
 800973a:	4421      	add	r1, r4
 800973c:	1854      	adds	r4, r2, r1
 800973e:	42a3      	cmp	r3, r4
 8009740:	6011      	str	r1, [r2, #0]
 8009742:	d1dd      	bne.n	8009700 <_free_r+0x28>
 8009744:	681c      	ldr	r4, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	6053      	str	r3, [r2, #4]
 800974a:	4421      	add	r1, r4
 800974c:	6011      	str	r1, [r2, #0]
 800974e:	e7d7      	b.n	8009700 <_free_r+0x28>
 8009750:	d902      	bls.n	8009758 <_free_r+0x80>
 8009752:	230c      	movs	r3, #12
 8009754:	6003      	str	r3, [r0, #0]
 8009756:	e7d3      	b.n	8009700 <_free_r+0x28>
 8009758:	6825      	ldr	r5, [r4, #0]
 800975a:	1961      	adds	r1, r4, r5
 800975c:	428b      	cmp	r3, r1
 800975e:	bf04      	itt	eq
 8009760:	6819      	ldreq	r1, [r3, #0]
 8009762:	685b      	ldreq	r3, [r3, #4]
 8009764:	6063      	str	r3, [r4, #4]
 8009766:	bf04      	itt	eq
 8009768:	1949      	addeq	r1, r1, r5
 800976a:	6021      	streq	r1, [r4, #0]
 800976c:	6054      	str	r4, [r2, #4]
 800976e:	e7c7      	b.n	8009700 <_free_r+0x28>
 8009770:	b003      	add	sp, #12
 8009772:	bd30      	pop	{r4, r5, pc}
 8009774:	200000bc 	.word	0x200000bc

08009778 <_malloc_r>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	1ccd      	adds	r5, r1, #3
 800977c:	f025 0503 	bic.w	r5, r5, #3
 8009780:	3508      	adds	r5, #8
 8009782:	2d0c      	cmp	r5, #12
 8009784:	bf38      	it	cc
 8009786:	250c      	movcc	r5, #12
 8009788:	2d00      	cmp	r5, #0
 800978a:	4606      	mov	r6, r0
 800978c:	db01      	blt.n	8009792 <_malloc_r+0x1a>
 800978e:	42a9      	cmp	r1, r5
 8009790:	d903      	bls.n	800979a <_malloc_r+0x22>
 8009792:	230c      	movs	r3, #12
 8009794:	6033      	str	r3, [r6, #0]
 8009796:	2000      	movs	r0, #0
 8009798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800979a:	f000 f87d 	bl	8009898 <__malloc_lock>
 800979e:	4921      	ldr	r1, [pc, #132]	; (8009824 <_malloc_r+0xac>)
 80097a0:	680a      	ldr	r2, [r1, #0]
 80097a2:	4614      	mov	r4, r2
 80097a4:	b99c      	cbnz	r4, 80097ce <_malloc_r+0x56>
 80097a6:	4f20      	ldr	r7, [pc, #128]	; (8009828 <_malloc_r+0xb0>)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	b923      	cbnz	r3, 80097b6 <_malloc_r+0x3e>
 80097ac:	4621      	mov	r1, r4
 80097ae:	4630      	mov	r0, r6
 80097b0:	f000 f862 	bl	8009878 <_sbrk_r>
 80097b4:	6038      	str	r0, [r7, #0]
 80097b6:	4629      	mov	r1, r5
 80097b8:	4630      	mov	r0, r6
 80097ba:	f000 f85d 	bl	8009878 <_sbrk_r>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	d123      	bne.n	800980a <_malloc_r+0x92>
 80097c2:	230c      	movs	r3, #12
 80097c4:	6033      	str	r3, [r6, #0]
 80097c6:	4630      	mov	r0, r6
 80097c8:	f000 f86c 	bl	80098a4 <__malloc_unlock>
 80097cc:	e7e3      	b.n	8009796 <_malloc_r+0x1e>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	1b5b      	subs	r3, r3, r5
 80097d2:	d417      	bmi.n	8009804 <_malloc_r+0x8c>
 80097d4:	2b0b      	cmp	r3, #11
 80097d6:	d903      	bls.n	80097e0 <_malloc_r+0x68>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	441c      	add	r4, r3
 80097dc:	6025      	str	r5, [r4, #0]
 80097de:	e004      	b.n	80097ea <_malloc_r+0x72>
 80097e0:	6863      	ldr	r3, [r4, #4]
 80097e2:	42a2      	cmp	r2, r4
 80097e4:	bf0c      	ite	eq
 80097e6:	600b      	streq	r3, [r1, #0]
 80097e8:	6053      	strne	r3, [r2, #4]
 80097ea:	4630      	mov	r0, r6
 80097ec:	f000 f85a 	bl	80098a4 <__malloc_unlock>
 80097f0:	f104 000b 	add.w	r0, r4, #11
 80097f4:	1d23      	adds	r3, r4, #4
 80097f6:	f020 0007 	bic.w	r0, r0, #7
 80097fa:	1ac2      	subs	r2, r0, r3
 80097fc:	d0cc      	beq.n	8009798 <_malloc_r+0x20>
 80097fe:	1a1b      	subs	r3, r3, r0
 8009800:	50a3      	str	r3, [r4, r2]
 8009802:	e7c9      	b.n	8009798 <_malloc_r+0x20>
 8009804:	4622      	mov	r2, r4
 8009806:	6864      	ldr	r4, [r4, #4]
 8009808:	e7cc      	b.n	80097a4 <_malloc_r+0x2c>
 800980a:	1cc4      	adds	r4, r0, #3
 800980c:	f024 0403 	bic.w	r4, r4, #3
 8009810:	42a0      	cmp	r0, r4
 8009812:	d0e3      	beq.n	80097dc <_malloc_r+0x64>
 8009814:	1a21      	subs	r1, r4, r0
 8009816:	4630      	mov	r0, r6
 8009818:	f000 f82e 	bl	8009878 <_sbrk_r>
 800981c:	3001      	adds	r0, #1
 800981e:	d1dd      	bne.n	80097dc <_malloc_r+0x64>
 8009820:	e7cf      	b.n	80097c2 <_malloc_r+0x4a>
 8009822:	bf00      	nop
 8009824:	200000bc 	.word	0x200000bc
 8009828:	200000c0 	.word	0x200000c0

0800982c <_realloc_r>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	4607      	mov	r7, r0
 8009830:	4614      	mov	r4, r2
 8009832:	460e      	mov	r6, r1
 8009834:	b921      	cbnz	r1, 8009840 <_realloc_r+0x14>
 8009836:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800983a:	4611      	mov	r1, r2
 800983c:	f7ff bf9c 	b.w	8009778 <_malloc_r>
 8009840:	b922      	cbnz	r2, 800984c <_realloc_r+0x20>
 8009842:	f7ff ff49 	bl	80096d8 <_free_r>
 8009846:	4625      	mov	r5, r4
 8009848:	4628      	mov	r0, r5
 800984a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800984c:	f000 f830 	bl	80098b0 <_malloc_usable_size_r>
 8009850:	42a0      	cmp	r0, r4
 8009852:	d20f      	bcs.n	8009874 <_realloc_r+0x48>
 8009854:	4621      	mov	r1, r4
 8009856:	4638      	mov	r0, r7
 8009858:	f7ff ff8e 	bl	8009778 <_malloc_r>
 800985c:	4605      	mov	r5, r0
 800985e:	2800      	cmp	r0, #0
 8009860:	d0f2      	beq.n	8009848 <_realloc_r+0x1c>
 8009862:	4631      	mov	r1, r6
 8009864:	4622      	mov	r2, r4
 8009866:	f7ff ff0f 	bl	8009688 <memcpy>
 800986a:	4631      	mov	r1, r6
 800986c:	4638      	mov	r0, r7
 800986e:	f7ff ff33 	bl	80096d8 <_free_r>
 8009872:	e7e9      	b.n	8009848 <_realloc_r+0x1c>
 8009874:	4635      	mov	r5, r6
 8009876:	e7e7      	b.n	8009848 <_realloc_r+0x1c>

08009878 <_sbrk_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d06      	ldr	r5, [pc, #24]	; (8009894 <_sbrk_r+0x1c>)
 800987c:	2300      	movs	r3, #0
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	602b      	str	r3, [r5, #0]
 8009884:	f7f9 fa6c 	bl	8002d60 <_sbrk>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d102      	bne.n	8009892 <_sbrk_r+0x1a>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	b103      	cbz	r3, 8009892 <_sbrk_r+0x1a>
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	2000041c 	.word	0x2000041c

08009898 <__malloc_lock>:
 8009898:	4801      	ldr	r0, [pc, #4]	; (80098a0 <__malloc_lock+0x8>)
 800989a:	f000 b811 	b.w	80098c0 <__retarget_lock_acquire_recursive>
 800989e:	bf00      	nop
 80098a0:	20000424 	.word	0x20000424

080098a4 <__malloc_unlock>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__malloc_unlock+0x8>)
 80098a6:	f000 b80c 	b.w	80098c2 <__retarget_lock_release_recursive>
 80098aa:	bf00      	nop
 80098ac:	20000424 	.word	0x20000424

080098b0 <_malloc_usable_size_r>:
 80098b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098b4:	1f18      	subs	r0, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bfbc      	itt	lt
 80098ba:	580b      	ldrlt	r3, [r1, r0]
 80098bc:	18c0      	addlt	r0, r0, r3
 80098be:	4770      	bx	lr

080098c0 <__retarget_lock_acquire_recursive>:
 80098c0:	4770      	bx	lr

080098c2 <__retarget_lock_release_recursive>:
 80098c2:	4770      	bx	lr

080098c4 <_init>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	bf00      	nop
 80098c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ca:	bc08      	pop	{r3}
 80098cc:	469e      	mov	lr, r3
 80098ce:	4770      	bx	lr

080098d0 <_fini>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	bf00      	nop
 80098d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d6:	bc08      	pop	{r3}
 80098d8:	469e      	mov	lr, r3
 80098da:	4770      	bx	lr
