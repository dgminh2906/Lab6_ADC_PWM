
Lab6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003050  08009138  08009138  00019138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c188  0800c188  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c188  0800c188  0001c188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c190  0800c190  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c190  0800c190  0001c190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c194  0800c194  0001c194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000003b0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000430  20000430  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4c4  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044e2  00000000  00000000  0003f574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  00043a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001530  00000000  00000000  00045168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026788  00000000  00000000  00046698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fdf7  00000000  00000000  0006ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0073  00000000  00000000  0008cc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016cc8a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062b0  00000000  00000000  0016cce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009120 	.word	0x08009120

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08009120 	.word	0x08009120

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <MX_ADC1_Init+0x108>)
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <MX_ADC1_Init+0x10c>)
 8000dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <MX_ADC1_Init+0x108>)
 8000de4:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <MX_ADC1_Init+0x110>)
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df0:	2205      	movs	r2, #5
 8000df2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e02:	482a      	ldr	r0, [pc, #168]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e04:	f002 faa6 	bl	8003354 <HAL_ADC_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f001 fca3 	bl	8002758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e12:	2308      	movs	r3, #8
 8000e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4822      	ldr	r0, [pc, #136]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e24:	f002 fc08 	bl	8003638 <HAL_ADC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e2e:	f001 fc93 	bl	8002758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e32:	2309      	movs	r3, #9
 8000e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481b      	ldr	r0, [pc, #108]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e40:	f002 fbfa 	bl	8003638 <HAL_ADC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e4a:	f001 fc85 	bl	8002758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e52:	2303      	movs	r3, #3
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e5c:	f002 fbec 	bl	8003638 <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e66:	f001 fc77 	bl	8002758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e6a:	230b      	movs	r3, #11
 8000e6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e78:	f002 fbde 	bl	8003638 <HAL_ADC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e82:	f001 fc69 	bl	8002758 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e86:	230c      	movs	r3, #12
 8000e88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e94:	f002 fbd0 	bl	8003638 <HAL_ADC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e9e:	f001 fc5b 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000c8 	.word	0x200000c8
 8000eb0:	40012000 	.word	0x40012000
 8000eb4:	0f000001 	.word	0x0f000001

08000eb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a3c      	ldr	r2, [pc, #240]	; (8000fc8 <HAL_ADC_MspInit+0x110>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d171      	bne.n	8000fbe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a3a      	ldr	r2, [pc, #232]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a33      	ldr	r2, [pc, #204]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a2c      	ldr	r2, [pc, #176]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <HAL_ADC_MspInit+0x118>)
 8000f42:	f003 fb2d 	bl	80045a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f46:	2303      	movs	r3, #3
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <HAL_ADC_MspInit+0x11c>)
 8000f5a:	f003 fb21 	bl	80045a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f60:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0x124>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fa4:	f002 fefa 	bl	8003d9c <HAL_DMA_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fae:	f001 fbd3 	bl	8002758 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	20000110 	.word	0x20000110
 8000fdc:	40026410 	.word	0x40026410

08000fe0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <button_init+0x14>)
 8000fea:	f003 fc75 	bl	80048d8 <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020c00 	.word	0x40020c00

08000ff8 <button_Scan>:

void button_Scan(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2108      	movs	r1, #8
 8001002:	482f      	ldr	r0, [pc, #188]	; (80010c0 <button_Scan+0xc8>)
 8001004:	f003 fc68 	bl	80048d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	2108      	movs	r1, #8
 800100c:	482c      	ldr	r0, [pc, #176]	; (80010c0 <button_Scan+0xc8>)
 800100e:	f003 fc63 	bl	80048d8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001012:	230a      	movs	r3, #10
 8001014:	2202      	movs	r2, #2
 8001016:	492b      	ldr	r1, [pc, #172]	; (80010c4 <button_Scan+0xcc>)
 8001018:	482b      	ldr	r0, [pc, #172]	; (80010c8 <button_Scan+0xd0>)
 800101a:	f004 ff26 	bl	8005e6a <HAL_SPI_Receive>
	  int button_index = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001026:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	e03f      	b.n	80010ae <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db06      	blt.n	8001042 <button_Scan+0x4a>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b03      	cmp	r3, #3
 8001038:	dc03      	bgt.n	8001042 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e018      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b03      	cmp	r3, #3
 8001046:	dd07      	ble.n	8001058 <button_Scan+0x60>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b07      	cmp	r3, #7
 800104c:	dc04      	bgt.n	8001058 <button_Scan+0x60>
			  button_index = 7 - i;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f1c3 0307 	rsb	r3, r3, #7
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e00d      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b07      	cmp	r3, #7
 800105c:	dd06      	ble.n	800106c <button_Scan+0x74>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0b      	cmp	r3, #11
 8001062:	dc03      	bgt.n	800106c <button_Scan+0x74>
			  button_index = i + 4;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3304      	adds	r3, #4
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e003      	b.n	8001074 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f1c3 0317 	rsb	r3, r3, #23
 8001072:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <button_Scan+0xcc>)
 8001076:	881a      	ldrh	r2, [r3, #0]
 8001078:	897b      	ldrh	r3, [r7, #10]
 800107a:	4013      	ands	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <button_Scan+0x96>
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <button_Scan+0xd4>)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2100      	movs	r1, #0
 8001088:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800108c:	e009      	b.n	80010a2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <button_Scan+0xd4>)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	3301      	adds	r3, #1
 8001098:	b299      	uxth	r1, r3
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <button_Scan+0xd4>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80010a2:	897b      	ldrh	r3, [r7, #10]
 80010a4:	085b      	lsrs	r3, r3, #1
 80010a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	ddbc      	ble.n	800102e <button_Scan+0x36>
	  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	2000009c 	.word	0x2000009c
 80010c8:	2000028c 	.word	0x2000028c
 80010cc:	20000170 	.word	0x20000170

080010d0 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80010d4:	2100      	movs	r1, #0
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <buzzer_init+0x10>)
 80010d8:	f005 fc08 	bl	80068ec <HAL_TIM_PWM_Start>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200002e4 	.word	0x200002e4

080010e4 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <buzzer_SetVolume+0x28>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <buzzer_SetVolume+0x28>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <buzzer_SetVolume+0x2c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2000009e 	.word	0x2000009e
 8001110:	200002e4 	.word	0x200002e4

08001114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_DMA_Init+0x3c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <MX_DMA_Init+0x3c>)
 8001124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_DMA_Init+0x3c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2038      	movs	r0, #56	; 0x38
 800113c:	f002 fdf7 	bl	8003d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001140:	2038      	movs	r0, #56	; 0x38
 8001142:	f002 fe10 	bl	8003d66 <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8001158:	2016      	movs	r0, #22
 800115a:	f002 f817 	bl	800318c <DEC2BCD>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <ds3231_init+0x5c>)
 8001164:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8001166:	2015      	movs	r0, #21
 8001168:	f002 f810 	bl	800318c <DEC2BCD>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <ds3231_init+0x5c>)
 8001172:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8001174:	2006      	movs	r0, #6
 8001176:	f002 f809 	bl	800318c <DEC2BCD>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <ds3231_init+0x5c>)
 8001180:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8001182:	200f      	movs	r0, #15
 8001184:	f002 f802 	bl	800318c <DEC2BCD>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <ds3231_init+0x5c>)
 800118e:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8001190:	2009      	movs	r0, #9
 8001192:	f001 fffb 	bl	800318c <DEC2BCD>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <ds3231_init+0x5c>)
 800119c:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 800119e:	2017      	movs	r0, #23
 80011a0:	f001 fff4 	bl	800318c <DEC2BCD>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b01      	ldr	r3, [pc, #4]	; (80011b0 <ds3231_init+0x5c>)
 80011aa:	719a      	strb	r2, [r3, #6]
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000198 	.word	0x20000198

080011b4 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af04      	add	r7, sp, #16
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 ffe0 	bl	800318c <DEC2BCD>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	230a      	movs	r3, #10
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	f107 030f 	add.w	r3, r7, #15
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	21d0      	movs	r1, #208	; 0xd0
 80011e6:	4803      	ldr	r0, [pc, #12]	; (80011f4 <ds3231_Write+0x40>)
 80011e8:	f003 fcee 	bl	8004bc8 <HAL_I2C_Mem_Write>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001f0 	.word	0x200001f0

080011f8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001226:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800122a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <MX_FSMC_Init+0xec>)
 800122e:	4a2e      	ldr	r2, [pc, #184]	; (80012e8 <MX_FSMC_Init+0xf0>)
 8001230:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <MX_FSMC_Init+0xec>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001246:	2210      	movs	r2, #16
 8001248:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_FSMC_Init+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_FSMC_Init+0xec>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001264:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_FSMC_Init+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_FSMC_Init+0xec>)
 800127a:	2200      	movs	r2, #0
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001280:	2200      	movs	r2, #0
 8001282:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_FSMC_Init+0xec>)
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800128a:	230f      	movs	r3, #15
 800128c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800128e:	230f      	movs	r3, #15
 8001290:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001292:	233c      	movs	r3, #60	; 0x3c
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800129a:	2310      	movs	r3, #16
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800129e:	2311      	movs	r3, #17
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80012a6:	2308      	movs	r3, #8
 80012a8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80012aa:	230f      	movs	r3, #15
 80012ac:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80012ae:	2309      	movs	r3, #9
 80012b0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80012b6:	2310      	movs	r3, #16
 80012b8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80012ba:	2311      	movs	r3, #17
 80012bc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80012c2:	463a      	mov	r2, r7
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_FSMC_Init+0xec>)
 80012cc:	f005 f9b0 	bl	8006630 <HAL_SRAM_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80012d6:	f001 fa3f 	bl	8002758 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80012da:	bf00      	nop
 80012dc:	3738      	adds	r7, #56	; 0x38
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001a0 	.word	0x200001a0
 80012e8:	a0000104 	.word	0xa0000104

080012ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_FSMC_MspInit+0x88>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d131      	bne.n	800136c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_FSMC_MspInit+0x88>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_FSMC_MspInit+0x8c>)
 8001314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <HAL_FSMC_MspInit+0x8c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6393      	str	r3, [r2, #56]	; 0x38
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_FSMC_MspInit+0x8c>)
 8001320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800132a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800132e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800133c:	230c      	movs	r3, #12
 800133e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	4619      	mov	r1, r3
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <HAL_FSMC_MspInit+0x90>)
 8001346:	f003 f92b 	bl	80045a0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800134a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800134e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800135c:	230c      	movs	r3, #12
 800135e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4619      	mov	r1, r3
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <HAL_FSMC_MspInit+0x94>)
 8001366:	f003 f91b 	bl	80045a0 <HAL_GPIO_Init>
 800136a:	e000      	b.n	800136e <HAL_FSMC_MspInit+0x82>
    return;
 800136c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200000a0 	.word	0x200000a0
 8001378:	40023800 	.word	0x40023800
 800137c:	40021000 	.word	0x40021000
 8001380:	40020c00 	.word	0x40020c00

08001384 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800138c:	f7ff ffae 	bl	80012ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a75      	ldr	r2, [pc, #468]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013b8:	f043 0310 	orr.w	r3, r3, #16
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b73      	ldr	r3, [pc, #460]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	623b      	str	r3, [r7, #32]
 80013c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	4b6f      	ldr	r3, [pc, #444]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a6e      	ldr	r2, [pc, #440]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	4b68      	ldr	r3, [pc, #416]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a67      	ldr	r2, [pc, #412]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <MX_GPIO_Init+0x1f4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	4b61      	ldr	r3, [pc, #388]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a60      	ldr	r2, [pc, #384]	; (800158c <MX_GPIO_Init+0x1f4>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b5e      	ldr	r3, [pc, #376]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b5a      	ldr	r3, [pc, #360]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a59      	ldr	r2, [pc, #356]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b53      	ldr	r3, [pc, #332]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a52      	ldr	r2, [pc, #328]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b50      	ldr	r3, [pc, #320]	; (800158c <MX_GPIO_Init+0x1f4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b4c      	ldr	r3, [pc, #304]	; (800158c <MX_GPIO_Init+0x1f4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a4b      	ldr	r2, [pc, #300]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b49      	ldr	r3, [pc, #292]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b45      	ldr	r3, [pc, #276]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a44      	ldr	r2, [pc, #272]	; (800158c <MX_GPIO_Init+0x1f4>)
 800147c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <MX_GPIO_Init+0x1f4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2170      	movs	r1, #112	; 0x70
 8001492:	483f      	ldr	r0, [pc, #252]	; (8001590 <MX_GPIO_Init+0x1f8>)
 8001494:	f003 fa20 	bl	80048d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149e:	483d      	ldr	r0, [pc, #244]	; (8001594 <MX_GPIO_Init+0x1fc>)
 80014a0:	f003 fa1a 	bl	80048d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2140      	movs	r1, #64	; 0x40
 80014a8:	483b      	ldr	r0, [pc, #236]	; (8001598 <MX_GPIO_Init+0x200>)
 80014aa:	f003 fa15 	bl	80048d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b4:	4839      	ldr	r0, [pc, #228]	; (800159c <MX_GPIO_Init+0x204>)
 80014b6:	f003 fa0f 	bl	80048d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2108      	movs	r1, #8
 80014be:	4838      	ldr	r0, [pc, #224]	; (80015a0 <MX_GPIO_Init+0x208>)
 80014c0:	f003 fa0a 	bl	80048d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80014c4:	2370      	movs	r3, #112	; 0x70
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d8:	4619      	mov	r1, r3
 80014da:	482d      	ldr	r0, [pc, #180]	; (8001590 <MX_GPIO_Init+0x1f8>)
 80014dc:	f003 f860 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4826      	ldr	r0, [pc, #152]	; (8001594 <MX_GPIO_Init+0x1fc>)
 80014fa:	f003 f851 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80014fe:	23c0      	movs	r3, #192	; 0xc0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4822      	ldr	r0, [pc, #136]	; (800159c <MX_GPIO_Init+0x204>)
 8001512:	f003 f845 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001516:	2330      	movs	r3, #48	; 0x30
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	481a      	ldr	r0, [pc, #104]	; (8001594 <MX_GPIO_Init+0x1fc>)
 800152a:	f003 f839 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800152e:	2340      	movs	r3, #64	; 0x40
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	4619      	mov	r1, r3
 8001544:	4814      	ldr	r0, [pc, #80]	; (8001598 <MX_GPIO_Init+0x200>)
 8001546:	f003 f82b 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800154a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <MX_GPIO_Init+0x204>)
 8001564:	f003 f81c 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001568:	2308      	movs	r3, #8
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	4808      	ldr	r0, [pc, #32]	; (80015a0 <MX_GPIO_Init+0x208>)
 8001580:	f003 f80e 	bl	80045a0 <HAL_GPIO_Init>

}
 8001584:	bf00      	nop
 8001586:	3738      	adds	r7, #56	; 0x38
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40021000 	.word	0x40021000
 8001594:	40020800 	.word	0x40020800
 8001598:	40021800 	.word	0x40021800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020c00 	.word	0x40020c00

080015a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_I2C1_Init+0x58>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015e2:	f003 f9ad 	bl	8004940 <HAL_I2C_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ec:	f001 f8b4 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200001f0 	.word	0x200001f0
 80015f8:	40005400 	.word	0x40005400
 80015fc:	000186a0 	.word	0x000186a0

08001600 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_I2C_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_I2C_MspInit+0x88>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800163e:	23c0      	movs	r3, #192	; 0xc0
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001642:	2312      	movs	r3, #18
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800164e:	2304      	movs	r3, #4
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <HAL_I2C_MspInit+0x8c>)
 800165a:	f002 ffa1 	bl	80045a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_I2C_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40005400 	.word	0x40005400
 8001688:	40023800 	.word	0x40023800
 800168c:	40020400 	.word	0x40020400

08001690 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <LCD_WR_REG+0x1c>)
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	8013      	strh	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	600ffffe 	.word	0x600ffffe

080016b0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <LCD_WR_DATA+0x1c>)
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	8053      	strh	r3, [r2, #2]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	600ffffe 	.word	0x600ffffe

080016d0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <LCD_RD_DATA+0x20>)
 80016d8:	885b      	ldrh	r3, [r3, #2]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	80fb      	strh	r3, [r7, #6]
	return ram;
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	b29b      	uxth	r3, r3
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	600ffffe 	.word	0x600ffffe

080016f4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4623      	mov	r3, r4
 8001704:	80fb      	strh	r3, [r7, #6]
 8001706:	4603      	mov	r3, r0
 8001708:	80bb      	strh	r3, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	807b      	strh	r3, [r7, #2]
 800170e:	4613      	mov	r3, r2
 8001710:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001712:	202a      	movs	r0, #42	; 0x2a
 8001714:	f7ff ffbc 	bl	8001690 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	b29b      	uxth	r3, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ffc6 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	b29b      	uxth	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ffc0 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b29b      	uxth	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ffba 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	b29b      	uxth	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ffb4 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001748:	202b      	movs	r0, #43	; 0x2b
 800174a:	f7ff ffa1 	bl	8001690 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ffab 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ffa5 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001766:	883b      	ldrh	r3, [r7, #0]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	b29b      	uxth	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff9f 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001772:	883b      	ldrh	r3, [r7, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff99 	bl	80016b0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800177e:	202c      	movs	r0, #44	; 0x2c
 8001780:	f7ff ff86 	bl	8001690 <LCD_WR_REG>
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}

0800178c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <lcd_Clear+0x60>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <lcd_Clear+0x60>)
 80017a0:	885b      	ldrh	r3, [r3, #2]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	2100      	movs	r1, #0
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff ffa3 	bl	80016f4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	81fb      	strh	r3, [r7, #14]
 80017b2:	e011      	b.n	80017d8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	81bb      	strh	r3, [r7, #12]
 80017b8:	e006      	b.n	80017c8 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff77 	bl	80016b0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80017c2:	89bb      	ldrh	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	81bb      	strh	r3, [r7, #12]
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <lcd_Clear+0x60>)
 80017ca:	885b      	ldrh	r3, [r3, #2]
 80017cc:	89ba      	ldrh	r2, [r7, #12]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d3f3      	bcc.n	80017ba <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	3301      	adds	r3, #1
 80017d6:	81fb      	strh	r3, [r7, #14]
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <lcd_Clear+0x60>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	89fa      	ldrh	r2, [r7, #14]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d3e8      	bcc.n	80017b4 <lcd_Clear+0x28>
		}
	}
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000244 	.word	0x20000244

080017f0 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4604      	mov	r4, r0
 80017f8:	4608      	mov	r0, r1
 80017fa:	4611      	mov	r1, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4623      	mov	r3, r4
 8001800:	80fb      	strh	r3, [r7, #6]
 8001802:	4603      	mov	r3, r0
 8001804:	80bb      	strh	r3, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	807b      	strh	r3, [r7, #2]
 800180a:	4613      	mov	r3, r2
 800180c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	3b01      	subs	r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	883b      	ldrh	r3, [r7, #0]
 8001816:	3b01      	subs	r3, #1
 8001818:	b29b      	uxth	r3, r3
 800181a:	88b9      	ldrh	r1, [r7, #4]
 800181c:	88f8      	ldrh	r0, [r7, #6]
 800181e:	f7ff ff69 	bl	80016f4 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001822:	88bb      	ldrh	r3, [r7, #4]
 8001824:	81fb      	strh	r3, [r7, #14]
 8001826:	e010      	b.n	800184a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	81bb      	strh	r3, [r7, #12]
 800182c:	e006      	b.n	800183c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 800182e:	8c3b      	ldrh	r3, [r7, #32]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff3d 	bl	80016b0 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001836:	89bb      	ldrh	r3, [r7, #12]
 8001838:	3301      	adds	r3, #1
 800183a:	81bb      	strh	r3, [r7, #12]
 800183c:	89ba      	ldrh	r2, [r7, #12]
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	429a      	cmp	r2, r3
 8001842:	d3f4      	bcc.n	800182e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001844:	89fb      	ldrh	r3, [r7, #14]
 8001846:	3301      	adds	r3, #1
 8001848:	81fb      	strh	r3, [r7, #14]
 800184a:	89fa      	ldrh	r2, [r7, #14]
 800184c:	883b      	ldrh	r3, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3ea      	bcc.n	8001828 <lcd_Fill+0x38>
		}
	}
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}

0800185c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
 8001866:	460b      	mov	r3, r1
 8001868:	80bb      	strh	r3, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	88fa      	ldrh	r2, [r7, #6]
 8001872:	88b9      	ldrh	r1, [r7, #4]
 8001874:	88f8      	ldrh	r0, [r7, #6]
 8001876:	f7ff ff3d 	bl	80016f4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff17 	bl	80016b0 <LCD_WR_DATA>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	80fb      	strh	r3, [r7, #6]
 800189e:	4603      	mov	r3, r0
 80018a0:	80bb      	strh	r3, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70fb      	strb	r3, [r7, #3]
 80018a6:	4613      	mov	r3, r2
 80018a8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80018b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018dc:	b29b      	uxth	r3, r3
 80018de:	fb12 f303 	smulbb	r3, r2, r3
 80018e2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	3b20      	subs	r3, #32
 80018e8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	4413      	add	r3, r2
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29c      	uxth	r4, r3
 80018f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	b29b      	uxth	r3, r3
 8001904:	3b01      	subs	r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	88b9      	ldrh	r1, [r7, #4]
 800190a:	88f8      	ldrh	r0, [r7, #6]
 800190c:	4622      	mov	r2, r4
 800190e:	f7ff fef1 	bl	80016f4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001912:	2300      	movs	r3, #0
 8001914:	827b      	strh	r3, [r7, #18]
 8001916:	e07a      	b.n	8001a0e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001918:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800191c:	2b0c      	cmp	r3, #12
 800191e:	d028      	beq.n	8001972 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001920:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001924:	2b10      	cmp	r3, #16
 8001926:	d108      	bne.n	800193a <lcd_ShowChar+0xae>
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	8a7b      	ldrh	r3, [r7, #18]
 800192c:	493c      	ldr	r1, [pc, #240]	; (8001a20 <lcd_ShowChar+0x194>)
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	440a      	add	r2, r1
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	75fb      	strb	r3, [r7, #23]
 8001938:	e01b      	b.n	8001972 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800193a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800193e:	2b18      	cmp	r3, #24
 8001940:	d10b      	bne.n	800195a <lcd_ShowChar+0xce>
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	8a79      	ldrh	r1, [r7, #18]
 8001946:	4837      	ldr	r0, [pc, #220]	; (8001a24 <lcd_ShowChar+0x198>)
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	4403      	add	r3, r0
 8001952:	440b      	add	r3, r1
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	75fb      	strb	r3, [r7, #23]
 8001958:	e00b      	b.n	8001972 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800195a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800195e:	2b20      	cmp	r3, #32
 8001960:	d15a      	bne.n	8001a18 <lcd_ShowChar+0x18c>
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	8a7b      	ldrh	r3, [r7, #18]
 8001966:	4930      	ldr	r1, [pc, #192]	; (8001a28 <lcd_ShowChar+0x19c>)
 8001968:	0192      	lsls	r2, r2, #6
 800196a:	440a      	add	r2, r1
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001972:	2300      	movs	r3, #0
 8001974:	75bb      	strb	r3, [r7, #22]
 8001976:	e044      	b.n	8001a02 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001978:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800197c:	2b00      	cmp	r3, #0
 800197e:	d120      	bne.n	80019c2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001980:	7dfa      	ldrb	r2, [r7, #23]
 8001982:	7dbb      	ldrb	r3, [r7, #22]
 8001984:	fa42 f303 	asr.w	r3, r2, r3
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <lcd_ShowChar+0x10e>
 8001990:	883b      	ldrh	r3, [r7, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fe8c 	bl	80016b0 <LCD_WR_DATA>
 8001998:	e003      	b.n	80019a2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800199a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe87 	bl	80016b0 <LCD_WR_DATA>
				m++;
 80019a2:	7d7b      	ldrb	r3, [r7, #21]
 80019a4:	3301      	adds	r3, #1
 80019a6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80019a8:	7d7b      	ldrb	r3, [r7, #21]
 80019aa:	7bfa      	ldrb	r2, [r7, #15]
 80019ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80019b0:	fb02 f201 	mul.w	r2, r2, r1
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d11f      	bne.n	80019fc <lcd_ShowChar+0x170>
				{
					m=0;
 80019bc:	2300      	movs	r3, #0
 80019be:	757b      	strb	r3, [r7, #21]
					break;
 80019c0:	e022      	b.n	8001a08 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80019c2:	7dfa      	ldrb	r2, [r7, #23]
 80019c4:	7dbb      	ldrb	r3, [r7, #22]
 80019c6:	fa42 f303 	asr.w	r3, r2, r3
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <lcd_ShowChar+0x152>
 80019d2:	883a      	ldrh	r2, [r7, #0]
 80019d4:	88b9      	ldrh	r1, [r7, #4]
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff3f 	bl	800185c <lcd_DrawPoint>
				x++;
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	3301      	adds	r3, #1
 80019e2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80019e4:	88fa      	ldrh	r2, [r7, #6]
 80019e6:	8a3b      	ldrh	r3, [r7, #16]
 80019e8:	1ad2      	subs	r2, r2, r3
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d105      	bne.n	80019fc <lcd_ShowChar+0x170>
				{
					x=x0;
 80019f0:	8a3b      	ldrh	r3, [r7, #16]
 80019f2:	80fb      	strh	r3, [r7, #6]
					y++;
 80019f4:	88bb      	ldrh	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	80bb      	strh	r3, [r7, #4]
					break;
 80019fa:	e005      	b.n	8001a08 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80019fc:	7dbb      	ldrb	r3, [r7, #22]
 80019fe:	3301      	adds	r3, #1
 8001a00:	75bb      	strb	r3, [r7, #22]
 8001a02:	7dbb      	ldrb	r3, [r7, #22]
 8001a04:	2b07      	cmp	r3, #7
 8001a06:	d9b7      	bls.n	8001978 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a08:	8a7b      	ldrh	r3, [r7, #18]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	827b      	strh	r3, [r7, #18]
 8001a0e:	8a7a      	ldrh	r2, [r7, #18]
 8001a10:	89bb      	ldrh	r3, [r7, #12]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d380      	bcc.n	8001918 <lcd_ShowChar+0x8c>
 8001a16:	e000      	b.n	8001a1a <lcd_ShowChar+0x18e>
		else return;
 8001a18:	bf00      	nop
				}
			}
		}
	}
}
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd90      	pop	{r4, r7, pc}
 8001a20:	080091b4 	.word	0x080091b4
 8001a24:	080097a4 	.word	0x080097a4
 8001a28:	0800a974 	.word	0x0800a974

08001a2c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	460a      	mov	r2, r1
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001a40:	e004      	b.n	8001a4c <mypow+0x20>
 8001a42:	79fa      	ldrb	r2, [r7, #7]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	1e5a      	subs	r2, r3, #1
 8001a50:	71ba      	strb	r2, [r7, #6]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f5      	bne.n	8001a42 <mypow+0x16>
	return result;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af04      	add	r7, sp, #16
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	4611      	mov	r1, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	4623      	mov	r3, r4
 8001a74:	80fb      	strh	r3, [r7, #6]
 8001a76:	4603      	mov	r3, r0
 8001a78:	80bb      	strh	r3, [r7, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	807b      	strh	r3, [r7, #2]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001a86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a8a:	085b      	lsrs	r3, r3, #1
 8001a8c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	e059      	b.n	8001b48 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001a94:	887c      	ldrh	r4, [r7, #2]
 8001a96:	787a      	ldrb	r2, [r7, #1]
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	200a      	movs	r0, #10
 8001aa6:	f7ff ffc1 	bl	8001a2c <mypow>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	fbb4 f1f3 	udiv	r1, r4, r3
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <lcd_ShowIntNum+0xf8>)
 8001ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	1aca      	subs	r2, r1, r3
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001ac6:	7bbb      	ldrb	r3, [r7, #14]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d121      	bne.n	8001b10 <lcd_ShowIntNum+0xac>
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	787b      	ldrb	r3, [r7, #1]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	da1c      	bge.n	8001b10 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001ad6:	7b3b      	ldrb	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d117      	bne.n	8001b0c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	7b7b      	ldrb	r3, [r7, #13]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	fb12 f303 	smulbb	r3, r2, r3
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	4413      	add	r3, r2
 8001aee:	b298      	uxth	r0, r3
 8001af0:	8c3a      	ldrh	r2, [r7, #32]
 8001af2:	88b9      	ldrh	r1, [r7, #4]
 8001af4:	2300      	movs	r3, #0
 8001af6:	9302      	str	r3, [sp, #8]
 8001af8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	4613      	mov	r3, r2
 8001b04:	2220      	movs	r2, #32
 8001b06:	f7ff fec1 	bl	800188c <lcd_ShowChar>
				continue;
 8001b0a:	e01a      	b.n	8001b42 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	7b7b      	ldrb	r3, [r7, #13]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	fb12 f303 	smulbb	r3, r2, r3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	4413      	add	r3, r2
 8001b22:	b298      	uxth	r0, r3
 8001b24:	7b3b      	ldrb	r3, [r7, #12]
 8001b26:	3330      	adds	r3, #48	; 0x30
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	8c3c      	ldrh	r4, [r7, #32]
 8001b2c:	88b9      	ldrh	r1, [r7, #4]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9302      	str	r3, [sp, #8]
 8001b32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	4623      	mov	r3, r4
 8001b3e:	f7ff fea5 	bl	800188c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	3301      	adds	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	787b      	ldrb	r3, [r7, #1]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d3a1      	bcc.n	8001a94 <lcd_ShowIntNum+0x30>
	}
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	cccccccd 	.word	0xcccccccd

08001b60 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b08b      	sub	sp, #44	; 0x2c
 8001b64:	af04      	add	r7, sp, #16
 8001b66:	4604      	mov	r4, r0
 8001b68:	4608      	mov	r0, r1
 8001b6a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	461a      	mov	r2, r3
 8001b72:	4623      	mov	r3, r4
 8001b74:	81fb      	strh	r3, [r7, #14]
 8001b76:	4603      	mov	r3, r0
 8001b78:	81bb      	strh	r3, [r7, #12]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	71fb      	strb	r3, [r7, #7]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001b82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001b8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b8e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001c68 <lcd_ShowFloatNum+0x108>
 8001b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9a:	ee17 3a90 	vmov	r3, s15
 8001b9e:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	75fb      	strb	r3, [r7, #23]
 8001ba4:	e057      	b.n	8001c56 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001ba6:	8abc      	ldrh	r4, [r7, #20]
 8001ba8:	79fa      	ldrb	r2, [r7, #7]
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	f7ff ff38 	bl	8001a2c <mypow>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	fbb4 f1f3 	udiv	r1, r4, r3
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <lcd_ShowFloatNum+0x10c>)
 8001bc4:	fba3 2301 	umull	r2, r3, r3, r1
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	1aca      	subs	r2, r1, r3
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001bd8:	7dfa      	ldrb	r2, [r7, #23]
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	3b02      	subs	r3, #2
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d11d      	bne.n	8001c1e <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	3b02      	subs	r3, #2
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	7dbb      	ldrb	r3, [r7, #22]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	fb12 f303 	smulbb	r3, r2, r3
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b298      	uxth	r0, r3
 8001bf8:	88ba      	ldrh	r2, [r7, #4]
 8001bfa:	89b9      	ldrh	r1, [r7, #12]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9302      	str	r3, [sp, #8]
 8001c00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	222e      	movs	r2, #46	; 0x2e
 8001c0e:	f7ff fe3d 	bl	800188c <lcd_ShowChar>
			t++;
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
 8001c14:	3301      	adds	r3, #1
 8001c16:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	7dbb      	ldrb	r3, [r7, #22]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	fb12 f303 	smulbb	r3, r2, r3
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	89fb      	ldrh	r3, [r7, #14]
 8001c2e:	4413      	add	r3, r2
 8001c30:	b298      	uxth	r0, r3
 8001c32:	7cfb      	ldrb	r3, [r7, #19]
 8001c34:	3330      	adds	r3, #48	; 0x30
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	88bc      	ldrh	r4, [r7, #4]
 8001c3a:	89b9      	ldrh	r1, [r7, #12]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	f7ff fe1e 	bl	800188c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	3301      	adds	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
 8001c56:	7dfa      	ldrb	r2, [r7, #23]
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3a3      	bcc.n	8001ba6 <lcd_ShowFloatNum+0x46>
	}
}
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}
 8001c68:	42c80000 	.word	0x42c80000
 8001c6c:	cccccccd 	.word	0xcccccccd

08001c70 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <lcd_SetDir+0x44>)
 8001c8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c90:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <lcd_SetDir+0x44>)
 8001c94:	22f0      	movs	r2, #240	; 0xf0
 8001c96:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c98:	e006      	b.n	8001ca8 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <lcd_SetDir+0x44>)
 8001c9c:	22f0      	movs	r2, #240	; 0xf0
 8001c9e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <lcd_SetDir+0x44>)
 8001ca2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ca6:	805a      	strh	r2, [r3, #2]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	20000244 	.word	0x20000244

08001cb8 <lcd_init>:


void lcd_init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc2:	48aa      	ldr	r0, [pc, #680]	; (8001f6c <lcd_init+0x2b4>)
 8001cc4:	f002 fe08 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001cc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ccc:	f001 fb1e 	bl	800330c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd6:	48a5      	ldr	r0, [pc, #660]	; (8001f6c <lcd_init+0x2b4>)
 8001cd8:	f002 fdfe 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001cdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ce0:	f001 fb14 	bl	800330c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff ffc3 	bl	8001c70 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001cea:	20d3      	movs	r0, #211	; 0xd3
 8001cec:	f7ff fcd0 	bl	8001690 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001cf0:	f7ff fcee 	bl	80016d0 <LCD_RD_DATA>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b9d      	ldr	r3, [pc, #628]	; (8001f70 <lcd_init+0x2b8>)
 8001cfa:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cfc:	f7ff fce8 	bl	80016d0 <LCD_RD_DATA>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b9a      	ldr	r3, [pc, #616]	; (8001f70 <lcd_init+0x2b8>)
 8001d06:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d08:	f7ff fce2 	bl	80016d0 <LCD_RD_DATA>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b97      	ldr	r3, [pc, #604]	; (8001f70 <lcd_init+0x2b8>)
 8001d12:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001d14:	4b96      	ldr	r3, [pc, #600]	; (8001f70 <lcd_init+0x2b8>)
 8001d16:	889b      	ldrh	r3, [r3, #4]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	4b94      	ldr	r3, [pc, #592]	; (8001f70 <lcd_init+0x2b8>)
 8001d1e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001d20:	f7ff fcd6 	bl	80016d0 <LCD_RD_DATA>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b91      	ldr	r3, [pc, #580]	; (8001f70 <lcd_init+0x2b8>)
 8001d2a:	889b      	ldrh	r3, [r3, #4]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4b8f      	ldr	r3, [pc, #572]	; (8001f70 <lcd_init+0x2b8>)
 8001d32:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001d34:	20cf      	movs	r0, #207	; 0xcf
 8001d36:	f7ff fcab 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fcb8 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d40:	20c1      	movs	r0, #193	; 0xc1
 8001d42:	f7ff fcb5 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d46:	2030      	movs	r0, #48	; 0x30
 8001d48:	f7ff fcb2 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d4c:	20ed      	movs	r0, #237	; 0xed
 8001d4e:	f7ff fc9f 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d52:	2064      	movs	r0, #100	; 0x64
 8001d54:	f7ff fcac 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f7ff fca9 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d5e:	2012      	movs	r0, #18
 8001d60:	f7ff fca6 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d64:	2081      	movs	r0, #129	; 0x81
 8001d66:	f7ff fca3 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d6a:	20e8      	movs	r0, #232	; 0xe8
 8001d6c:	f7ff fc90 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d70:	2085      	movs	r0, #133	; 0x85
 8001d72:	f7ff fc9d 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d76:	2010      	movs	r0, #16
 8001d78:	f7ff fc9a 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d7c:	207a      	movs	r0, #122	; 0x7a
 8001d7e:	f7ff fc97 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d82:	20cb      	movs	r0, #203	; 0xcb
 8001d84:	f7ff fc84 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d88:	2039      	movs	r0, #57	; 0x39
 8001d8a:	f7ff fc91 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d8e:	202c      	movs	r0, #44	; 0x2c
 8001d90:	f7ff fc8e 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff fc8b 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d9a:	2034      	movs	r0, #52	; 0x34
 8001d9c:	f7ff fc88 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7ff fc85 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001da6:	20f7      	movs	r0, #247	; 0xf7
 8001da8:	f7ff fc72 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001dac:	2020      	movs	r0, #32
 8001dae:	f7ff fc7f 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001db2:	20ea      	movs	r0, #234	; 0xea
 8001db4:	f7ff fc6c 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff fc79 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff fc76 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001dc4:	20c0      	movs	r0, #192	; 0xc0
 8001dc6:	f7ff fc63 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001dca:	201b      	movs	r0, #27
 8001dcc:	f7ff fc70 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001dd0:	20c1      	movs	r0, #193	; 0xc1
 8001dd2:	f7ff fc5d 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f7ff fc6a 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001ddc:	20c5      	movs	r0, #197	; 0xc5
 8001dde:	f7ff fc57 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001de2:	2030      	movs	r0, #48	; 0x30
 8001de4:	f7ff fc64 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001de8:	2030      	movs	r0, #48	; 0x30
 8001dea:	f7ff fc61 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001dee:	20c7      	movs	r0, #199	; 0xc7
 8001df0:	f7ff fc4e 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001df4:	20b7      	movs	r0, #183	; 0xb7
 8001df6:	f7ff fc5b 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001dfa:	2036      	movs	r0, #54	; 0x36
 8001dfc:	f7ff fc48 	bl	8001690 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001e00:	2008      	movs	r0, #8
 8001e02:	f7ff fc55 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001e06:	203a      	movs	r0, #58	; 0x3a
 8001e08:	f7ff fc42 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001e0c:	2055      	movs	r0, #85	; 0x55
 8001e0e:	f7ff fc4f 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001e12:	20b1      	movs	r0, #177	; 0xb1
 8001e14:	f7ff fc3c 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff fc49 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001e1e:	201a      	movs	r0, #26
 8001e20:	f7ff fc46 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001e24:	20b6      	movs	r0, #182	; 0xb6
 8001e26:	f7ff fc33 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001e2a:	200a      	movs	r0, #10
 8001e2c:	f7ff fc40 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001e30:	20a2      	movs	r0, #162	; 0xa2
 8001e32:	f7ff fc3d 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e36:	20f2      	movs	r0, #242	; 0xf2
 8001e38:	f7ff fc2a 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff fc37 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e42:	2026      	movs	r0, #38	; 0x26
 8001e44:	f7ff fc24 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f7ff fc31 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e4e:	20e0      	movs	r0, #224	; 0xe0
 8001e50:	f7ff fc1e 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e54:	200f      	movs	r0, #15
 8001e56:	f7ff fc2b 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e5a:	202a      	movs	r0, #42	; 0x2a
 8001e5c:	f7ff fc28 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e60:	2028      	movs	r0, #40	; 0x28
 8001e62:	f7ff fc25 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e66:	2008      	movs	r0, #8
 8001e68:	f7ff fc22 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e6c:	200e      	movs	r0, #14
 8001e6e:	f7ff fc1f 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e72:	2008      	movs	r0, #8
 8001e74:	f7ff fc1c 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e78:	2054      	movs	r0, #84	; 0x54
 8001e7a:	f7ff fc19 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e7e:	20a9      	movs	r0, #169	; 0xa9
 8001e80:	f7ff fc16 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e84:	2043      	movs	r0, #67	; 0x43
 8001e86:	f7ff fc13 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e8a:	200a      	movs	r0, #10
 8001e8c:	f7ff fc10 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e90:	200f      	movs	r0, #15
 8001e92:	f7ff fc0d 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fc0a 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fc07 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff fc04 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff fc01 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001eae:	20e1      	movs	r0, #225	; 0xe1
 8001eb0:	f7ff fbee 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff fbfb 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001eba:	2015      	movs	r0, #21
 8001ebc:	f7ff fbf8 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001ec0:	2017      	movs	r0, #23
 8001ec2:	f7ff fbf5 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001ec6:	2007      	movs	r0, #7
 8001ec8:	f7ff fbf2 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001ecc:	2011      	movs	r0, #17
 8001ece:	f7ff fbef 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001ed2:	2006      	movs	r0, #6
 8001ed4:	f7ff fbec 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001ed8:	202b      	movs	r0, #43	; 0x2b
 8001eda:	f7ff fbe9 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001ede:	2056      	movs	r0, #86	; 0x56
 8001ee0:	f7ff fbe6 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001ee4:	203c      	movs	r0, #60	; 0x3c
 8001ee6:	f7ff fbe3 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001eea:	2005      	movs	r0, #5
 8001eec:	f7ff fbe0 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ef0:	2010      	movs	r0, #16
 8001ef2:	f7ff fbdd 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ef6:	200f      	movs	r0, #15
 8001ef8:	f7ff fbda 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001efc:	203f      	movs	r0, #63	; 0x3f
 8001efe:	f7ff fbd7 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f02:	203f      	movs	r0, #63	; 0x3f
 8001f04:	f7ff fbd4 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f08:	200f      	movs	r0, #15
 8001f0a:	f7ff fbd1 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001f0e:	202b      	movs	r0, #43	; 0x2b
 8001f10:	f7ff fbbe 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7ff fbcb 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f7ff fbc8 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f7ff fbc5 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001f26:	203f      	movs	r0, #63	; 0x3f
 8001f28:	f7ff fbc2 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001f2c:	202a      	movs	r0, #42	; 0x2a
 8001f2e:	f7ff fbaf 	bl	8001690 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff fbbc 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f7ff fbb9 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff fbb6 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f44:	20ef      	movs	r0, #239	; 0xef
 8001f46:	f7ff fbb3 	bl	80016b0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f4a:	2011      	movs	r0, #17
 8001f4c:	f7ff fba0 	bl	8001690 <LCD_WR_REG>
	HAL_Delay(120);
 8001f50:	2078      	movs	r0, #120	; 0x78
 8001f52:	f001 f9db 	bl	800330c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f56:	2029      	movs	r0, #41	; 0x29
 8001f58:	f7ff fb9a 	bl	8001690 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f62:	4804      	ldr	r0, [pc, #16]	; (8001f74 <lcd_init+0x2bc>)
 8001f64:	f002 fcb8 	bl	80048d8 <HAL_GPIO_WritePin>
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	20000244 	.word	0x20000244
 8001f74:	40020000 	.word	0x40020000

08001f78 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b08b      	sub	sp, #44	; 0x2c
 8001f7c:	af04      	add	r7, sp, #16
 8001f7e:	60ba      	str	r2, [r7, #8]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4603      	mov	r3, r0
 8001f84:	81fb      	strh	r3, [r7, #14]
 8001f86:	460b      	mov	r3, r1
 8001f88:	81bb      	strh	r3, [r7, #12]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001f8e:	89fb      	ldrh	r3, [r7, #14]
 8001f90:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001f96:	e048      	b.n	800202a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d145      	bne.n	800202a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f9e:	89fa      	ldrh	r2, [r7, #14]
 8001fa0:	4b26      	ldr	r3, [pc, #152]	; (800203c <lcd_ShowStr+0xc4>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	1acb      	subs	r3, r1, r3
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dc3f      	bgt.n	8002034 <lcd_ShowStr+0xbc>
 8001fb4:	89ba      	ldrh	r2, [r7, #12]
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <lcd_ShowStr+0xc4>)
 8001fb8:	885b      	ldrh	r3, [r3, #2]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fc0:	1acb      	subs	r3, r1, r3
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	dc36      	bgt.n	8002034 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b80      	cmp	r3, #128	; 0x80
 8001fcc:	d902      	bls.n	8001fd4 <lcd_ShowStr+0x5c>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	75fb      	strb	r3, [r7, #23]
 8001fd2:	e02a      	b.n	800202a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b0d      	cmp	r3, #13
 8001fda:	d10b      	bne.n	8001ff4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001fdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	89bb      	ldrh	r3, [r7, #12]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001fe8:	8abb      	ldrh	r3, [r7, #20]
 8001fea:	81fb      	strh	r3, [r7, #14]
					str++;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	e017      	b.n	8002024 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	781a      	ldrb	r2, [r3, #0]
 8001ff8:	88fc      	ldrh	r4, [r7, #6]
 8001ffa:	89b9      	ldrh	r1, [r7, #12]
 8001ffc:	89f8      	ldrh	r0, [r7, #14]
 8001ffe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002002:	9302      	str	r3, [sp, #8]
 8002004:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4623      	mov	r3, r4
 8002010:	f7ff fc3c 	bl	800188c <lcd_ShowChar>
					x+=sizey/2;
 8002014:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002018:	085b      	lsrs	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	b29a      	uxth	r2, r3
 800201e:	89fb      	ldrh	r3, [r7, #14]
 8002020:	4413      	add	r3, r2
 8002022:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	3301      	adds	r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1b2      	bne.n	8001f98 <lcd_ShowStr+0x20>
 8002032:	e000      	b.n	8002036 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002034:	bf00      	nop
			}
		}
	}
}
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	20000244 	.word	0x20000244

08002040 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <led7_Scan+0x104>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <led7_Scan+0x104>)
 800204e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <led7_Scan+0x108>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a3d      	ldr	r2, [pc, #244]	; (800214c <led7_Scan+0x10c>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b21a      	sxth	r2, r3
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <led7_Scan+0x104>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b21b      	sxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b21b      	sxth	r3, r3
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <led7_Scan+0x104>)
 800206a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <led7_Scan+0x108>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d847      	bhi.n	8002104 <led7_Scan+0xc4>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <led7_Scan+0x3c>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	0800208d 	.word	0x0800208d
 8002080:	080020ab 	.word	0x080020ab
 8002084:	080020c9 	.word	0x080020c9
 8002088:	080020e7 	.word	0x080020e7
	case 0:
		spi_buffer |= 0x00b0;
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <led7_Scan+0x104>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <led7_Scan+0x104>)
 8002098:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800209a:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <led7_Scan+0x104>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <led7_Scan+0x104>)
 80020a6:	801a      	strh	r2, [r3, #0]
		break;
 80020a8:	e02d      	b.n	8002106 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <led7_Scan+0x104>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b23      	ldr	r3, [pc, #140]	; (8002144 <led7_Scan+0x104>)
 80020b6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <led7_Scan+0x104>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	f023 0320 	bic.w	r3, r3, #32
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <led7_Scan+0x104>)
 80020c4:	801a      	strh	r2, [r3, #0]
		break;
 80020c6:	e01e      	b.n	8002106 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <led7_Scan+0x104>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <led7_Scan+0x104>)
 80020d4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80020d6:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <led7_Scan+0x104>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	f023 0310 	bic.w	r3, r3, #16
 80020de:	b29a      	uxth	r2, r3
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <led7_Scan+0x104>)
 80020e2:	801a      	strh	r2, [r3, #0]
		break;
 80020e4:	e00f      	b.n	8002106 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <led7_Scan+0x104>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <led7_Scan+0x104>)
 80020f2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <led7_Scan+0x104>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <led7_Scan+0x104>)
 8002100:	801a      	strh	r2, [r3, #0]
		break;
 8002102:	e000      	b.n	8002106 <led7_Scan+0xc6>
	default:
		break;
 8002104:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <led7_Scan+0x108>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	425a      	negs	r2, r3
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	bf58      	it	pl
 8002118:	4253      	negpl	r3, r2
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <led7_Scan+0x108>)
 800211c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2140      	movs	r1, #64	; 0x40
 8002122:	480b      	ldr	r0, [pc, #44]	; (8002150 <led7_Scan+0x110>)
 8002124:	f002 fbd8 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002128:	2301      	movs	r3, #1
 800212a:	2202      	movs	r2, #2
 800212c:	4905      	ldr	r1, [pc, #20]	; (8002144 <led7_Scan+0x104>)
 800212e:	4809      	ldr	r0, [pc, #36]	; (8002154 <led7_Scan+0x114>)
 8002130:	f003 fd5f 	bl	8005bf2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002134:	2201      	movs	r2, #1
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	4805      	ldr	r0, [pc, #20]	; (8002150 <led7_Scan+0x110>)
 800213a:	f002 fbcd 	bl	80048d8 <HAL_GPIO_WritePin>
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	2000000e 	.word	0x2000000e
 8002148:	200000a4 	.word	0x200000a4
 800214c:	20000000 	.word	0x20000000
 8002150:	40021800 	.word	0x40021800
 8002154:	2000028c 	.word	0x2000028c

08002158 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	4613      	mov	r3, r2
 8002164:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0e      	blt.n	800218a <led7_SetDigit+0x32>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b09      	cmp	r3, #9
 8002170:	dc0b      	bgt.n	800218a <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <led7_SetDigit+0x40>)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	781a      	ldrb	r2, [r3, #0]
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	b2d9      	uxtb	r1, r3
 8002180:	4a06      	ldr	r2, [pc, #24]	; (800219c <led7_SetDigit+0x44>)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4413      	add	r3, r2
 8002186:	460a      	mov	r2, r1
 8002188:	701a      	strb	r2, [r3, #0]
	}
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000004 	.word	0x20000004
 800219c:	20000000 	.word	0x20000000

080021a0 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d107      	bne.n	80021c0 <led7_SetColon+0x20>
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <led7_SetColon+0x3c>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	f023 0308 	bic.w	r3, r3, #8
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <led7_SetColon+0x3c>)
 80021bc:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 80021be:	e006      	b.n	80021ce <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <led7_SetColon+0x3c>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <led7_SetColon+0x3c>)
 80021cc:	801a      	strh	r2, [r3, #0]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	2000000e 	.word	0x2000000e

080021e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80021e4:	f001 f820 	bl	8003228 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80021e8:	f000 f82e 	bl	8002248 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80021ec:	f7ff f8d4 	bl	8001398 <MX_GPIO_Init>
	MX_TIM2_Init();
 80021f0:	f000 fdaa 	bl	8002d48 <MX_TIM2_Init>
	MX_SPI1_Init();
 80021f4:	f000 fc72 	bl	8002adc <MX_SPI1_Init>
	MX_FSMC_Init();
 80021f8:	f7fe fffe 	bl	80011f8 <MX_FSMC_Init>
	MX_I2C1_Init();
 80021fc:	f7ff f9d2 	bl	80015a4 <MX_I2C1_Init>
	MX_TIM13_Init();
 8002200:	f000 fdee 	bl	8002de0 <MX_TIM13_Init>
	MX_DMA_Init();
 8002204:	f7fe ff86 	bl	8001114 <MX_DMA_Init>
	MX_ADC1_Init();
 8002208:	f7fe fdcc 	bl	8000da4 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800220c:	f000 ff44 	bl	8003098 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 8002210:	f000 f884 	bl	800231c <system_init>
	led7_SetColon(1);
 8002214:	2001      	movs	r0, #1
 8002216:	f7ff ffc3 	bl	80021a0 <led7_SetColon>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	lcd_Clear(BLACK);
 800221a:	2000      	movs	r0, #0
 800221c:	f7ff fab6 	bl	800178c <lcd_Clear>
	updateTime();
 8002220:	f000 f9d2 	bl	80025c8 <updateTime>
	while (1) {
		while (!flag_timer2)
 8002224:	bf00      	nop
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <main+0x64>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0fb      	beq.n	8002226 <main+0x46>
			;
		flag_timer2 = 0;
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <main+0x64>)
 8002230:	2200      	movs	r2, #0
 8002232:	801a      	strh	r2, [r3, #0]
		button_Scan();
 8002234:	f7fe fee0 	bl	8000ff8 <button_Scan>
		test_LedDebug();
 8002238:	f000 f886 	bl	8002348 <test_LedDebug>
		process();
 800223c:	f000 fa28 	bl	8002690 <process>
		while (!flag_timer2)
 8002240:	e7f0      	b.n	8002224 <main+0x44>
 8002242:	bf00      	nop
 8002244:	200000b0 	.word	0x200000b0

08002248 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b094      	sub	sp, #80	; 0x50
 800224c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800224e:	f107 0320 	add.w	r3, r7, #32
 8002252:	2230      	movs	r2, #48	; 0x30
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f006 fb2c 	bl	80088b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <SystemClock_Config+0xcc>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	4a27      	ldr	r2, [pc, #156]	; (8002314 <SystemClock_Config+0xcc>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6413      	str	r3, [r2, #64]	; 0x40
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <SystemClock_Config+0xcc>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002288:	2300      	movs	r3, #0
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <SystemClock_Config+0xd0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a21      	ldr	r2, [pc, #132]	; (8002318 <SystemClock_Config+0xd0>)
 8002292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <SystemClock_Config+0xd0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a8:	2301      	movs	r3, #1
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ac:	2310      	movs	r3, #16
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b0:	2302      	movs	r3, #2
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80022b8:	2308      	movs	r3, #8
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80022bc:	23a8      	movs	r3, #168	; 0xa8
 80022be:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022c0:	2302      	movs	r3, #2
 80022c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80022c4:	2304      	movs	r3, #4
 80022c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80022c8:	f107 0320 	add.w	r3, r7, #32
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 ff93 	bl	80051f8 <HAL_RCC_OscConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <SystemClock_Config+0x94>
		Error_Handler();
 80022d8:	f000 fa3e 	bl	8002758 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80022dc:	230f      	movs	r3, #15
 80022de:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e0:	2302      	movs	r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80022ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022f2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	2105      	movs	r1, #5
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 f9f4 	bl	80056e8 <HAL_RCC_ClockConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <SystemClock_Config+0xc2>
		Error_Handler();
 8002306:	f000 fa27 	bl	8002758 <Error_Handler>
	}
}
 800230a:	bf00      	nop
 800230c:	3750      	adds	r7, #80	; 0x50
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	40007000 	.word	0x40007000

0800231c <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	timer_init();
 8002320:	f000 fb8c 	bl	8002a3c <timer_init>
	button_init();
 8002324:	f7fe fe5c 	bl	8000fe0 <button_init>
	lcd_init();
 8002328:	f7ff fcc6 	bl	8001cb8 <lcd_init>
	sensor_init();
 800232c:	f000 fa1a 	bl	8002764 <sensor_init>
	buzzer_init();
 8002330:	f7fe fece 	bl	80010d0 <buzzer_init>
	ds3231_init();
 8002334:	f7fe ff0e 	bl	8001154 <ds3231_init>
	uart_init_rs232();
 8002338:	f000 fe16 	bl	8002f68 <uart_init_rs232>
	setTimer2(50);
 800233c:	2032      	movs	r0, #50	; 0x32
 800233e:	f000 fb87 	bl	8002a50 <setTimer2>
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug() {
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1) % 20;
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <test_LedDebug+0x3c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <test_LedDebug+0x40>)
 8002354:	fb83 1302 	smull	r1, r3, r3, r2
 8002358:	10d9      	asrs	r1, r3, #3
 800235a:	17d3      	asrs	r3, r2, #31
 800235c:	1ac9      	subs	r1, r1, r3
 800235e:	460b      	mov	r3, r1
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	1ad1      	subs	r1, r2, r3
 8002368:	b2ca      	uxtb	r2, r1
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <test_LedDebug+0x3c>)
 800236c:	701a      	strb	r2, [r3, #0]
	if (count_led_debug == 0) {
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <test_LedDebug+0x3c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002376:	2110      	movs	r1, #16
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <test_LedDebug+0x44>)
 800237a:	f002 fac6 	bl	800490a <HAL_GPIO_TogglePin>
	}
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200000ac 	.word	0x200000ac
 8002388:	66666667 	.word	0x66666667
 800238c:	40021000 	.word	0x40021000

08002390 <displayAdc>:
		return 0;
}

uint8_t count_adc = 0;

void displayAdc() {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 8002396:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <displayAdc+0x148>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <displayAdc+0x14c>)
 800239e:	fb83 1302 	smull	r1, r3, r3, r2
 80023a2:	10d9      	asrs	r1, r3, #3
 80023a4:	17d3      	asrs	r3, r2, #31
 80023a6:	1ac9      	subs	r1, r1, r3
 80023a8:	460b      	mov	r3, r1
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	1ad1      	subs	r1, r2, r3
 80023b2:	b2ca      	uxtb	r2, r1
 80023b4:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <displayAdc+0x148>)
 80023b6:	701a      	strb	r2, [r3, #0]
	if (count_adc == 0) {
 80023b8:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <displayAdc+0x148>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f040 8088 	bne.w	80024d2 <displayAdc+0x142>
		sensor_Read();
 80023c2:	f000 f9dd 	bl	8002780 <sensor_Read>
		lcd_ShowStr(20, 100, "Power Consumption:", RED, BLACK, 16, 0);
 80023c6:	2300      	movs	r3, #0
 80023c8:	9302      	str	r3, [sp, #8]
 80023ca:	2310      	movs	r3, #16
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	2300      	movs	r3, #0
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023d6:	4a42      	ldr	r2, [pc, #264]	; (80024e0 <displayAdc+0x150>)
 80023d8:	2164      	movs	r1, #100	; 0x64
 80023da:	2014      	movs	r0, #20
 80023dc:	f7ff fdcc 	bl	8001f78 <lcd_ShowStr>
		lcd_ShowFloatNum(170, 100, sensor_GetPowerConsumption(), 4, RED, BLACK,
 80023e0:	f000 fa5a 	bl	8002898 <sensor_GetPowerConsumption>
 80023e4:	eef0 7a40 	vmov.f32	s15, s0
 80023e8:	2310      	movs	r3, #16
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	2300      	movs	r3, #0
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023f4:	2204      	movs	r2, #4
 80023f6:	eeb0 0a67 	vmov.f32	s0, s15
 80023fa:	2164      	movs	r1, #100	; 0x64
 80023fc:	20aa      	movs	r0, #170	; 0xaa
 80023fe:	f7ff fbaf 	bl	8001b60 <lcd_ShowFloatNum>
				16);
		lcd_ShowStr(20, 120, "Light:", RED, BLACK, 16, 0);
 8002402:	2300      	movs	r3, #0
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	2310      	movs	r3, #16
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	2300      	movs	r3, #0
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002412:	4a34      	ldr	r2, [pc, #208]	; (80024e4 <displayAdc+0x154>)
 8002414:	2178      	movs	r1, #120	; 0x78
 8002416:	2014      	movs	r0, #20
 8002418:	f7ff fdae 	bl	8001f78 <lcd_ShowStr>
		lcd_Fill(170, 120, 250, 136, BLACK);
 800241c:	2300      	movs	r3, #0
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2388      	movs	r3, #136	; 0x88
 8002422:	22fa      	movs	r2, #250	; 0xfa
 8002424:	2178      	movs	r1, #120	; 0x78
 8002426:	20aa      	movs	r0, #170	; 0xaa
 8002428:	f7ff f9e2 	bl	80017f0 <lcd_Fill>
		lcd_ShowStr(170, 120, sensor_GetLightIntensity(), RED, BLACK, 16, 0);
 800242c:	f000 faf0 	bl	8002a10 <sensor_GetLightIntensity>
 8002430:	4602      	mov	r2, r0
 8002432:	2300      	movs	r3, #0
 8002434:	9302      	str	r3, [sp, #8]
 8002436:	2310      	movs	r3, #16
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	2300      	movs	r3, #0
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002442:	2178      	movs	r1, #120	; 0x78
 8002444:	20aa      	movs	r0, #170	; 0xaa
 8002446:	f7ff fd97 	bl	8001f78 <lcd_ShowStr>
		lcd_ShowStr(20, 140, "Temperature:", RED, BLACK, 16, 0);
 800244a:	2300      	movs	r3, #0
 800244c:	9302      	str	r3, [sp, #8]
 800244e:	2310      	movs	r3, #16
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800245a:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <displayAdc+0x158>)
 800245c:	218c      	movs	r1, #140	; 0x8c
 800245e:	2014      	movs	r0, #20
 8002460:	f7ff fd8a 	bl	8001f78 <lcd_ShowStr>
		lcd_ShowIntNum(170, 140, sensor_GetTemperature(), 4, RED, BLACK, 16);
 8002464:	f000 f9f8 	bl	8002858 <sensor_GetTemperature>
 8002468:	eef0 7a40 	vmov.f32	s15, s0
 800246c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002470:	ee17 3a90 	vmov	r3, s15
 8002474:	b29a      	uxth	r2, r3
 8002476:	2310      	movs	r3, #16
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	2300      	movs	r3, #0
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2304      	movs	r3, #4
 8002486:	218c      	movs	r1, #140	; 0x8c
 8002488:	20aa      	movs	r0, #170	; 0xaa
 800248a:	f7ff faeb 	bl	8001a64 <lcd_ShowIntNum>
		lcd_ShowStr(20, 160, "Humidity:", RED, BLACK, 16, 0);
 800248e:	2300      	movs	r3, #0
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	2310      	movs	r3, #16
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	2300      	movs	r3, #0
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800249e:	4a13      	ldr	r2, [pc, #76]	; (80024ec <displayAdc+0x15c>)
 80024a0:	21a0      	movs	r1, #160	; 0xa0
 80024a2:	2014      	movs	r0, #20
 80024a4:	f7ff fd68 	bl	8001f78 <lcd_ShowStr>
		lcd_ShowIntNum(170, 160, sensor_GetHumidity(), 4, RED, BLACK, 16);
 80024a8:	f000 fa84 	bl	80029b4 <sensor_GetHumidity>
 80024ac:	eef0 7a40 	vmov.f32	s15, s0
 80024b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b4:	ee17 3a90 	vmov	r3, s15
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	2310      	movs	r3, #16
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	2300      	movs	r3, #0
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2304      	movs	r3, #4
 80024ca:	21a0      	movs	r1, #160	; 0xa0
 80024cc:	20aa      	movs	r0, #170	; 0xaa
 80024ce:	f7ff fac9 	bl	8001a64 <lcd_ShowIntNum>
	}
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	200000ad 	.word	0x200000ad
 80024dc:	66666667 	.word	0x66666667
 80024e0:	08009138 	.word	0x08009138
 80024e4:	0800914c 	.word	0x0800914c
 80024e8:	08009154 	.word	0x08009154
 80024ec:	08009164 	.word	0x08009164

080024f0 <turnonBuzzer>:

void turnonBuzzer() {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	static uint8_t buzzer_state = 0;
	if (buzzer_state == 0) {
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <turnonBuzzer+0x2c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <turnonBuzzer+0x1a>
		buzzer_SetVolume(50);
 80024fc:	2032      	movs	r0, #50	; 0x32
 80024fe:	f7fe fdf1 	bl	80010e4 <buzzer_SetVolume>
		buzzer_state = 1;
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <turnonBuzzer+0x2c>)
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
	} else {
		buzzer_SetVolume(0);
		buzzer_state = 0;
	}
}
 8002508:	e005      	b.n	8002516 <turnonBuzzer+0x26>
		buzzer_SetVolume(0);
 800250a:	2000      	movs	r0, #0
 800250c:	f7fe fdea 	bl	80010e4 <buzzer_SetVolume>
		buzzer_state = 0;
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <turnonBuzzer+0x2c>)
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200000ae 	.word	0x200000ae

08002520 <sendUart>:

void sendUart() {
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	uart_Rs232SendString("Power Consumption:");
 8002524:	481e      	ldr	r0, [pc, #120]	; (80025a0 <sendUart+0x80>)
 8002526:	f000 fd2d 	bl	8002f84 <uart_Rs232SendString>
	uart_Rs232SendNum(sensor_GetPowerConsumption());
 800252a:	f000 f9b5 	bl	8002898 <sensor_GetPowerConsumption>
 800252e:	eef0 7a40 	vmov.f32	s15, s0
 8002532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002536:	ee17 0a90 	vmov	r0, s15
 800253a:	f000 fd3d 	bl	8002fb8 <uart_Rs232SendNum>
	uart_Rs232SendString("\n");
 800253e:	4819      	ldr	r0, [pc, #100]	; (80025a4 <sendUart+0x84>)
 8002540:	f000 fd20 	bl	8002f84 <uart_Rs232SendString>
	uart_Rs232SendString("Light:");
 8002544:	4818      	ldr	r0, [pc, #96]	; (80025a8 <sendUart+0x88>)
 8002546:	f000 fd1d 	bl	8002f84 <uart_Rs232SendString>
	uart_Rs232SendString(sensor_GetLightIntensity());
 800254a:	f000 fa61 	bl	8002a10 <sensor_GetLightIntensity>
 800254e:	4603      	mov	r3, r0
 8002550:	4618      	mov	r0, r3
 8002552:	f000 fd17 	bl	8002f84 <uart_Rs232SendString>
	uart_Rs232SendString("\n");
 8002556:	4813      	ldr	r0, [pc, #76]	; (80025a4 <sendUart+0x84>)
 8002558:	f000 fd14 	bl	8002f84 <uart_Rs232SendString>
	uart_Rs232SendString("Temperature:");
 800255c:	4813      	ldr	r0, [pc, #76]	; (80025ac <sendUart+0x8c>)
 800255e:	f000 fd11 	bl	8002f84 <uart_Rs232SendString>
	uart_Rs232SendNum(sensor_GetTemperature());
 8002562:	f000 f979 	bl	8002858 <sensor_GetTemperature>
 8002566:	eef0 7a40 	vmov.f32	s15, s0
 800256a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800256e:	ee17 0a90 	vmov	r0, s15
 8002572:	f000 fd21 	bl	8002fb8 <uart_Rs232SendNum>
	uart_Rs232SendString("\n");
 8002576:	480b      	ldr	r0, [pc, #44]	; (80025a4 <sendUart+0x84>)
 8002578:	f000 fd04 	bl	8002f84 <uart_Rs232SendString>
	uart_Rs232SendString("Humidity:");
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <sendUart+0x90>)
 800257e:	f000 fd01 	bl	8002f84 <uart_Rs232SendString>
	uart_Rs232SendNum(sensor_GetHumidity());
 8002582:	f000 fa17 	bl	80029b4 <sensor_GetHumidity>
 8002586:	eef0 7a40 	vmov.f32	s15, s0
 800258a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800258e:	ee17 0a90 	vmov	r0, s15
 8002592:	f000 fd11 	bl	8002fb8 <uart_Rs232SendNum>
	uart_Rs232SendString("\n");
 8002596:	4803      	ldr	r0, [pc, #12]	; (80025a4 <sendUart+0x84>)
 8002598:	f000 fcf4 	bl	8002f84 <uart_Rs232SendString>
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	08009138 	.word	0x08009138
 80025a4:	08009170 	.word	0x08009170
 80025a8:	0800914c 	.word	0x0800914c
 80025ac:	08009154 	.word	0x08009154
 80025b0:	08009164 	.word	0x08009164

080025b4 <sendAlarm>:

void sendAlarm() {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	uart_Rs232SendString("Humidity is too high!!!!! \n");
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <sendAlarm+0x10>)
 80025ba:	f000 fce3 	bl	8002f84 <uart_Rs232SendString>
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	08009174 	.word	0x08009174

080025c8 <updateTime>:

void updateTime() {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 80025cc:	2118      	movs	r1, #24
 80025ce:	2006      	movs	r0, #6
 80025d0:	f7fe fdf0 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 80025d4:	210b      	movs	r1, #11
 80025d6:	2005      	movs	r0, #5
 80025d8:	f7fe fdec 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 11);
 80025dc:	210b      	movs	r1, #11
 80025de:	2004      	movs	r0, #4
 80025e0:	f7fe fde8 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 2);
 80025e4:	2102      	movs	r1, #2
 80025e6:	2003      	movs	r0, #3
 80025e8:	f7fe fde4 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 11);
 80025ec:	210b      	movs	r1, #11
 80025ee:	2002      	movs	r0, #2
 80025f0:	f7fe fde0 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 30);
 80025f4:	211e      	movs	r1, #30
 80025f6:	2001      	movs	r0, #1
 80025f8:	f7fe fddc 	bl	80011b4 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 30);
 80025fc:	211e      	movs	r1, #30
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe fdd8 	bl	80011b4 <ds3231_Write>
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}

08002608 <displayTime>:

void displayTime() {
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	led7_SetDigit(ds3231_hours / 10, 1, 0);
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <displayTime+0x7c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <displayTime+0x80>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	08db      	lsrs	r3, r3, #3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2200      	movs	r2, #0
 800261c:	2101      	movs	r1, #1
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fd9a 	bl	8002158 <led7_SetDigit>
	led7_SetDigit(ds3231_hours % 10, 1, 0);
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <displayTime+0x7c>)
 8002626:	781a      	ldrb	r2, [r3, #0]
 8002628:	4b17      	ldr	r3, [pc, #92]	; (8002688 <displayTime+0x80>)
 800262a:	fba3 1302 	umull	r1, r3, r3, r2
 800262e:	08d9      	lsrs	r1, r3, #3
 8002630:	460b      	mov	r3, r1
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2200      	movs	r2, #0
 800263e:	2101      	movs	r1, #1
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fd89 	bl	8002158 <led7_SetDigit>
	led7_SetDigit(ds3231_min / 10, 1, 0);
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <displayTime+0x84>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <displayTime+0x80>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2200      	movs	r2, #0
 8002656:	2101      	movs	r1, #1
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fd7d 	bl	8002158 <led7_SetDigit>
	led7_SetDigit(ds3231_min % 10, 1, 0);
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <displayTime+0x84>)
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <displayTime+0x80>)
 8002664:	fba3 1302 	umull	r1, r3, r3, r2
 8002668:	08d9      	lsrs	r1, r3, #3
 800266a:	460b      	mov	r3, r1
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2200      	movs	r2, #0
 8002678:	2101      	movs	r1, #1
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fd6c 	bl	8002158 <led7_SetDigit>
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000195 	.word	0x20000195
 8002688:	cccccccd 	.word	0xcccccccd
 800268c:	20000192 	.word	0x20000192

08002690 <process>:

void process() {
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	switch (mode) {
 8002694:	4b2d      	ldr	r3, [pc, #180]	; (800274c <process+0xbc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d02e      	beq.n	80026fa <process+0x6a>
 800269c:	2b02      	cmp	r3, #2
 800269e:	dc51      	bgt.n	8002744 <process+0xb4>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <process+0x1a>
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d013      	beq.n	80026d0 <process+0x40>
		displayAdc();
		sendUart();
		break;

	default:
		break;
 80026a8:	e04c      	b.n	8002744 <process+0xb4>
		if (sensor_GetHumidity() > 70) {
 80026aa:	f000 f983 	bl	80029b4 <sensor_GetHumidity>
 80026ae:	eef0 7a40 	vmov.f32	s15, s0
 80026b2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002750 <process+0xc0>
 80026b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	dd03      	ble.n	80026c8 <process+0x38>
			mode = ALARM;
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <process+0xbc>)
 80026c2:	2202      	movs	r2, #2
 80026c4:	601a      	str	r2, [r3, #0]
		break;
 80026c6:	e03e      	b.n	8002746 <process+0xb6>
			mode = MONITORING;
 80026c8:	4b20      	ldr	r3, [pc, #128]	; (800274c <process+0xbc>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
		break;
 80026ce:	e03a      	b.n	8002746 <process+0xb6>
		if (sensor_GetHumidity() > 70) {
 80026d0:	f000 f970 	bl	80029b4 <sensor_GetHumidity>
 80026d4:	eef0 7a40 	vmov.f32	s15, s0
 80026d8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002750 <process+0xc0>
 80026dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e4:	dd02      	ble.n	80026ec <process+0x5c>
			mode = ALARM;
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <process+0xbc>)
 80026e8:	2202      	movs	r2, #2
 80026ea:	601a      	str	r2, [r3, #0]
		displayTime();
 80026ec:	f7ff ff8c 	bl	8002608 <displayTime>
		displayAdc();
 80026f0:	f7ff fe4e 	bl	8002390 <displayAdc>
		sendUart();
 80026f4:	f7ff ff14 	bl	8002520 <sendUart>
		break;
 80026f8:	e025      	b.n	8002746 <process+0xb6>
		if (sensor_GetCurrent() <= 70) {
 80026fa:	f000 f851 	bl	80027a0 <sensor_GetCurrent>
 80026fe:	eef0 7a40 	vmov.f32	s15, s0
 8002702:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002750 <process+0xc0>
 8002706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	d802      	bhi.n	8002716 <process+0x86>
			mode = MONITORING;
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <process+0xbc>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
		setTimer2(1000);
 8002716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800271a:	f000 f999 	bl	8002a50 <setTimer2>
		if (flag_timer2 == 1) {
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <process+0xc4>)
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d107      	bne.n	8002736 <process+0xa6>
			setTimer2(1000);
 8002726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800272a:	f000 f991 	bl	8002a50 <setTimer2>
			sendAlarm();
 800272e:	f7ff ff41 	bl	80025b4 <sendAlarm>
			turnonBuzzer();
 8002732:	f7ff fedd 	bl	80024f0 <turnonBuzzer>
		displayTime();
 8002736:	f7ff ff67 	bl	8002608 <displayTime>
		displayAdc();
 800273a:	f7ff fe29 	bl	8002390 <displayAdc>
		sendUart();
 800273e:	f7ff feef 	bl	8002520 <sendUart>
		break;
 8002742:	e000      	b.n	8002746 <process+0xb6>
		break;
 8002744:	bf00      	nop
	}
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200000a8 	.word	0x200000a8
 8002750:	428c0000 	.word	0x428c0000
 8002754:	200000b0 	.word	0x200000b0

08002758 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800275c:	b672      	cpsid	i
}
 800275e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002760:	e7fe      	b.n	8002760 <Error_Handler+0x8>
	...

08002764 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002768:	2205      	movs	r2, #5
 800276a:	4903      	ldr	r1, [pc, #12]	; (8002778 <sensor_init+0x14>)
 800276c:	4803      	ldr	r0, [pc, #12]	; (800277c <sensor_init+0x18>)
 800276e:	f000 fe35 	bl	80033dc <HAL_ADC_Start_DMA>
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000280 	.word	0x20000280
 800277c:	200000c8 	.word	0x200000c8

08002780 <sensor_Read>:

void sensor_Read(){
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002784:	2205      	movs	r2, #5
 8002786:	4903      	ldr	r1, [pc, #12]	; (8002794 <sensor_Read+0x14>)
 8002788:	4803      	ldr	r0, [pc, #12]	; (8002798 <sensor_Read+0x18>)
 800278a:	f000 fe27 	bl	80033dc <HAL_ADC_Start_DMA>
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000280 	.word	0x20000280
 8002798:	200000c8 	.word	0x200000c8
 800279c:	00000000 	.word	0x00000000

080027a0 <sensor_GetCurrent>:

float sensor_GetVoltage(){
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
}

float sensor_GetCurrent(){
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <sensor_GetCurrent+0xa8>)
 80027a6:	885b      	ldrh	r3, [r3, #2]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b0:	ee17 0a90 	vmov	r0, s15
 80027b4:	f7fd fec0 	bl	8000538 <__aeabi_f2d>
 80027b8:	a31f      	add	r3, pc, #124	; (adr r3, 8002838 <sensor_GetCurrent+0x98>)
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f7fd ff13 	bl	80005e8 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <sensor_GetCurrent+0xac>)
 80027d0:	f7fd ff0a 	bl	80005e8 <__aeabi_dmul>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	a318      	add	r3, pc, #96	; (adr r3, 8002840 <sensor_GetCurrent+0xa0>)
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f7fe f82b 	bl	800083c <__aeabi_ddiv>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <sensor_GetCurrent+0xb0>)
 80027f4:	f7fd fd40 	bl	8000278 <__aeabi_dsub>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <sensor_GetCurrent+0xb4>)
 8002806:	f7fd feef 	bl	80005e8 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <sensor_GetCurrent+0xb0>)
 8002818:	f7fe f810 	bl	800083c <__aeabi_ddiv>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f7fe f8f2 	bl	8000a0c <__aeabi_d2f>
 8002828:	4603      	mov	r3, r0
 800282a:	ee07 3a90 	vmov	s15, r3
}
 800282e:	eeb0 0a67 	vmov.f32	s0, s15
 8002832:	bd80      	pop	{r7, pc}
 8002834:	f3af 8000 	nop.w
 8002838:	66666666 	.word	0x66666666
 800283c:	400a6666 	.word	0x400a6666
 8002840:	147ae148 	.word	0x147ae148
 8002844:	40a4b2ee 	.word	0x40a4b2ee
 8002848:	20000280 	.word	0x20000280
 800284c:	408f4000 	.word	0x408f4000
 8002850:	40040000 	.word	0x40040000
 8002854:	40140000 	.word	0x40140000

08002858 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <sensor_GetTemperature+0x30>)
 800285e:	891b      	ldrh	r3, [r3, #8]
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002868:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800288c <sensor_GetTemperature+0x34>
 800286c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002890 <sensor_GetTemperature+0x38>
 8002874:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002878:	eef0 7a66 	vmov.f32	s15, s13
}
 800287c:	eeb0 0a67 	vmov.f32	s0, s15
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	20000280 	.word	0x20000280
 800288c:	43a50000 	.word	0x43a50000
 8002890:	457ff000 	.word	0x457ff000
 8002894:	00000000 	.word	0x00000000

08002898 <sensor_GetPowerConsumption>:

float sensor_GetPowerConsumption(){
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	af00      	add	r7, sp, #0
	return (((float)adc_receive[0]*3.3*12)/(4095*1.565)) * ((((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5);
 800289c:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <sensor_GetPowerConsumption+0x108>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a8:	ee17 0a90 	vmov	r0, s15
 80028ac:	f7fd fe44 	bl	8000538 <__aeabi_f2d>
 80028b0:	a335      	add	r3, pc, #212	; (adr r3, 8002988 <sensor_GetPowerConsumption+0xf0>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	f7fd fe97 	bl	80005e8 <__aeabi_dmul>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <sensor_GetPowerConsumption+0x10c>)
 80028c8:	f7fd fe8e 	bl	80005e8 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	a32e      	add	r3, pc, #184	; (adr r3, 8002990 <sensor_GetPowerConsumption+0xf8>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f7fd ffaf 	bl	800083c <__aeabi_ddiv>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4614      	mov	r4, r2
 80028e4:	461d      	mov	r5, r3
 80028e6:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <sensor_GetPowerConsumption+0x108>)
 80028e8:	885b      	ldrh	r3, [r3, #2]
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f2:	ee17 0a90 	vmov	r0, s15
 80028f6:	f7fd fe1f 	bl	8000538 <__aeabi_f2d>
 80028fa:	a323      	add	r3, pc, #140	; (adr r3, 8002988 <sensor_GetPowerConsumption+0xf0>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fd fe72 	bl	80005e8 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <sensor_GetPowerConsumption+0x110>)
 8002912:	f7fd fe69 	bl	80005e8 <__aeabi_dmul>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	a31e      	add	r3, pc, #120	; (adr r3, 8002998 <sensor_GetPowerConsumption+0x100>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f7fd ff8a 	bl	800083c <__aeabi_ddiv>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <sensor_GetPowerConsumption+0x114>)
 8002936:	f7fd fc9f 	bl	8000278 <__aeabi_dsub>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <sensor_GetPowerConsumption+0x118>)
 8002948:	f7fd fe4e 	bl	80005e8 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <sensor_GetPowerConsumption+0x114>)
 800295a:	f7fd ff6f 	bl	800083c <__aeabi_ddiv>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4620      	mov	r0, r4
 8002964:	4629      	mov	r1, r5
 8002966:	f7fd fe3f 	bl	80005e8 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f7fe f84b 	bl	8000a0c <__aeabi_d2f>
 8002976:	4603      	mov	r3, r0
 8002978:	ee07 3a90 	vmov	s15, r3
}
 800297c:	eeb0 0a67 	vmov.f32	s0, s15
 8002980:	bdb0      	pop	{r4, r5, r7, pc}
 8002982:	bf00      	nop
 8002984:	f3af 8000 	nop.w
 8002988:	66666666 	.word	0x66666666
 800298c:	400a6666 	.word	0x400a6666
 8002990:	cccccccd 	.word	0xcccccccd
 8002994:	40b908ac 	.word	0x40b908ac
 8002998:	147ae148 	.word	0x147ae148
 800299c:	40a4b2ee 	.word	0x40a4b2ee
 80029a0:	20000280 	.word	0x20000280
 80029a4:	40280000 	.word	0x40280000
 80029a8:	408f4000 	.word	0x408f4000
 80029ac:	40040000 	.word	0x40040000
 80029b0:	40140000 	.word	0x40140000

080029b4 <sensor_GetHumidity>:

float sensor_GetHumidity(){
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
	if (adc_receive[3] < 180) return 0;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <sensor_GetHumidity+0x4c>)
 80029ba:	88db      	ldrh	r3, [r3, #6]
 80029bc:	2bb3      	cmp	r3, #179	; 0xb3
 80029be:	d802      	bhi.n	80029c6 <sensor_GetHumidity+0x12>
 80029c0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8002a04 <sensor_GetHumidity+0x50>
 80029c4:	e015      	b.n	80029f2 <sensor_GetHumidity+0x3e>
	else if (adc_receive[3] > 3780) return 100;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <sensor_GetHumidity+0x4c>)
 80029c8:	88db      	ldrh	r3, [r3, #6]
 80029ca:	f640 62c4 	movw	r2, #3780	; 0xec4
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d902      	bls.n	80029d8 <sensor_GetHumidity+0x24>
 80029d2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002a08 <sensor_GetHumidity+0x54>
 80029d6:	e00c      	b.n	80029f2 <sensor_GetHumidity+0x3e>
	else {
		return (adc_receive[3] - 180) * 100 / (3780 - 180);
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <sensor_GetHumidity+0x4c>)
 80029da:	88db      	ldrh	r3, [r3, #6]
 80029dc:	3bb4      	subs	r3, #180	; 0xb4
 80029de:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <sensor_GetHumidity+0x58>)
 80029e0:	fb82 1203 	smull	r1, r2, r2, r3
 80029e4:	10d2      	asrs	r2, r2, #3
 80029e6:	17db      	asrs	r3, r3, #31
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	}
}
 80029f2:	eeb0 0a67 	vmov.f32	s0, s15
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000280 	.word	0x20000280
 8002a04:	00000000 	.word	0x00000000
 8002a08:	42c80000 	.word	0x42c80000
 8002a0c:	38e38e39 	.word	0x38e38e39

08002a10 <sensor_GetLightIntensity>:

char* sensor_GetLightIntensity(){
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
	if (adc_receive[2] > 1500) return "Weak";
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <sensor_GetLightIntensity+0x20>)
 8002a16:	889b      	ldrh	r3, [r3, #4]
 8002a18:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <sensor_GetLightIntensity+0x14>
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <sensor_GetLightIntensity+0x24>)
 8002a22:	e000      	b.n	8002a26 <sensor_GetLightIntensity+0x16>
	else return "Strong";
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <sensor_GetLightIntensity+0x28>)
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	20000280 	.word	0x20000280
 8002a34:	08009190 	.word	0x08009190
 8002a38:	08009198 	.word	0x08009198

08002a3c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002a40:	4802      	ldr	r0, [pc, #8]	; (8002a4c <timer_init+0x10>)
 8002a42:	f003 fe89 	bl	8006758 <HAL_TIM_Base_Start_IT>
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000032c 	.word	0x2000032c

08002a50 <setTimer2>:

void setTimer2(uint16_t duration){
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <setTimer2+0x2c>)
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <setTimer2+0x2c>)
 8002a62:	881a      	ldrh	r2, [r3, #0]
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <setTimer2+0x30>)
 8002a66:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <setTimer2+0x34>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	801a      	strh	r2, [r3, #0]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	200000b4 	.word	0x200000b4
 8002a80:	200000b2 	.word	0x200000b2
 8002a84:	200000b0 	.word	0x200000b0

08002a88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a98:	d116      	bne.n	8002ac8 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d010      	beq.n	8002ac4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002aac:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002abe:	881a      	ldrh	r2, [r3, #0]
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ac2:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002ac4:	f7ff fabc 	bl	8002040 <led7_Scan>
	}
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200000b2 	.word	0x200000b2
 8002ad4:	200000b0 	.word	0x200000b0
 8002ad8:	200000b4 	.word	0x200000b4

08002adc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002ae2:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <MX_SPI1_Init+0x68>)
 8002ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002ae8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b06:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002b28:	220a      	movs	r2, #10
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b2c:	4804      	ldr	r0, [pc, #16]	; (8002b40 <MX_SPI1_Init+0x64>)
 8002b2e:	f002 ffd7 	bl	8005ae0 <HAL_SPI_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b38:	f7ff fe0e 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	2000028c 	.word	0x2000028c
 8002b44:	40013000 	.word	0x40013000

08002b48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <HAL_SPI_MspInit+0x84>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d12b      	bne.n	8002bc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002ba2:	2338      	movs	r3, #56	; 0x38
 8002ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bb2:	2305      	movs	r3, #5
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <HAL_SPI_MspInit+0x8c>)
 8002bbe:	f001 fcef 	bl	80045a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	3728      	adds	r7, #40	; 0x28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40013000 	.word	0x40013000
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40020400 	.word	0x40020400

08002bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_MspInit+0x4c>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_MspInit+0x4c>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_MspInit+0x4c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_MspInit+0x4c>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <HAL_MspInit+0x4c>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_MspInit+0x4c>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800

08002c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <NMI_Handler+0x4>

08002c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c32:	e7fe      	b.n	8002c32 <HardFault_Handler+0x4>

08002c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c38:	e7fe      	b.n	8002c38 <MemManage_Handler+0x4>

08002c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c3e:	e7fe      	b.n	8002c3e <BusFault_Handler+0x4>

08002c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c44:	e7fe      	b.n	8002c44 <UsageFault_Handler+0x4>

08002c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c74:	f000 fb2a 	bl	80032cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <TIM2_IRQHandler+0x10>)
 8002c82:	f003 fefb 	bl	8006a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000032c 	.word	0x2000032c

08002c90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <USART1_IRQHandler+0x10>)
 8002c96:	f004 fe5b 	bl	8007950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200003d8 	.word	0x200003d8

08002ca4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <DMA2_Stream0_IRQHandler+0x10>)
 8002caa:	f001 fa0f 	bl	80040cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000110 	.word	0x20000110

08002cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <_sbrk+0x5c>)
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <_sbrk+0x60>)
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <_sbrk+0x64>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <_sbrk+0x64>)
 8002cd6:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <_sbrk+0x68>)
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <_sbrk+0x64>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d207      	bcs.n	8002cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce8:	f005 fdba 	bl	8008860 <__errno>
 8002cec:	4603      	mov	r3, r0
 8002cee:	220c      	movs	r2, #12
 8002cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	e009      	b.n	8002d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <_sbrk+0x64>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <_sbrk+0x64>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <_sbrk+0x64>)
 8002d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20020000 	.word	0x20020000
 8002d18:	00000400 	.word	0x00000400
 8002d1c:	200000b8 	.word	0x200000b8
 8002d20:	20000430 	.word	0x20000430

08002d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <SystemInit+0x20>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <SystemInit+0x20>)
 8002d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <MX_TIM2_Init+0x94>)
 8002d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <MX_TIM2_Init+0x94>)
 8002d6e:	f240 3247 	movw	r2, #839	; 0x347
 8002d72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <MX_TIM2_Init+0x94>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <MX_TIM2_Init+0x94>)
 8002d7c:	2263      	movs	r2, #99	; 0x63
 8002d7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d80:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <MX_TIM2_Init+0x94>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <MX_TIM2_Init+0x94>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d8c:	4813      	ldr	r0, [pc, #76]	; (8002ddc <MX_TIM2_Init+0x94>)
 8002d8e:	f003 fc93 	bl	80066b8 <HAL_TIM_Base_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d98:	f7ff fcde 	bl	8002758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002da2:	f107 0308 	add.w	r3, r7, #8
 8002da6:	4619      	mov	r1, r3
 8002da8:	480c      	ldr	r0, [pc, #48]	; (8002ddc <MX_TIM2_Init+0x94>)
 8002daa:	f004 f831 	bl	8006e10 <HAL_TIM_ConfigClockSource>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002db4:	f7ff fcd0 	bl	8002758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db8:	2300      	movs	r3, #0
 8002dba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <MX_TIM2_Init+0x94>)
 8002dc6:	f004 fc23 	bl	8007610 <HAL_TIMEx_MasterConfigSynchronization>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002dd0:	f7ff fcc2 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dd4:	bf00      	nop
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	2000032c 	.word	0x2000032c

08002de0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
 8002df4:	615a      	str	r2, [r3, #20]
 8002df6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002df8:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <MX_TIM13_Init+0x94>)
 8002dfa:	4a1f      	ldr	r2, [pc, #124]	; (8002e78 <MX_TIM13_Init+0x98>)
 8002dfc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <MX_TIM13_Init+0x94>)
 8002e00:	f240 3247 	movw	r2, #839	; 0x347
 8002e04:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e06:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <MX_TIM13_Init+0x94>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <MX_TIM13_Init+0x94>)
 8002e0e:	2263      	movs	r2, #99	; 0x63
 8002e10:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e12:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <MX_TIM13_Init+0x94>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <MX_TIM13_Init+0x94>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002e1e:	4815      	ldr	r0, [pc, #84]	; (8002e74 <MX_TIM13_Init+0x94>)
 8002e20:	f003 fc4a 	bl	80066b8 <HAL_TIM_Base_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002e2a:	f7ff fc95 	bl	8002758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002e2e:	4811      	ldr	r0, [pc, #68]	; (8002e74 <MX_TIM13_Init+0x94>)
 8002e30:	f003 fd02 	bl	8006838 <HAL_TIM_PWM_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002e3a:	f7ff fc8d 	bl	8002758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e3e:	2360      	movs	r3, #96	; 0x60
 8002e40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	2200      	movs	r2, #0
 8002e52:	4619      	mov	r1, r3
 8002e54:	4807      	ldr	r0, [pc, #28]	; (8002e74 <MX_TIM13_Init+0x94>)
 8002e56:	f003 ff19 	bl	8006c8c <HAL_TIM_PWM_ConfigChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002e60:	f7ff fc7a 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002e64:	4803      	ldr	r0, [pc, #12]	; (8002e74 <MX_TIM13_Init+0x94>)
 8002e66:	f000 f845 	bl	8002ef4 <HAL_TIM_MspPostInit>

}
 8002e6a:	bf00      	nop
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200002e4 	.word	0x200002e4
 8002e78:	40001c00 	.word	0x40001c00

08002e7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8c:	d116      	bne.n	8002ebc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <HAL_TIM_Base_MspInit+0x70>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a15      	ldr	r2, [pc, #84]	; (8002eec <HAL_TIM_Base_MspInit+0x70>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <HAL_TIM_Base_MspInit+0x70>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	201c      	movs	r0, #28
 8002eb0:	f000 ff3d 	bl	8003d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002eb4:	201c      	movs	r0, #28
 8002eb6:	f000 ff56 	bl	8003d66 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002eba:	e012      	b.n	8002ee2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <HAL_TIM_Base_MspInit+0x74>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d10d      	bne.n	8002ee2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_TIM_Base_MspInit+0x70>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a07      	ldr	r2, [pc, #28]	; (8002eec <HAL_TIM_Base_MspInit+0x70>)
 8002ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_TIM_Base_MspInit+0x70>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
}
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40001c00 	.word	0x40001c00

08002ef4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <HAL_TIM_MspPostInit+0x68>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d11e      	bne.n	8002f54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_TIM_MspPostInit+0x6c>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <HAL_TIM_MspPostInit+0x6c>)
 8002f20:	f043 0320 	orr.w	r3, r3, #32
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_TIM_MspPostInit+0x6c>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002f44:	2309      	movs	r3, #9
 8002f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4805      	ldr	r0, [pc, #20]	; (8002f64 <HAL_TIM_MspPostInit+0x70>)
 8002f50:	f001 fb26 	bl	80045a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002f54:	bf00      	nop
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40001c00 	.word	0x40001c00
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40021400 	.word	0x40021400

08002f68 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4903      	ldr	r1, [pc, #12]	; (8002f7c <uart_init_rs232+0x14>)
 8002f70:	4803      	ldr	r0, [pc, #12]	; (8002f80 <uart_init_rs232+0x18>)
 8002f72:	f004 fcbc 	bl	80078ee <HAL_UART_Receive_IT>
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200000bc 	.word	0x200000bc
 8002f80:	200003d8 	.word	0x200003d8

08002f84 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4907      	ldr	r1, [pc, #28]	; (8002fac <uart_Rs232SendString+0x28>)
 8002f90:	4807      	ldr	r0, [pc, #28]	; (8002fb0 <uart_Rs232SendString+0x2c>)
 8002f92:	f005 fc97 	bl	80088c4 <siprintf>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	230a      	movs	r3, #10
 8002f9c:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <uart_Rs232SendString+0x2c>)
 8002f9e:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <uart_Rs232SendString+0x30>)
 8002fa0:	f004 fc13 	bl	80077ca <HAL_UART_Transmit>
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	080091a0 	.word	0x080091a0
 8002fb0:	20000374 	.word	0x20000374
 8002fb4:	200003d8 	.word	0x200003d8

08002fb8 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 8002fc6:	4824      	ldr	r0, [pc, #144]	; (8003058 <uart_Rs232SendNum+0xa0>)
 8002fc8:	f7ff ffdc 	bl	8002f84 <uart_Rs232SendString>
		return;
 8002fcc:	e040      	b.n	8003050 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8002fd2:	230a      	movs	r3, #10
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	e038      	b.n	800304a <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	4619      	mov	r1, r3
 8002fde:	200a      	movs	r0, #10
 8002fe0:	f7fe fd24 	bl	8001a2c <mypow>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d315      	bcc.n	800301a <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	f7fe fd17 	bl	8001a2c <mypow>
 8002ffe:	4603      	mov	r3, r0
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	fbb3 f3f2 	udiv	r3, r3, r2
 8003008:	461a      	mov	r2, r3
 800300a:	4914      	ldr	r1, [pc, #80]	; (800305c <uart_Rs232SendNum+0xa4>)
 800300c:	4814      	ldr	r0, [pc, #80]	; (8003060 <uart_Rs232SendNum+0xa8>)
 800300e:	f005 fc59 	bl	80088c4 <siprintf>
            uart_Rs232SendString(msg);
 8003012:	4813      	ldr	r0, [pc, #76]	; (8003060 <uart_Rs232SendNum+0xa8>)
 8003014:	f7ff ffb6 	bl	8002f84 <uart_Rs232SendString>
 8003018:	e005      	b.n	8003026 <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 8003020:	480d      	ldr	r0, [pc, #52]	; (8003058 <uart_Rs232SendNum+0xa0>)
 8003022:	f7ff ffaf 	bl	8002f84 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3b01      	subs	r3, #1
 800302a:	4619      	mov	r1, r3
 800302c:	200a      	movs	r0, #10
 800302e:	f7fe fcfd 	bl	8001a2c <mypow>
 8003032:	4603      	mov	r3, r0
 8003034:	461a      	mov	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	fbb3 f1f2 	udiv	r1, r3, r2
 800303c:	fb02 f201 	mul.w	r2, r2, r1
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3b01      	subs	r3, #1
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	dcc3      	bgt.n	8002fd8 <uart_Rs232SendNum+0x20>
    }
}
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	080091a4 	.word	0x080091a4
 800305c:	080091a8 	.word	0x080091a8
 8003060:	20000374 	.word	0x20000374

08003064 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a06      	ldr	r2, [pc, #24]	; (800308c <HAL_UART_RxCpltCallback+0x28>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d105      	bne.n	8003082 <HAL_UART_RxCpltCallback+0x1e>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8003076:	230a      	movs	r3, #10
 8003078:	2201      	movs	r2, #1
 800307a:	4905      	ldr	r1, [pc, #20]	; (8003090 <HAL_UART_RxCpltCallback+0x2c>)
 800307c:	4805      	ldr	r0, [pc, #20]	; (8003094 <HAL_UART_RxCpltCallback+0x30>)
 800307e:	f004 fba4 	bl	80077ca <HAL_UART_Transmit>


		// turn on the receice interrupt
//		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
	}
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40011000 	.word	0x40011000
 8003090:	200000bc 	.word	0x200000bc
 8003094:	200003d8 	.word	0x200003d8

08003098 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <MX_USART1_UART_Init+0x4c>)
 800309e:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <MX_USART1_UART_Init+0x50>)
 80030a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <MX_USART1_UART_Init+0x4c>)
 80030a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <MX_USART1_UART_Init+0x4c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <MX_USART1_UART_Init+0x4c>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <MX_USART1_UART_Init+0x4c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <MX_USART1_UART_Init+0x4c>)
 80030be:	220c      	movs	r2, #12
 80030c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <MX_USART1_UART_Init+0x4c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <MX_USART1_UART_Init+0x4c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030ce:	4805      	ldr	r0, [pc, #20]	; (80030e4 <MX_USART1_UART_Init+0x4c>)
 80030d0:	f004 fb2e 	bl	8007730 <HAL_UART_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030da:	f7ff fb3d 	bl	8002758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200003d8 	.word	0x200003d8
 80030e8:	40011000 	.word	0x40011000

080030ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_UART_MspInit+0x94>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d134      	bne.n	8003178 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <HAL_UART_MspInit+0x98>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <HAL_UART_MspInit+0x98>)
 8003118:	f043 0310 	orr.w	r3, r3, #16
 800311c:	6453      	str	r3, [r2, #68]	; 0x44
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_UART_MspInit+0x98>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <HAL_UART_MspInit+0x98>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a14      	ldr	r2, [pc, #80]	; (8003184 <HAL_UART_MspInit+0x98>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_UART_MspInit+0x98>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003146:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800314a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	2303      	movs	r3, #3
 8003156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003158:	2307      	movs	r3, #7
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	4619      	mov	r1, r3
 8003162:	4809      	ldr	r0, [pc, #36]	; (8003188 <HAL_UART_MspInit+0x9c>)
 8003164:	f001 fa1c 	bl	80045a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003168:	2200      	movs	r2, #0
 800316a:	2100      	movs	r1, #0
 800316c:	2025      	movs	r0, #37	; 0x25
 800316e:	f000 fdde 	bl	8003d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003172:	2025      	movs	r0, #37	; 0x25
 8003174:	f000 fdf7 	bl	8003d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003178:	bf00      	nop
 800317a:	3728      	adds	r7, #40	; 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40011000 	.word	0x40011000
 8003184:	40023800 	.word	0x40023800
 8003188:	40020000 	.word	0x40020000

0800318c <DEC2BCD>:

uint8_t BCD2DEC(uint8_t data) {
	return (data >> 4) * 10 + (data & 0x0f);
}

uint8_t DEC2BCD(uint8_t data) {
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <DEC2BCD+0x44>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	08db      	lsrs	r3, r3, #3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	b258      	sxtb	r0, r3
 80031a6:	79fa      	ldrb	r2, [r7, #7]
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <DEC2BCD+0x44>)
 80031aa:	fba3 1302 	umull	r1, r3, r3, r2
 80031ae:	08d9      	lsrs	r1, r3, #3
 80031b0:	460b      	mov	r3, r1
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	b25b      	sxtb	r3, r3
 80031be:	4303      	orrs	r3, r0
 80031c0:	b25b      	sxtb	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	cccccccd 	.word	0xcccccccd

080031d4 <Reset_Handler>:
 80031d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800320c <LoopFillZerobss+0x12>
 80031d8:	480d      	ldr	r0, [pc, #52]	; (8003210 <LoopFillZerobss+0x16>)
 80031da:	490e      	ldr	r1, [pc, #56]	; (8003214 <LoopFillZerobss+0x1a>)
 80031dc:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <LoopFillZerobss+0x1e>)
 80031de:	2300      	movs	r3, #0
 80031e0:	e002      	b.n	80031e8 <LoopCopyDataInit>

080031e2 <CopyDataInit>:
 80031e2:	58d4      	ldr	r4, [r2, r3]
 80031e4:	50c4      	str	r4, [r0, r3]
 80031e6:	3304      	adds	r3, #4

080031e8 <LoopCopyDataInit>:
 80031e8:	18c4      	adds	r4, r0, r3
 80031ea:	428c      	cmp	r4, r1
 80031ec:	d3f9      	bcc.n	80031e2 <CopyDataInit>
 80031ee:	4a0b      	ldr	r2, [pc, #44]	; (800321c <LoopFillZerobss+0x22>)
 80031f0:	4c0b      	ldr	r4, [pc, #44]	; (8003220 <LoopFillZerobss+0x26>)
 80031f2:	2300      	movs	r3, #0
 80031f4:	e001      	b.n	80031fa <LoopFillZerobss>

080031f6 <FillZerobss>:
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	3204      	adds	r2, #4

080031fa <LoopFillZerobss>:
 80031fa:	42a2      	cmp	r2, r4
 80031fc:	d3fb      	bcc.n	80031f6 <FillZerobss>
 80031fe:	f7ff fd91 	bl	8002d24 <SystemInit>
 8003202:	f005 fb33 	bl	800886c <__libc_init_array>
 8003206:	f7fe ffeb 	bl	80021e0 <main>
 800320a:	4770      	bx	lr
 800320c:	20020000 	.word	0x20020000
 8003210:	20000000 	.word	0x20000000
 8003214:	20000080 	.word	0x20000080
 8003218:	0800c198 	.word	0x0800c198
 800321c:	20000080 	.word	0x20000080
 8003220:	20000430 	.word	0x20000430

08003224 <ADC_IRQHandler>:
 8003224:	e7fe      	b.n	8003224 <ADC_IRQHandler>
	...

08003228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_Init+0x40>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <HAL_Init+0x40>)
 8003232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_Init+0x40>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <HAL_Init+0x40>)
 800323e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <HAL_Init+0x40>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a07      	ldr	r2, [pc, #28]	; (8003268 <HAL_Init+0x40>)
 800324a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003250:	2003      	movs	r0, #3
 8003252:	f000 fd61 	bl	8003d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003256:	200f      	movs	r0, #15
 8003258:	f000 f808 	bl	800326c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800325c:	f7ff fcbc 	bl	8002bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023c00 	.word	0x40023c00

0800326c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_InitTick+0x54>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_InitTick+0x58>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	4619      	mov	r1, r3
 800327e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003282:	fbb3 f3f1 	udiv	r3, r3, r1
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fd79 	bl	8003d82 <HAL_SYSTICK_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e00e      	b.n	80032b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b0f      	cmp	r3, #15
 800329e:	d80a      	bhi.n	80032b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032a0:	2200      	movs	r2, #0
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	f000 fd41 	bl	8003d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032ac:	4a06      	ldr	r2, [pc, #24]	; (80032c8 <HAL_InitTick+0x5c>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e000      	b.n	80032b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000010 	.word	0x20000010
 80032c4:	20000018 	.word	0x20000018
 80032c8:	20000014 	.word	0x20000014

080032cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_IncTick+0x20>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_IncTick+0x24>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <HAL_IncTick+0x24>)
 80032de:	6013      	str	r3, [r2, #0]
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000018 	.word	0x20000018
 80032f0:	2000041c 	.word	0x2000041c

080032f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return uwTick;
 80032f8:	4b03      	ldr	r3, [pc, #12]	; (8003308 <HAL_GetTick+0x14>)
 80032fa:	681b      	ldr	r3, [r3, #0]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	2000041c 	.word	0x2000041c

0800330c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003314:	f7ff ffee 	bl	80032f4 <HAL_GetTick>
 8003318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d005      	beq.n	8003332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_Delay+0x44>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003332:	bf00      	nop
 8003334:	f7ff ffde 	bl	80032f4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	429a      	cmp	r2, r3
 8003342:	d8f7      	bhi.n	8003334 <HAL_Delay+0x28>
  {
  }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000018 	.word	0x20000018

08003354 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e033      	b.n	80033d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fda0 	bl	8000eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	d118      	bne.n	80033c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800339a:	f023 0302 	bic.w	r3, r3, #2
 800339e:	f043 0202 	orr.w	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa68 	bl	800387c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
 80033c2:	e001      	b.n	80033c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_Start_DMA+0x1e>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0e9      	b.n	80035ce <HAL_ADC_Start_DMA+0x1f2>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d018      	beq.n	8003442 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003420:	4b6d      	ldr	r3, [pc, #436]	; (80035d8 <HAL_ADC_Start_DMA+0x1fc>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6d      	ldr	r2, [pc, #436]	; (80035dc <HAL_ADC_Start_DMA+0x200>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	0c9a      	lsrs	r2, r3, #18
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003434:	e002      	b.n	800343c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	3b01      	subs	r3, #1
 800343a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f9      	bne.n	8003436 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003450:	d107      	bne.n	8003462 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003460:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	f040 80a1 	bne.w	80035b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800349c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b0:	d106      	bne.n	80034c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f023 0206 	bic.w	r2, r3, #6
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
 80034be:	e002      	b.n	80034c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ce:	4b44      	ldr	r3, [pc, #272]	; (80035e0 <HAL_ADC_Start_DMA+0x204>)
 80034d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	4a43      	ldr	r2, [pc, #268]	; (80035e4 <HAL_ADC_Start_DMA+0x208>)
 80034d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	4a42      	ldr	r2, [pc, #264]	; (80035e8 <HAL_ADC_Start_DMA+0x20c>)
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	4a41      	ldr	r2, [pc, #260]	; (80035ec <HAL_ADC_Start_DMA+0x210>)
 80034e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003502:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003512:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	334c      	adds	r3, #76	; 0x4c
 800351e:	4619      	mov	r1, r3
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f000 fce8 	bl	8003ef8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2b00      	cmp	r3, #0
 8003532:	d12a      	bne.n	800358a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2d      	ldr	r2, [pc, #180]	; (80035f0 <HAL_ADC_Start_DMA+0x214>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d015      	beq.n	800356a <HAL_ADC_Start_DMA+0x18e>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2c      	ldr	r2, [pc, #176]	; (80035f4 <HAL_ADC_Start_DMA+0x218>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d105      	bne.n	8003554 <HAL_ADC_Start_DMA+0x178>
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_ADC_Start_DMA+0x204>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a27      	ldr	r2, [pc, #156]	; (80035f8 <HAL_ADC_Start_DMA+0x21c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d136      	bne.n	80035cc <HAL_ADC_Start_DMA+0x1f0>
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_ADC_Start_DMA+0x204>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b00      	cmp	r3, #0
 8003568:	d130      	bne.n	80035cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d129      	bne.n	80035cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	e020      	b.n	80035cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_ADC_Start_DMA+0x214>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d11b      	bne.n	80035cc <HAL_ADC_Start_DMA+0x1f0>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d114      	bne.n	80035cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	e00b      	b.n	80035cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f043 0210 	orr.w	r2, r3, #16
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	f043 0201 	orr.w	r2, r3, #1
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000010 	.word	0x20000010
 80035dc:	431bde83 	.word	0x431bde83
 80035e0:	40012300 	.word	0x40012300
 80035e4:	08003a75 	.word	0x08003a75
 80035e8:	08003b2f 	.word	0x08003b2f
 80035ec:	08003b4b 	.word	0x08003b4b
 80035f0:	40012000 	.word	0x40012000
 80035f4:	40012100 	.word	0x40012100
 80035f8:	40012200 	.word	0x40012200

080035fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1c>
 8003650:	2302      	movs	r3, #2
 8003652:	e105      	b.n	8003860 <HAL_ADC_ConfigChannel+0x228>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b09      	cmp	r3, #9
 8003662:	d925      	bls.n	80036b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68d9      	ldr	r1, [r3, #12]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	4613      	mov	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	3b1e      	subs	r3, #30
 800367a:	2207      	movs	r2, #7
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43da      	mvns	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	400a      	ands	r2, r1
 8003688:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68d9      	ldr	r1, [r3, #12]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	4618      	mov	r0, r3
 800369c:	4603      	mov	r3, r0
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4403      	add	r3, r0
 80036a2:	3b1e      	subs	r3, #30
 80036a4:	409a      	lsls	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	e022      	b.n	80036f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6919      	ldr	r1, [r3, #16]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	2207      	movs	r2, #7
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43da      	mvns	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	400a      	ands	r2, r1
 80036d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6919      	ldr	r1, [r3, #16]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	4618      	mov	r0, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4403      	add	r3, r0
 80036ec:	409a      	lsls	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d824      	bhi.n	8003748 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	3b05      	subs	r3, #5
 8003710:	221f      	movs	r2, #31
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43da      	mvns	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	400a      	ands	r2, r1
 800371e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	4618      	mov	r0, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	3b05      	subs	r3, #5
 800373a:	fa00 f203 	lsl.w	r2, r0, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	635a      	str	r2, [r3, #52]	; 0x34
 8003746:	e04c      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b0c      	cmp	r3, #12
 800374e:	d824      	bhi.n	800379a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	3b23      	subs	r3, #35	; 0x23
 8003762:	221f      	movs	r2, #31
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43da      	mvns	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	400a      	ands	r2, r1
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	4618      	mov	r0, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	3b23      	subs	r3, #35	; 0x23
 800378c:	fa00 f203 	lsl.w	r2, r0, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
 8003798:	e023      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	3b41      	subs	r3, #65	; 0x41
 80037ac:	221f      	movs	r2, #31
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43da      	mvns	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	400a      	ands	r2, r1
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	3b41      	subs	r3, #65	; 0x41
 80037d6:	fa00 f203 	lsl.w	r2, r0, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <HAL_ADC_ConfigChannel+0x234>)
 80037e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a21      	ldr	r2, [pc, #132]	; (8003870 <HAL_ADC_ConfigChannel+0x238>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d109      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x1cc>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b12      	cmp	r3, #18
 80037f6:	d105      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a19      	ldr	r2, [pc, #100]	; (8003870 <HAL_ADC_ConfigChannel+0x238>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d123      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x21e>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b10      	cmp	r3, #16
 8003814:	d003      	beq.n	800381e <HAL_ADC_ConfigChannel+0x1e6>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b11      	cmp	r3, #17
 800381c:	d11b      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b10      	cmp	r3, #16
 8003830:	d111      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_ADC_ConfigChannel+0x23c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a10      	ldr	r2, [pc, #64]	; (8003878 <HAL_ADC_ConfigChannel+0x240>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	0c9a      	lsrs	r2, r3, #18
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003848:	e002      	b.n	8003850 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3b01      	subs	r3, #1
 800384e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f9      	bne.n	800384a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40012300 	.word	0x40012300
 8003870:	40012000 	.word	0x40012000
 8003874:	20000010 	.word	0x20000010
 8003878:	431bde83 	.word	0x431bde83

0800387c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003884:	4b79      	ldr	r3, [pc, #484]	; (8003a6c <ADC_Init+0x1f0>)
 8003886:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	431a      	orrs	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	021a      	lsls	r2, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6899      	ldr	r1, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	4a58      	ldr	r2, [pc, #352]	; (8003a70 <ADC_Init+0x1f4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d022      	beq.n	800395a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003922:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6899      	ldr	r1, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6899      	ldr	r1, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	e00f      	b.n	800397a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003978:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0202 	bic.w	r2, r2, #2
 8003988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6899      	ldr	r1, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7e1b      	ldrb	r3, [r3, #24]
 8003994:	005a      	lsls	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01b      	beq.n	80039e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	3b01      	subs	r3, #1
 80039d4:	035a      	lsls	r2, r3, #13
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	e007      	b.n	80039f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	051a      	lsls	r2, r3, #20
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6899      	ldr	r1, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a32:	025a      	lsls	r2, r3, #9
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	029a      	lsls	r2, r3, #10
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40012300 	.word	0x40012300
 8003a70:	0f000001 	.word	0x0f000001

08003a74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d13c      	bne.n	8003b08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d12b      	bne.n	8003b00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d127      	bne.n	8003b00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d119      	bne.n	8003b00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0220 	bic.w	r2, r2, #32
 8003ada:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff fd7b 	bl	80035fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b06:	e00e      	b.n	8003b26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f7ff fd85 	bl	8003624 <HAL_ADC_ErrorCallback>
}
 8003b1a:	e004      	b.n	8003b26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4798      	blx	r3
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff fd67 	bl	8003610 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2240      	movs	r2, #64	; 0x40
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f043 0204 	orr.w	r2, r3, #4
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f7ff fd5a 	bl	8003624 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <__NVIC_SetPriorityGrouping+0x44>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b94:	4013      	ands	r3, r2
 8003b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003baa:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <__NVIC_SetPriorityGrouping+0x44>)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	60d3      	str	r3, [r2, #12]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	f003 0307 	and.w	r3, r3, #7
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	db0b      	blt.n	8003c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	f003 021f 	and.w	r2, r3, #31
 8003bf4:	4907      	ldr	r1, [pc, #28]	; (8003c14 <__NVIC_EnableIRQ+0x38>)
 8003bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000e100 	.word	0xe000e100

08003c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	6039      	str	r1, [r7, #0]
 8003c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	db0a      	blt.n	8003c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	490c      	ldr	r1, [pc, #48]	; (8003c64 <__NVIC_SetPriority+0x4c>)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	0112      	lsls	r2, r2, #4
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c40:	e00a      	b.n	8003c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	4908      	ldr	r1, [pc, #32]	; (8003c68 <__NVIC_SetPriority+0x50>)
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	3b04      	subs	r3, #4
 8003c50:	0112      	lsls	r2, r2, #4
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	440b      	add	r3, r1
 8003c56:	761a      	strb	r2, [r3, #24]
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000e100 	.word	0xe000e100
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b089      	sub	sp, #36	; 0x24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f1c3 0307 	rsb	r3, r3, #7
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	bf28      	it	cs
 8003c8a:	2304      	movcs	r3, #4
 8003c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3304      	adds	r3, #4
 8003c92:	2b06      	cmp	r3, #6
 8003c94:	d902      	bls.n	8003c9c <NVIC_EncodePriority+0x30>
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3b03      	subs	r3, #3
 8003c9a:	e000      	b.n	8003c9e <NVIC_EncodePriority+0x32>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43da      	mvns	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	401a      	ands	r2, r3
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	43d9      	mvns	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc4:	4313      	orrs	r3, r2
         );
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3724      	adds	r7, #36	; 0x24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ce4:	d301      	bcc.n	8003cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e00f      	b.n	8003d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <SysTick_Config+0x40>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cf2:	210f      	movs	r1, #15
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	f7ff ff8e 	bl	8003c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <SysTick_Config+0x40>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d02:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <SysTick_Config+0x40>)
 8003d04:	2207      	movs	r2, #7
 8003d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	e000e010 	.word	0xe000e010

08003d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff29 	bl	8003b78 <__NVIC_SetPriorityGrouping>
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b086      	sub	sp, #24
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	4603      	mov	r3, r0
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d40:	f7ff ff3e 	bl	8003bc0 <__NVIC_GetPriorityGrouping>
 8003d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	6978      	ldr	r0, [r7, #20]
 8003d4c:	f7ff ff8e 	bl	8003c6c <NVIC_EncodePriority>
 8003d50:	4602      	mov	r2, r0
 8003d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ff5d 	bl	8003c18 <__NVIC_SetPriority>
}
 8003d5e:	bf00      	nop
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff ff31 	bl	8003bdc <__NVIC_EnableIRQ>
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff ffa2 	bl	8003cd4 <SysTick_Config>
 8003d90:	4603      	mov	r3, r0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003da8:	f7ff faa4 	bl	80032f4 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e099      	b.n	8003eec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd8:	e00f      	b.n	8003dfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dda:	f7ff fa8b 	bl	80032f4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d908      	bls.n	8003dfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2203      	movs	r2, #3
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e078      	b.n	8003eec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e8      	bne.n	8003dda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4b38      	ldr	r3, [pc, #224]	; (8003ef4 <HAL_DMA_Init+0x158>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d107      	bne.n	8003e64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0307 	bic.w	r3, r3, #7
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d117      	bne.n	8003ebe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00e      	beq.n	8003ebe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fb01 	bl	80044a8 <DMA_CheckFifoParam>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e016      	b.n	8003eec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fab8 	bl	800443c <DMA_CalcBaseAndBitshift>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	223f      	movs	r2, #63	; 0x3f
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	f010803f 	.word	0xf010803f

08003ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_DMA_Start_IT+0x26>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e040      	b.n	8003fa0 <HAL_DMA_Start_IT+0xa8>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d12f      	bne.n	8003f92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fa4a 	bl	80043e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	223f      	movs	r2, #63	; 0x3f
 8003f52:	409a      	lsls	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0216 	orr.w	r2, r2, #22
 8003f66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0208 	orr.w	r2, r2, #8
 8003f7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e005      	b.n	8003f9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003fb6:	f7ff f99d 	bl	80032f4 <HAL_GetTick>
 8003fba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d008      	beq.n	8003fda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2280      	movs	r2, #128	; 0x80
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e052      	b.n	8004080 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0216 	bic.w	r2, r2, #22
 8003fe8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d103      	bne.n	800400a <HAL_DMA_Abort+0x62>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0208 	bic.w	r2, r2, #8
 8004018:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800402a:	e013      	b.n	8004054 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800402c:	f7ff f962 	bl	80032f4 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b05      	cmp	r3, #5
 8004038:	d90c      	bls.n	8004054 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2203      	movs	r2, #3
 8004044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e015      	b.n	8004080 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e4      	bne.n	800402c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004066:	223f      	movs	r2, #63	; 0x3f
 8004068:	409a      	lsls	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d004      	beq.n	80040a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00c      	b.n	80040c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2205      	movs	r2, #5
 80040aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040d8:	4b92      	ldr	r3, [pc, #584]	; (8004324 <HAL_DMA_IRQHandler+0x258>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a92      	ldr	r2, [pc, #584]	; (8004328 <HAL_DMA_IRQHandler+0x25c>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	0a9b      	lsrs	r3, r3, #10
 80040e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	2208      	movs	r2, #8
 80040f8:	409a      	lsls	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d01a      	beq.n	8004138 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d013      	beq.n	8004138 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0204 	bic.w	r2, r2, #4
 800411e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	2208      	movs	r2, #8
 8004126:	409a      	lsls	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	f043 0201 	orr.w	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	2201      	movs	r2, #1
 800413e:	409a      	lsls	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d012      	beq.n	800416e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	2201      	movs	r2, #1
 800415c:	409a      	lsls	r2, r3
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f043 0202 	orr.w	r2, r3, #2
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	2204      	movs	r2, #4
 8004174:	409a      	lsls	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d012      	beq.n	80041a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	2204      	movs	r2, #4
 8004192:	409a      	lsls	r2, r3
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	f043 0204 	orr.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a8:	2210      	movs	r2, #16
 80041aa:	409a      	lsls	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d043      	beq.n	800423c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d03c      	beq.n	800423c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c6:	2210      	movs	r2, #16
 80041c8:	409a      	lsls	r2, r3
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d018      	beq.n	800420e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d108      	bne.n	80041fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d024      	beq.n	800423c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	4798      	blx	r3
 80041fa:	e01f      	b.n	800423c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01b      	beq.n	800423c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	4798      	blx	r3
 800420c:	e016      	b.n	800423c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d107      	bne.n	800422c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0208 	bic.w	r2, r2, #8
 800422a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	2220      	movs	r2, #32
 8004242:	409a      	lsls	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 808e 	beq.w	800436a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8086 	beq.w	800436a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2220      	movs	r2, #32
 8004264:	409a      	lsls	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b05      	cmp	r3, #5
 8004274:	d136      	bne.n	80042e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0216 	bic.w	r2, r2, #22
 8004284:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004294:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <HAL_DMA_IRQHandler+0x1da>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0208 	bic.w	r2, r2, #8
 80042b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ba:	223f      	movs	r2, #63	; 0x3f
 80042bc:	409a      	lsls	r2, r3
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d07d      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4798      	blx	r3
        }
        return;
 80042e2:	e078      	b.n	80043d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01c      	beq.n	800432c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d108      	bne.n	8004312 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	2b00      	cmp	r3, #0
 8004306:	d030      	beq.n	800436a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
 8004310:	e02b      	b.n	800436a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d027      	beq.n	800436a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
 8004322:	e022      	b.n	800436a <HAL_DMA_IRQHandler+0x29e>
 8004324:	20000010 	.word	0x20000010
 8004328:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0210 	bic.w	r2, r2, #16
 8004348:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436e:	2b00      	cmp	r3, #0
 8004370:	d032      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d022      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2205      	movs	r2, #5
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	3301      	adds	r3, #1
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d307      	bcc.n	80043b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f2      	bne.n	8004396 <HAL_DMA_IRQHandler+0x2ca>
 80043b0:	e000      	b.n	80043b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80043b2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
 80043d4:	e000      	b.n	80043d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80043d6:	bf00      	nop
    }
  }
}
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop

080043e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d108      	bne.n	8004420 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800441e:	e007      	b.n	8004430 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	60da      	str	r2, [r3, #12]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	3b10      	subs	r3, #16
 800444c:	4a14      	ldr	r2, [pc, #80]	; (80044a0 <DMA_CalcBaseAndBitshift+0x64>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004456:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <DMA_CalcBaseAndBitshift+0x68>)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b03      	cmp	r3, #3
 8004468:	d909      	bls.n	800447e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004472:	f023 0303 	bic.w	r3, r3, #3
 8004476:	1d1a      	adds	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	659a      	str	r2, [r3, #88]	; 0x58
 800447c:	e007      	b.n	800448e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004486:	f023 0303 	bic.w	r3, r3, #3
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	aaaaaaab 	.word	0xaaaaaaab
 80044a4:	0800c14c 	.word	0x0800c14c

080044a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d11f      	bne.n	8004502 <DMA_CheckFifoParam+0x5a>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d856      	bhi.n	8004576 <DMA_CheckFifoParam+0xce>
 80044c8:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <DMA_CheckFifoParam+0x28>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	080044f3 	.word	0x080044f3
 80044d8:	080044e1 	.word	0x080044e1
 80044dc:	08004577 	.word	0x08004577
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d046      	beq.n	800457a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f0:	e043      	b.n	800457a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044fa:	d140      	bne.n	800457e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004500:	e03d      	b.n	800457e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450a:	d121      	bne.n	8004550 <DMA_CheckFifoParam+0xa8>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d837      	bhi.n	8004582 <DMA_CheckFifoParam+0xda>
 8004512:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <DMA_CheckFifoParam+0x70>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	08004529 	.word	0x08004529
 800451c:	0800452f 	.word	0x0800452f
 8004520:	08004529 	.word	0x08004529
 8004524:	08004541 	.word	0x08004541
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      break;
 800452c:	e030      	b.n	8004590 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d025      	beq.n	8004586 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800453e:	e022      	b.n	8004586 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004548:	d11f      	bne.n	800458a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800454e:	e01c      	b.n	800458a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d903      	bls.n	800455e <DMA_CheckFifoParam+0xb6>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d003      	beq.n	8004564 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800455c:	e018      	b.n	8004590 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	73fb      	strb	r3, [r7, #15]
      break;
 8004562:	e015      	b.n	8004590 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00e      	beq.n	800458e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
      break;
 8004574:	e00b      	b.n	800458e <DMA_CheckFifoParam+0xe6>
      break;
 8004576:	bf00      	nop
 8004578:	e00a      	b.n	8004590 <DMA_CheckFifoParam+0xe8>
      break;
 800457a:	bf00      	nop
 800457c:	e008      	b.n	8004590 <DMA_CheckFifoParam+0xe8>
      break;
 800457e:	bf00      	nop
 8004580:	e006      	b.n	8004590 <DMA_CheckFifoParam+0xe8>
      break;
 8004582:	bf00      	nop
 8004584:	e004      	b.n	8004590 <DMA_CheckFifoParam+0xe8>
      break;
 8004586:	bf00      	nop
 8004588:	e002      	b.n	8004590 <DMA_CheckFifoParam+0xe8>
      break;   
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <DMA_CheckFifoParam+0xe8>
      break;
 800458e:	bf00      	nop
    }
  } 
  
  return status; 
 8004590:	7bfb      	ldrb	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop

080045a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	e16b      	b.n	8004894 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045bc:	2201      	movs	r2, #1
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4013      	ands	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	f040 815a 	bne.w	800488e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d005      	beq.n	80045f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d130      	bne.n	8004654 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	2203      	movs	r2, #3
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004628:	2201      	movs	r2, #1
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 0201 	and.w	r2, r3, #1
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	2b03      	cmp	r3, #3
 800465e:	d017      	beq.n	8004690 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	2203      	movs	r2, #3
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d123      	bne.n	80046e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	08da      	lsrs	r2, r3, #3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3208      	adds	r2, #8
 80046a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	220f      	movs	r2, #15
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4013      	ands	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	08da      	lsrs	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3208      	adds	r2, #8
 80046de:	69b9      	ldr	r1, [r7, #24]
 80046e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	2203      	movs	r2, #3
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0203 	and.w	r2, r3, #3
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80b4 	beq.w	800488e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	4b60      	ldr	r3, [pc, #384]	; (80048ac <HAL_GPIO_Init+0x30c>)
 800472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472e:	4a5f      	ldr	r2, [pc, #380]	; (80048ac <HAL_GPIO_Init+0x30c>)
 8004730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004734:	6453      	str	r3, [r2, #68]	; 0x44
 8004736:	4b5d      	ldr	r3, [pc, #372]	; (80048ac <HAL_GPIO_Init+0x30c>)
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004742:	4a5b      	ldr	r2, [pc, #364]	; (80048b0 <HAL_GPIO_Init+0x310>)
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	089b      	lsrs	r3, r3, #2
 8004748:	3302      	adds	r3, #2
 800474a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	220f      	movs	r2, #15
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	43db      	mvns	r3, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4013      	ands	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a52      	ldr	r2, [pc, #328]	; (80048b4 <HAL_GPIO_Init+0x314>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d02b      	beq.n	80047c6 <HAL_GPIO_Init+0x226>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a51      	ldr	r2, [pc, #324]	; (80048b8 <HAL_GPIO_Init+0x318>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d025      	beq.n	80047c2 <HAL_GPIO_Init+0x222>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a50      	ldr	r2, [pc, #320]	; (80048bc <HAL_GPIO_Init+0x31c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01f      	beq.n	80047be <HAL_GPIO_Init+0x21e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a4f      	ldr	r2, [pc, #316]	; (80048c0 <HAL_GPIO_Init+0x320>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d019      	beq.n	80047ba <HAL_GPIO_Init+0x21a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a4e      	ldr	r2, [pc, #312]	; (80048c4 <HAL_GPIO_Init+0x324>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <HAL_GPIO_Init+0x216>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a4d      	ldr	r2, [pc, #308]	; (80048c8 <HAL_GPIO_Init+0x328>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00d      	beq.n	80047b2 <HAL_GPIO_Init+0x212>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a4c      	ldr	r2, [pc, #304]	; (80048cc <HAL_GPIO_Init+0x32c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d007      	beq.n	80047ae <HAL_GPIO_Init+0x20e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a4b      	ldr	r2, [pc, #300]	; (80048d0 <HAL_GPIO_Init+0x330>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <HAL_GPIO_Init+0x20a>
 80047a6:	2307      	movs	r3, #7
 80047a8:	e00e      	b.n	80047c8 <HAL_GPIO_Init+0x228>
 80047aa:	2308      	movs	r3, #8
 80047ac:	e00c      	b.n	80047c8 <HAL_GPIO_Init+0x228>
 80047ae:	2306      	movs	r3, #6
 80047b0:	e00a      	b.n	80047c8 <HAL_GPIO_Init+0x228>
 80047b2:	2305      	movs	r3, #5
 80047b4:	e008      	b.n	80047c8 <HAL_GPIO_Init+0x228>
 80047b6:	2304      	movs	r3, #4
 80047b8:	e006      	b.n	80047c8 <HAL_GPIO_Init+0x228>
 80047ba:	2303      	movs	r3, #3
 80047bc:	e004      	b.n	80047c8 <HAL_GPIO_Init+0x228>
 80047be:	2302      	movs	r3, #2
 80047c0:	e002      	b.n	80047c8 <HAL_GPIO_Init+0x228>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <HAL_GPIO_Init+0x228>
 80047c6:	2300      	movs	r3, #0
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	f002 0203 	and.w	r2, r2, #3
 80047ce:	0092      	lsls	r2, r2, #2
 80047d0:	4093      	lsls	r3, r2
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047d8:	4935      	ldr	r1, [pc, #212]	; (80048b0 <HAL_GPIO_Init+0x310>)
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	089b      	lsrs	r3, r3, #2
 80047de:	3302      	adds	r3, #2
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047e6:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <HAL_GPIO_Init+0x334>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	43db      	mvns	r3, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4013      	ands	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800480a:	4a32      	ldr	r2, [pc, #200]	; (80048d4 <HAL_GPIO_Init+0x334>)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004810:	4b30      	ldr	r3, [pc, #192]	; (80048d4 <HAL_GPIO_Init+0x334>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004834:	4a27      	ldr	r2, [pc, #156]	; (80048d4 <HAL_GPIO_Init+0x334>)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800483a:	4b26      	ldr	r3, [pc, #152]	; (80048d4 <HAL_GPIO_Init+0x334>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	43db      	mvns	r3, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4013      	ands	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800485e:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <HAL_GPIO_Init+0x334>)
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_GPIO_Init+0x334>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	43db      	mvns	r3, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4013      	ands	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004888:	4a12      	ldr	r2, [pc, #72]	; (80048d4 <HAL_GPIO_Init+0x334>)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	3301      	adds	r3, #1
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2b0f      	cmp	r3, #15
 8004898:	f67f ae90 	bls.w	80045bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	3724      	adds	r7, #36	; 0x24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800
 80048b0:	40013800 	.word	0x40013800
 80048b4:	40020000 	.word	0x40020000
 80048b8:	40020400 	.word	0x40020400
 80048bc:	40020800 	.word	0x40020800
 80048c0:	40020c00 	.word	0x40020c00
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40021400 	.word	0x40021400
 80048cc:	40021800 	.word	0x40021800
 80048d0:	40021c00 	.word	0x40021c00
 80048d4:	40013c00 	.word	0x40013c00

080048d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	807b      	strh	r3, [r7, #2]
 80048e4:	4613      	mov	r3, r2
 80048e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048e8:	787b      	ldrb	r3, [r7, #1]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048ee:	887a      	ldrh	r2, [r7, #2]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048f4:	e003      	b.n	80048fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048f6:	887b      	ldrh	r3, [r7, #2]
 80048f8:	041a      	lsls	r2, r3, #16
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	619a      	str	r2, [r3, #24]
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800491c:	887a      	ldrh	r2, [r7, #2]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4013      	ands	r3, r2
 8004922:	041a      	lsls	r2, r3, #16
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	43d9      	mvns	r1, r3
 8004928:	887b      	ldrh	r3, [r7, #2]
 800492a:	400b      	ands	r3, r1
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	619a      	str	r2, [r3, #24]
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e12b      	b.n	8004baa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fc fe4a 	bl	8001600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2224      	movs	r2, #36	; 0x24
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0201 	bic.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049a4:	f001 f874 	bl	8005a90 <HAL_RCC_GetPCLK1Freq>
 80049a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4a81      	ldr	r2, [pc, #516]	; (8004bb4 <HAL_I2C_Init+0x274>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d807      	bhi.n	80049c4 <HAL_I2C_Init+0x84>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a80      	ldr	r2, [pc, #512]	; (8004bb8 <HAL_I2C_Init+0x278>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	bf94      	ite	ls
 80049bc:	2301      	movls	r3, #1
 80049be:	2300      	movhi	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e006      	b.n	80049d2 <HAL_I2C_Init+0x92>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a7d      	ldr	r2, [pc, #500]	; (8004bbc <HAL_I2C_Init+0x27c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	bf94      	ite	ls
 80049cc:	2301      	movls	r3, #1
 80049ce:	2300      	movhi	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0e7      	b.n	8004baa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a78      	ldr	r2, [pc, #480]	; (8004bc0 <HAL_I2C_Init+0x280>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	0c9b      	lsrs	r3, r3, #18
 80049e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a6a      	ldr	r2, [pc, #424]	; (8004bb4 <HAL_I2C_Init+0x274>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d802      	bhi.n	8004a14 <HAL_I2C_Init+0xd4>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	3301      	adds	r3, #1
 8004a12:	e009      	b.n	8004a28 <HAL_I2C_Init+0xe8>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	4a69      	ldr	r2, [pc, #420]	; (8004bc4 <HAL_I2C_Init+0x284>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	3301      	adds	r3, #1
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	495c      	ldr	r1, [pc, #368]	; (8004bb4 <HAL_I2C_Init+0x274>)
 8004a44:	428b      	cmp	r3, r1
 8004a46:	d819      	bhi.n	8004a7c <HAL_I2C_Init+0x13c>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1e59      	subs	r1, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a56:	1c59      	adds	r1, r3, #1
 8004a58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a5c:	400b      	ands	r3, r1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_I2C_Init+0x138>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1e59      	subs	r1, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a70:	3301      	adds	r3, #1
 8004a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a76:	e051      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	e04f      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d111      	bne.n	8004aa8 <HAL_I2C_Init+0x168>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1e58      	subs	r0, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	440b      	add	r3, r1
 8004a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a96:	3301      	adds	r3, #1
 8004a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	e012      	b.n	8004ace <HAL_I2C_Init+0x18e>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1e58      	subs	r0, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6859      	ldr	r1, [r3, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	0099      	lsls	r1, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_I2C_Init+0x196>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e022      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10e      	bne.n	8004afc <HAL_I2C_Init+0x1bc>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1e58      	subs	r0, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6859      	ldr	r1, [r3, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	440b      	add	r3, r1
 8004aec:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af0:	3301      	adds	r3, #1
 8004af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afa:	e00f      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1e58      	subs	r0, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	0099      	lsls	r1, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	6809      	ldr	r1, [r1, #0]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69da      	ldr	r2, [r3, #28]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6911      	ldr	r1, [r2, #16]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68d2      	ldr	r2, [r2, #12]
 8004b56:	4311      	orrs	r1, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	000186a0 	.word	0x000186a0
 8004bb8:	001e847f 	.word	0x001e847f
 8004bbc:	003d08ff 	.word	0x003d08ff
 8004bc0:	431bde83 	.word	0x431bde83
 8004bc4:	10624dd3 	.word	0x10624dd3

08004bc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	817b      	strh	r3, [r7, #10]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	813b      	strh	r3, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004be2:	f7fe fb87 	bl	80032f4 <HAL_GetTick>
 8004be6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	f040 80d9 	bne.w	8004da8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2319      	movs	r3, #25
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	496d      	ldr	r1, [pc, #436]	; (8004db4 <HAL_I2C_Mem_Write+0x1ec>)
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f971 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e0cc      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_I2C_Mem_Write+0x56>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e0c5      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d007      	beq.n	8004c44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2221      	movs	r2, #33	; 0x21
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2240      	movs	r2, #64	; 0x40
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a3a      	ldr	r2, [r7, #32]
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a4d      	ldr	r2, [pc, #308]	; (8004db8 <HAL_I2C_Mem_Write+0x1f0>)
 8004c84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c86:	88f8      	ldrh	r0, [r7, #6]
 8004c88:	893a      	ldrh	r2, [r7, #8]
 8004c8a:	8979      	ldrh	r1, [r7, #10]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	4603      	mov	r3, r0
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f890 	bl	8004dbc <I2C_RequestMemoryWrite>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d052      	beq.n	8004d48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e081      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f9f2 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00d      	beq.n	8004cd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d107      	bne.n	8004cce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ccc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e06b      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	781a      	ldrb	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d11b      	bne.n	8004d48 <HAL_I2C_Mem_Write+0x180>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d017      	beq.n	8004d48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	781a      	ldrb	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1aa      	bne.n	8004ca6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f9de 	bl	8005116 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00d      	beq.n	8004d7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d107      	bne.n	8004d78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e016      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	00100002 	.word	0x00100002
 8004db8:	ffff0000 	.word	0xffff0000

08004dbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	817b      	strh	r3, [r7, #10]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	813b      	strh	r3, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f878 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00d      	beq.n	8004e1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0c:	d103      	bne.n	8004e16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e05f      	b.n	8004eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e1a:	897b      	ldrh	r3, [r7, #10]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	6a3a      	ldr	r2, [r7, #32]
 8004e2e:	492d      	ldr	r1, [pc, #180]	; (8004ee4 <I2C_RequestMemoryWrite+0x128>)
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f8b0 	bl	8004f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e04c      	b.n	8004eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e58:	6a39      	ldr	r1, [r7, #32]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f91a 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d107      	bne.n	8004e7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e02b      	b.n	8004eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e88:	893b      	ldrh	r3, [r7, #8]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	611a      	str	r2, [r3, #16]
 8004e92:	e021      	b.n	8004ed8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e94:	893b      	ldrh	r3, [r7, #8]
 8004e96:	0a1b      	lsrs	r3, r3, #8
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea4:	6a39      	ldr	r1, [r7, #32]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f8f4 	bl	8005094 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00d      	beq.n	8004ece <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d107      	bne.n	8004eca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e005      	b.n	8004eda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ece:	893b      	ldrh	r3, [r7, #8]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	00010002 	.word	0x00010002

08004ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ef8:	e025      	b.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d021      	beq.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f02:	f7fe f9f7 	bl	80032f4 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d302      	bcc.n	8004f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d116      	bne.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e023      	b.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d10d      	bne.n	8004f6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	43da      	mvns	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bf0c      	ite	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	2300      	movne	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	e00c      	b.n	8004f86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	43da      	mvns	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4013      	ands	r3, r2
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bf0c      	ite	eq
 8004f7e:	2301      	moveq	r3, #1
 8004f80:	2300      	movne	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d0b6      	beq.n	8004efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
 8004fa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fa4:	e051      	b.n	800504a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb4:	d123      	bne.n	8004ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f043 0204 	orr.w	r2, r3, #4
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e046      	b.n	800508c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d021      	beq.n	800504a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7fe f975 	bl	80032f4 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d116      	bne.n	800504a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e020      	b.n	800508c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d10c      	bne.n	800506e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	43da      	mvns	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf14      	ite	ne
 8005066:	2301      	movne	r3, #1
 8005068:	2300      	moveq	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	e00b      	b.n	8005086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	43da      	mvns	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4013      	ands	r3, r2
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d18d      	bne.n	8004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050a0:	e02d      	b.n	80050fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f878 	bl	8005198 <I2C_IsAcknowledgeFailed>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e02d      	b.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d021      	beq.n	80050fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fe f91b 	bl	80032f4 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d116      	bne.n	80050fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f043 0220 	orr.w	r2, r3, #32
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e007      	b.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d1ca      	bne.n	80050a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005122:	e02d      	b.n	8005180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f837 	bl	8005198 <I2C_IsAcknowledgeFailed>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e02d      	b.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513a:	d021      	beq.n	8005180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513c:	f7fe f8da 	bl	80032f4 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	429a      	cmp	r2, r3
 800514a:	d302      	bcc.n	8005152 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d116      	bne.n	8005180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e007      	b.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b04      	cmp	r3, #4
 800518c:	d1ca      	bne.n	8005124 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ae:	d11b      	bne.n	80051e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	f043 0204 	orr.w	r2, r3, #4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e264      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d075      	beq.n	8005302 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005216:	4ba3      	ldr	r3, [pc, #652]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b04      	cmp	r3, #4
 8005220:	d00c      	beq.n	800523c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005222:	4ba0      	ldr	r3, [pc, #640]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800522a:	2b08      	cmp	r3, #8
 800522c:	d112      	bne.n	8005254 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800522e:	4b9d      	ldr	r3, [pc, #628]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800523a:	d10b      	bne.n	8005254 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800523c:	4b99      	ldr	r3, [pc, #612]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d05b      	beq.n	8005300 <HAL_RCC_OscConfig+0x108>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d157      	bne.n	8005300 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e23f      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525c:	d106      	bne.n	800526c <HAL_RCC_OscConfig+0x74>
 800525e:	4b91      	ldr	r3, [pc, #580]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a90      	ldr	r2, [pc, #576]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e01d      	b.n	80052a8 <HAL_RCC_OscConfig+0xb0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005274:	d10c      	bne.n	8005290 <HAL_RCC_OscConfig+0x98>
 8005276:	4b8b      	ldr	r3, [pc, #556]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a8a      	ldr	r2, [pc, #552]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 800527c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	4b88      	ldr	r3, [pc, #544]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a87      	ldr	r2, [pc, #540]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	e00b      	b.n	80052a8 <HAL_RCC_OscConfig+0xb0>
 8005290:	4b84      	ldr	r3, [pc, #528]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a83      	ldr	r2, [pc, #524]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	4b81      	ldr	r3, [pc, #516]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a80      	ldr	r2, [pc, #512]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 80052a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d013      	beq.n	80052d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b0:	f7fe f820 	bl	80032f4 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052b8:	f7fe f81c 	bl	80032f4 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b64      	cmp	r3, #100	; 0x64
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e204      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	4b76      	ldr	r3, [pc, #472]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0xc0>
 80052d6:	e014      	b.n	8005302 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d8:	f7fe f80c 	bl	80032f4 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052e0:	f7fe f808 	bl	80032f4 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b64      	cmp	r3, #100	; 0x64
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e1f0      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f2:	4b6c      	ldr	r3, [pc, #432]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0xe8>
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d063      	beq.n	80053d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800530e:	4b65      	ldr	r3, [pc, #404]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531a:	4b62      	ldr	r3, [pc, #392]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005322:	2b08      	cmp	r3, #8
 8005324:	d11c      	bne.n	8005360 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005326:	4b5f      	ldr	r3, [pc, #380]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d116      	bne.n	8005360 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005332:	4b5c      	ldr	r3, [pc, #368]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_RCC_OscConfig+0x152>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d001      	beq.n	800534a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e1c4      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534a:	4b56      	ldr	r3, [pc, #344]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4952      	ldr	r1, [pc, #328]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 800535a:	4313      	orrs	r3, r2
 800535c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800535e:	e03a      	b.n	80053d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d020      	beq.n	80053aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005368:	4b4f      	ldr	r3, [pc, #316]	; (80054a8 <HAL_RCC_OscConfig+0x2b0>)
 800536a:	2201      	movs	r2, #1
 800536c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fd ffc1 	bl	80032f4 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005376:	f7fd ffbd 	bl	80032f4 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e1a5      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005388:	4b46      	ldr	r3, [pc, #280]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005394:	4b43      	ldr	r3, [pc, #268]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4940      	ldr	r1, [pc, #256]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	600b      	str	r3, [r1, #0]
 80053a8:	e015      	b.n	80053d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053aa:	4b3f      	ldr	r3, [pc, #252]	; (80054a8 <HAL_RCC_OscConfig+0x2b0>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b0:	f7fd ffa0 	bl	80032f4 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053b8:	f7fd ff9c 	bl	80032f4 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e184      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ca:	4b36      	ldr	r3, [pc, #216]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d030      	beq.n	8005444 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d016      	beq.n	8005418 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ea:	4b30      	ldr	r3, [pc, #192]	; (80054ac <HAL_RCC_OscConfig+0x2b4>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f0:	f7fd ff80 	bl	80032f4 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053f8:	f7fd ff7c 	bl	80032f4 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e164      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540a:	4b26      	ldr	r3, [pc, #152]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 800540c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0x200>
 8005416:	e015      	b.n	8005444 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005418:	4b24      	ldr	r3, [pc, #144]	; (80054ac <HAL_RCC_OscConfig+0x2b4>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800541e:	f7fd ff69 	bl	80032f4 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005426:	f7fd ff65 	bl	80032f4 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e14d      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005438:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 800543a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1f0      	bne.n	8005426 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80a0 	beq.w	8005592 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005452:	2300      	movs	r3, #0
 8005454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005456:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10f      	bne.n	8005482 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	4a0e      	ldr	r2, [pc, #56]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 800546c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005470:	6413      	str	r3, [r2, #64]	; 0x40
 8005472:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <HAL_RCC_OscConfig+0x2ac>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800547e:	2301      	movs	r3, #1
 8005480:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005482:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <HAL_RCC_OscConfig+0x2b8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d121      	bne.n	80054d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800548e:	4b08      	ldr	r3, [pc, #32]	; (80054b0 <HAL_RCC_OscConfig+0x2b8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a07      	ldr	r2, [pc, #28]	; (80054b0 <HAL_RCC_OscConfig+0x2b8>)
 8005494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549a:	f7fd ff2b 	bl	80032f4 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a0:	e011      	b.n	80054c6 <HAL_RCC_OscConfig+0x2ce>
 80054a2:	bf00      	nop
 80054a4:	40023800 	.word	0x40023800
 80054a8:	42470000 	.word	0x42470000
 80054ac:	42470e80 	.word	0x42470e80
 80054b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b4:	f7fd ff1e 	bl	80032f4 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e106      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c6:	4b85      	ldr	r3, [pc, #532]	; (80056dc <HAL_RCC_OscConfig+0x4e4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d106      	bne.n	80054e8 <HAL_RCC_OscConfig+0x2f0>
 80054da:	4b81      	ldr	r3, [pc, #516]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	4a80      	ldr	r2, [pc, #512]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 80054e0:	f043 0301 	orr.w	r3, r3, #1
 80054e4:	6713      	str	r3, [r2, #112]	; 0x70
 80054e6:	e01c      	b.n	8005522 <HAL_RCC_OscConfig+0x32a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b05      	cmp	r3, #5
 80054ee:	d10c      	bne.n	800550a <HAL_RCC_OscConfig+0x312>
 80054f0:	4b7b      	ldr	r3, [pc, #492]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 80054f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f4:	4a7a      	ldr	r2, [pc, #488]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 80054f6:	f043 0304 	orr.w	r3, r3, #4
 80054fa:	6713      	str	r3, [r2, #112]	; 0x70
 80054fc:	4b78      	ldr	r3, [pc, #480]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	4a77      	ldr	r2, [pc, #476]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	6713      	str	r3, [r2, #112]	; 0x70
 8005508:	e00b      	b.n	8005522 <HAL_RCC_OscConfig+0x32a>
 800550a:	4b75      	ldr	r3, [pc, #468]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	4a74      	ldr	r2, [pc, #464]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	6713      	str	r3, [r2, #112]	; 0x70
 8005516:	4b72      	ldr	r3, [pc, #456]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	4a71      	ldr	r2, [pc, #452]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 800551c:	f023 0304 	bic.w	r3, r3, #4
 8005520:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d015      	beq.n	8005556 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552a:	f7fd fee3 	bl	80032f4 <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005530:	e00a      	b.n	8005548 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005532:	f7fd fedf 	bl	80032f4 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005540:	4293      	cmp	r3, r2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e0c5      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005548:	4b65      	ldr	r3, [pc, #404]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ee      	beq.n	8005532 <HAL_RCC_OscConfig+0x33a>
 8005554:	e014      	b.n	8005580 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005556:	f7fd fecd 	bl	80032f4 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800555c:	e00a      	b.n	8005574 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800555e:	f7fd fec9 	bl	80032f4 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	f241 3288 	movw	r2, #5000	; 0x1388
 800556c:	4293      	cmp	r3, r2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e0af      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005574:	4b5a      	ldr	r3, [pc, #360]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ee      	bne.n	800555e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d105      	bne.n	8005592 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005586:	4b56      	ldr	r3, [pc, #344]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	4a55      	ldr	r2, [pc, #340]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 800558c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005590:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 809b 	beq.w	80056d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800559c:	4b50      	ldr	r3, [pc, #320]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 030c 	and.w	r3, r3, #12
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d05c      	beq.n	8005662 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d141      	bne.n	8005634 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b0:	4b4c      	ldr	r3, [pc, #304]	; (80056e4 <HAL_RCC_OscConfig+0x4ec>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fd fe9d 	bl	80032f4 <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055be:	f7fd fe99 	bl	80032f4 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e081      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d0:	4b43      	ldr	r3, [pc, #268]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	019b      	lsls	r3, r3, #6
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	085b      	lsrs	r3, r3, #1
 80055f4:	3b01      	subs	r3, #1
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	061b      	lsls	r3, r3, #24
 8005600:	4937      	ldr	r1, [pc, #220]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 8005602:	4313      	orrs	r3, r2
 8005604:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005606:	4b37      	ldr	r3, [pc, #220]	; (80056e4 <HAL_RCC_OscConfig+0x4ec>)
 8005608:	2201      	movs	r2, #1
 800560a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560c:	f7fd fe72 	bl	80032f4 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005614:	f7fd fe6e 	bl	80032f4 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e056      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005626:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0f0      	beq.n	8005614 <HAL_RCC_OscConfig+0x41c>
 8005632:	e04e      	b.n	80056d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005634:	4b2b      	ldr	r3, [pc, #172]	; (80056e4 <HAL_RCC_OscConfig+0x4ec>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563a:	f7fd fe5b 	bl	80032f4 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005642:	f7fd fe57 	bl	80032f4 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e03f      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005654:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f0      	bne.n	8005642 <HAL_RCC_OscConfig+0x44a>
 8005660:	e037      	b.n	80056d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e032      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800566e:	4b1c      	ldr	r3, [pc, #112]	; (80056e0 <HAL_RCC_OscConfig+0x4e8>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d028      	beq.n	80056ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005686:	429a      	cmp	r2, r3
 8005688:	d121      	bne.n	80056ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005694:	429a      	cmp	r2, r3
 8005696:	d11a      	bne.n	80056ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800569e:	4013      	ands	r3, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d111      	bne.n	80056ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	085b      	lsrs	r3, r3, #1
 80056b6:	3b01      	subs	r3, #1
 80056b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d107      	bne.n	80056ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d001      	beq.n	80056d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40007000 	.word	0x40007000
 80056e0:	40023800 	.word	0x40023800
 80056e4:	42470060 	.word	0x42470060

080056e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e0cc      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056fc:	4b68      	ldr	r3, [pc, #416]	; (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d90c      	bls.n	8005724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570a:	4b65      	ldr	r3, [pc, #404]	; (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b63      	ldr	r3, [pc, #396]	; (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d001      	beq.n	8005724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e0b8      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d020      	beq.n	8005772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800573c:	4b59      	ldr	r3, [pc, #356]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	4a58      	ldr	r2, [pc, #352]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005746:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005754:	4b53      	ldr	r3, [pc, #332]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	4a52      	ldr	r2, [pc, #328]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800575e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005760:	4b50      	ldr	r3, [pc, #320]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	494d      	ldr	r1, [pc, #308]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d044      	beq.n	8005808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d107      	bne.n	8005796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005786:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d119      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e07f      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d003      	beq.n	80057a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a6:	4b3f      	ldr	r3, [pc, #252]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e06f      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b6:	4b3b      	ldr	r3, [pc, #236]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e067      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057c6:	4b37      	ldr	r3, [pc, #220]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f023 0203 	bic.w	r2, r3, #3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	4934      	ldr	r1, [pc, #208]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057d8:	f7fd fd8c 	bl	80032f4 <HAL_GetTick>
 80057dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057de:	e00a      	b.n	80057f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e0:	f7fd fd88 	bl	80032f4 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e04f      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f6:	4b2b      	ldr	r3, [pc, #172]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 020c 	and.w	r2, r3, #12
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	429a      	cmp	r2, r3
 8005806:	d1eb      	bne.n	80057e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005808:	4b25      	ldr	r3, [pc, #148]	; (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d20c      	bcs.n	8005830 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005816:	4b22      	ldr	r3, [pc, #136]	; (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800581e:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d001      	beq.n	8005830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e032      	b.n	8005896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800583c:	4b19      	ldr	r3, [pc, #100]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4916      	ldr	r1, [pc, #88]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	4313      	orrs	r3, r2
 800584c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800585a:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	490e      	ldr	r1, [pc, #56]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800586e:	f000 f821 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 8005872:	4602      	mov	r2, r0
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	091b      	lsrs	r3, r3, #4
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	490a      	ldr	r1, [pc, #40]	; (80058a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005880:	5ccb      	ldrb	r3, [r1, r3]
 8005882:	fa22 f303 	lsr.w	r3, r2, r3
 8005886:	4a09      	ldr	r2, [pc, #36]	; (80058ac <HAL_RCC_ClockConfig+0x1c4>)
 8005888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <HAL_RCC_ClockConfig+0x1c8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f7fd fcec 	bl	800326c <HAL_InitTick>

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40023c00 	.word	0x40023c00
 80058a4:	40023800 	.word	0x40023800
 80058a8:	0800c134 	.word	0x0800c134
 80058ac:	20000010 	.word	0x20000010
 80058b0:	20000014 	.word	0x20000014

080058b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	607b      	str	r3, [r7, #4]
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	2300      	movs	r3, #0
 80058c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058cc:	4b67      	ldr	r3, [pc, #412]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 030c 	and.w	r3, r3, #12
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d00d      	beq.n	80058f4 <HAL_RCC_GetSysClockFreq+0x40>
 80058d8:	2b08      	cmp	r3, #8
 80058da:	f200 80bd 	bhi.w	8005a58 <HAL_RCC_GetSysClockFreq+0x1a4>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x34>
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d003      	beq.n	80058ee <HAL_RCC_GetSysClockFreq+0x3a>
 80058e6:	e0b7      	b.n	8005a58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058e8:	4b61      	ldr	r3, [pc, #388]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80058ea:	60bb      	str	r3, [r7, #8]
       break;
 80058ec:	e0b7      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058ee:	4b61      	ldr	r3, [pc, #388]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80058f0:	60bb      	str	r3, [r7, #8]
      break;
 80058f2:	e0b4      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058f4:	4b5d      	ldr	r3, [pc, #372]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058fe:	4b5b      	ldr	r3, [pc, #364]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d04d      	beq.n	80059a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590a:	4b58      	ldr	r3, [pc, #352]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	099b      	lsrs	r3, r3, #6
 8005910:	461a      	mov	r2, r3
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	f240 10ff 	movw	r0, #511	; 0x1ff
 800591a:	f04f 0100 	mov.w	r1, #0
 800591e:	ea02 0800 	and.w	r8, r2, r0
 8005922:	ea03 0901 	and.w	r9, r3, r1
 8005926:	4640      	mov	r0, r8
 8005928:	4649      	mov	r1, r9
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	014b      	lsls	r3, r1, #5
 8005934:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005938:	0142      	lsls	r2, r0, #5
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	ebb0 0008 	subs.w	r0, r0, r8
 8005942:	eb61 0109 	sbc.w	r1, r1, r9
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	018b      	lsls	r3, r1, #6
 8005950:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005954:	0182      	lsls	r2, r0, #6
 8005956:	1a12      	subs	r2, r2, r0
 8005958:	eb63 0301 	sbc.w	r3, r3, r1
 800595c:	f04f 0000 	mov.w	r0, #0
 8005960:	f04f 0100 	mov.w	r1, #0
 8005964:	00d9      	lsls	r1, r3, #3
 8005966:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800596a:	00d0      	lsls	r0, r2, #3
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	eb12 0208 	adds.w	r2, r2, r8
 8005974:	eb43 0309 	adc.w	r3, r3, r9
 8005978:	f04f 0000 	mov.w	r0, #0
 800597c:	f04f 0100 	mov.w	r1, #0
 8005980:	0259      	lsls	r1, r3, #9
 8005982:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005986:	0250      	lsls	r0, r2, #9
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4610      	mov	r0, r2
 800598e:	4619      	mov	r1, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	461a      	mov	r2, r3
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	f7fb f888 	bl	8000aac <__aeabi_uldivmod>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4613      	mov	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e04a      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059a6:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	099b      	lsrs	r3, r3, #6
 80059ac:	461a      	mov	r2, r3
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059b6:	f04f 0100 	mov.w	r1, #0
 80059ba:	ea02 0400 	and.w	r4, r2, r0
 80059be:	ea03 0501 	and.w	r5, r3, r1
 80059c2:	4620      	mov	r0, r4
 80059c4:	4629      	mov	r1, r5
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	014b      	lsls	r3, r1, #5
 80059d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059d4:	0142      	lsls	r2, r0, #5
 80059d6:	4610      	mov	r0, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	1b00      	subs	r0, r0, r4
 80059dc:	eb61 0105 	sbc.w	r1, r1, r5
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	018b      	lsls	r3, r1, #6
 80059ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059ee:	0182      	lsls	r2, r0, #6
 80059f0:	1a12      	subs	r2, r2, r0
 80059f2:	eb63 0301 	sbc.w	r3, r3, r1
 80059f6:	f04f 0000 	mov.w	r0, #0
 80059fa:	f04f 0100 	mov.w	r1, #0
 80059fe:	00d9      	lsls	r1, r3, #3
 8005a00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a04:	00d0      	lsls	r0, r2, #3
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	1912      	adds	r2, r2, r4
 8005a0c:	eb45 0303 	adc.w	r3, r5, r3
 8005a10:	f04f 0000 	mov.w	r0, #0
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	0299      	lsls	r1, r3, #10
 8005a1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a1e:	0290      	lsls	r0, r2, #10
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4610      	mov	r0, r2
 8005a26:	4619      	mov	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	f7fb f83c 	bl	8000aac <__aeabi_uldivmod>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4613      	mov	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	0c1b      	lsrs	r3, r3, #16
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	3301      	adds	r3, #1
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	60bb      	str	r3, [r7, #8]
      break;
 8005a56:	e002      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a5a:	60bb      	str	r3, [r7, #8]
      break;
 8005a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	00f42400 	.word	0x00f42400
 8005a74:	007a1200 	.word	0x007a1200

08005a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a7c:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000010 	.word	0x20000010

08005a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a94:	f7ff fff0 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	0a9b      	lsrs	r3, r3, #10
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	4903      	ldr	r1, [pc, #12]	; (8005ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aa6:	5ccb      	ldrb	r3, [r1, r3]
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	0800c144 	.word	0x0800c144

08005ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005abc:	f7ff ffdc 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	0b5b      	lsrs	r3, r3, #13
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	4903      	ldr	r1, [pc, #12]	; (8005adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	0800c144 	.word	0x0800c144

08005ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e07b      	b.n	8005bea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d108      	bne.n	8005b0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b02:	d009      	beq.n	8005b18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	61da      	str	r2, [r3, #28]
 8005b0a:	e005      	b.n	8005b18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fd f808 	bl	8002b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9c:	ea42 0103 	orr.w	r1, r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	f003 0104 	and.w	r1, r3, #4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	f003 0210 	and.w	r2, r3, #16
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b088      	sub	sp, #32
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_SPI_Transmit+0x22>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e126      	b.n	8005e62 <HAL_SPI_Transmit+0x270>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c1c:	f7fd fb6a 	bl	80032f4 <HAL_GetTick>
 8005c20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d002      	beq.n	8005c38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c32:	2302      	movs	r3, #2
 8005c34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c36:	e10b      	b.n	8005e50 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_SPI_Transmit+0x52>
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d102      	bne.n	8005c4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c48:	e102      	b.n	8005e50 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2203      	movs	r2, #3
 8005c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c90:	d10f      	bne.n	8005cb2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d007      	beq.n	8005cd0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd8:	d14b      	bne.n	8005d72 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_SPI_Transmit+0xf6>
 8005ce2:	8afb      	ldrh	r3, [r7, #22]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d13e      	bne.n	8005d66 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	881a      	ldrh	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	1c9a      	adds	r2, r3, #2
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d0c:	e02b      	b.n	8005d66 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d112      	bne.n	8005d42 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	881a      	ldrh	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	1c9a      	adds	r2, r3, #2
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d40:	e011      	b.n	8005d66 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d42:	f7fd fad7 	bl	80032f4 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d803      	bhi.n	8005d5a <HAL_SPI_Transmit+0x168>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d102      	bne.n	8005d60 <HAL_SPI_Transmit+0x16e>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d64:	e074      	b.n	8005e50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1ce      	bne.n	8005d0e <HAL_SPI_Transmit+0x11c>
 8005d70:	e04c      	b.n	8005e0c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_SPI_Transmit+0x18e>
 8005d7a:	8afb      	ldrh	r3, [r7, #22]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d140      	bne.n	8005e02 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	7812      	ldrb	r2, [r2, #0]
 8005d8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005da6:	e02c      	b.n	8005e02 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d113      	bne.n	8005dde <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	330c      	adds	r3, #12
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ddc:	e011      	b.n	8005e02 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dde:	f7fd fa89 	bl	80032f4 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d803      	bhi.n	8005df6 <HAL_SPI_Transmit+0x204>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d102      	bne.n	8005dfc <HAL_SPI_Transmit+0x20a>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e00:	e026      	b.n	8005e50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1cd      	bne.n	8005da8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 fbcb 	bl	80065ac <SPI_EndRxTxTransaction>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e000      	b.n	8005e50 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3720      	adds	r7, #32
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b088      	sub	sp, #32
 8005e6e:	af02      	add	r7, sp, #8
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e86:	d112      	bne.n	8005eae <HAL_SPI_Receive+0x44>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10e      	bne.n	8005eae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2204      	movs	r2, #4
 8005e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f8f1 	bl	800608c <HAL_SPI_TransmitReceive>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	e0ea      	b.n	8006084 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_SPI_Receive+0x52>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e0e3      	b.n	8006084 <HAL_SPI_Receive+0x21a>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ec4:	f7fd fa16 	bl	80032f4 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d002      	beq.n	8005edc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eda:	e0ca      	b.n	8006072 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <HAL_SPI_Receive+0x7e>
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eec:	e0c1      	b.n	8006072 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	88fa      	ldrh	r2, [r7, #6]
 8005f06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	88fa      	ldrh	r2, [r7, #6]
 8005f0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f34:	d10f      	bne.n	8005f56 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f60:	2b40      	cmp	r3, #64	; 0x40
 8005f62:	d007      	beq.n	8005f74 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d162      	bne.n	8006042 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f7c:	e02e      	b.n	8005fdc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d115      	bne.n	8005fb8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f103 020c 	add.w	r2, r3, #12
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fb6:	e011      	b.n	8005fdc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fb8:	f7fd f99c 	bl	80032f4 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d803      	bhi.n	8005fd0 <HAL_SPI_Receive+0x166>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d102      	bne.n	8005fd6 <HAL_SPI_Receive+0x16c>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005fda:	e04a      	b.n	8006072 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1cb      	bne.n	8005f7e <HAL_SPI_Receive+0x114>
 8005fe6:	e031      	b.n	800604c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d113      	bne.n	800601e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	b292      	uxth	r2, r2
 8006002:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	1c9a      	adds	r2, r3, #2
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800601c:	e011      	b.n	8006042 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800601e:	f7fd f969 	bl	80032f4 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d803      	bhi.n	8006036 <HAL_SPI_Receive+0x1cc>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d102      	bne.n	800603c <HAL_SPI_Receive+0x1d2>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006040:	e017      	b.n	8006072 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1cd      	bne.n	8005fe8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fa45 	bl	80064e0 <SPI_EndRxTransaction>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
 800606e:	e000      	b.n	8006072 <HAL_SPI_Receive+0x208>
  }

error :
 8006070:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006082:	7dfb      	ldrb	r3, [r7, #23]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08c      	sub	sp, #48	; 0x30
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800609a:	2301      	movs	r3, #1
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_SPI_TransmitReceive+0x26>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e18a      	b.n	80063c8 <HAL_SPI_TransmitReceive+0x33c>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ba:	f7fd f91b 	bl	80032f4 <HAL_GetTick>
 80060be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80060d0:	887b      	ldrh	r3, [r7, #2]
 80060d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d00f      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x70>
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060e2:	d107      	bne.n	80060f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <HAL_SPI_TransmitReceive+0x68>
 80060ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d003      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060f4:	2302      	movs	r3, #2
 80060f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060fa:	e15b      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <HAL_SPI_TransmitReceive+0x82>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_SPI_TransmitReceive+0x82>
 8006108:	887b      	ldrh	r3, [r7, #2]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006114:	e14e      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b04      	cmp	r3, #4
 8006120:	d003      	beq.n	800612a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2205      	movs	r2, #5
 8006126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	887a      	ldrh	r2, [r7, #2]
 800613a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	887a      	ldrh	r2, [r7, #2]
 8006140:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	887a      	ldrh	r2, [r7, #2]
 800614c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	887a      	ldrh	r2, [r7, #2]
 8006152:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d007      	beq.n	800617e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800617c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006186:	d178      	bne.n	800627a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_SPI_TransmitReceive+0x10a>
 8006190:	8b7b      	ldrh	r3, [r7, #26]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d166      	bne.n	8006264 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	881a      	ldrh	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	1c9a      	adds	r2, r3, #2
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ba:	e053      	b.n	8006264 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d11b      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x176>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d016      	beq.n	8006202 <HAL_SPI_TransmitReceive+0x176>
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d113      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	881a      	ldrh	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	1c9a      	adds	r2, r3, #2
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b01      	cmp	r3, #1
 800620e:	d119      	bne.n	8006244 <HAL_SPI_TransmitReceive+0x1b8>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d014      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	b292      	uxth	r2, r2
 8006226:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	1c9a      	adds	r2, r3, #2
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006240:	2301      	movs	r3, #1
 8006242:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006244:	f7fd f856 	bl	80032f4 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006250:	429a      	cmp	r2, r3
 8006252:	d807      	bhi.n	8006264 <HAL_SPI_TransmitReceive+0x1d8>
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625a:	d003      	beq.n	8006264 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006262:	e0a7      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1a6      	bne.n	80061bc <HAL_SPI_TransmitReceive+0x130>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1a1      	bne.n	80061bc <HAL_SPI_TransmitReceive+0x130>
 8006278:	e07c      	b.n	8006374 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x1fc>
 8006282:	8b7b      	ldrh	r3, [r7, #26]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d16b      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	7812      	ldrb	r2, [r2, #0]
 8006294:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ae:	e057      	b.n	8006360 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d11c      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x26c>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d017      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x26c>
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d114      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	330c      	adds	r3, #12
 80062d8:	7812      	ldrb	r2, [r2, #0]
 80062da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b01      	cmp	r3, #1
 8006304:	d119      	bne.n	800633a <HAL_SPI_TransmitReceive+0x2ae>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d014      	beq.n	800633a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006336:	2301      	movs	r3, #1
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800633a:	f7fc ffdb 	bl	80032f4 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006346:	429a      	cmp	r2, r3
 8006348:	d803      	bhi.n	8006352 <HAL_SPI_TransmitReceive+0x2c6>
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006350:	d102      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x2cc>
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	2b00      	cmp	r3, #0
 8006356:	d103      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800635e:	e029      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1a2      	bne.n	80062b0 <HAL_SPI_TransmitReceive+0x224>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d19d      	bne.n	80062b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006376:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 f917 	bl	80065ac <SPI_EndRxTxTransaction>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d006      	beq.n	8006392 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006390:	e010      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10b      	bne.n	80063b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	e000      	b.n	80063b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80063b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3730      	adds	r7, #48	; 0x30
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063e0:	f7fc ff88 	bl	80032f4 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	4413      	add	r3, r2
 80063ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063f0:	f7fc ff80 	bl	80032f4 <HAL_GetTick>
 80063f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063f6:	4b39      	ldr	r3, [pc, #228]	; (80064dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	015b      	lsls	r3, r3, #5
 80063fc:	0d1b      	lsrs	r3, r3, #20
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	fb02 f303 	mul.w	r3, r2, r3
 8006404:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006406:	e054      	b.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640e:	d050      	beq.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006410:	f7fc ff70 	bl	80032f4 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	429a      	cmp	r2, r3
 800641e:	d902      	bls.n	8006426 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d13d      	bne.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800643e:	d111      	bne.n	8006464 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006448:	d004      	beq.n	8006454 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006452:	d107      	bne.n	8006464 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646c:	d10f      	bne.n	800648e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800648c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e017      	b.n	80064d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4013      	ands	r3, r2
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	bf0c      	ite	eq
 80064c2:	2301      	moveq	r3, #1
 80064c4:	2300      	movne	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d19b      	bne.n	8006408 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000010 	.word	0x20000010

080064e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f4:	d111      	bne.n	800651a <SPI_EndRxTransaction+0x3a>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064fe:	d004      	beq.n	800650a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006508:	d107      	bne.n	800651a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006518:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006522:	d12a      	bne.n	800657a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652c:	d012      	beq.n	8006554 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff ff49 	bl	80063d0 <SPI_WaitFlagStateUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d02d      	beq.n	80065a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	f043 0220 	orr.w	r2, r3, #32
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e026      	b.n	80065a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	2101      	movs	r1, #1
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff ff36 	bl	80063d0 <SPI_WaitFlagStateUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01a      	beq.n	80065a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e013      	b.n	80065a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2200      	movs	r2, #0
 8006582:	2101      	movs	r1, #1
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff ff23 	bl	80063d0 <SPI_WaitFlagStateUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006594:	f043 0220 	orr.w	r2, r3, #32
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e000      	b.n	80065a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065b8:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <SPI_EndRxTxTransaction+0x7c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	; (800662c <SPI_EndRxTxTransaction+0x80>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	0d5b      	lsrs	r3, r3, #21
 80065c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065c8:	fb02 f303 	mul.w	r3, r2, r3
 80065cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065d6:	d112      	bne.n	80065fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	2180      	movs	r1, #128	; 0x80
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f7ff fef4 	bl	80063d0 <SPI_WaitFlagStateUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d016      	beq.n	800661c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f2:	f043 0220 	orr.w	r2, r3, #32
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e00f      	b.n	800661e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	3b01      	subs	r3, #1
 8006608:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006614:	2b80      	cmp	r3, #128	; 0x80
 8006616:	d0f2      	beq.n	80065fe <SPI_EndRxTxTransaction+0x52>
 8006618:	e000      	b.n	800661c <SPI_EndRxTxTransaction+0x70>
        break;
 800661a:	bf00      	nop
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20000010 	.word	0x20000010
 800662c:	165e9f81 	.word	0x165e9f81

08006630 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e034      	b.n	80066b0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7fa fe92 	bl	8001384 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3308      	adds	r3, #8
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f002 f828 	bl	80086c0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	461a      	mov	r2, r3
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	f002 f872 	bl	8008764 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6858      	ldr	r0, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	f002 f8a7 	bl	80087e0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	6892      	ldr	r2, [r2, #8]
 800669a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	6892      	ldr	r2, [r2, #8]
 80066a6:	f041 0101 	orr.w	r1, r1, #1
 80066aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e041      	b.n	800674e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fc fbcc 	bl	8002e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	f000 fc7a 	bl	8006ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b01      	cmp	r3, #1
 800676a:	d001      	beq.n	8006770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e04e      	b.n	800680e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a23      	ldr	r2, [pc, #140]	; (800681c <HAL_TIM_Base_Start_IT+0xc4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d022      	beq.n	80067d8 <HAL_TIM_Base_Start_IT+0x80>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679a:	d01d      	beq.n	80067d8 <HAL_TIM_Base_Start_IT+0x80>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1f      	ldr	r2, [pc, #124]	; (8006820 <HAL_TIM_Base_Start_IT+0xc8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d018      	beq.n	80067d8 <HAL_TIM_Base_Start_IT+0x80>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1e      	ldr	r2, [pc, #120]	; (8006824 <HAL_TIM_Base_Start_IT+0xcc>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d013      	beq.n	80067d8 <HAL_TIM_Base_Start_IT+0x80>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <HAL_TIM_Base_Start_IT+0xd0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00e      	beq.n	80067d8 <HAL_TIM_Base_Start_IT+0x80>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1b      	ldr	r2, [pc, #108]	; (800682c <HAL_TIM_Base_Start_IT+0xd4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d009      	beq.n	80067d8 <HAL_TIM_Base_Start_IT+0x80>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a19      	ldr	r2, [pc, #100]	; (8006830 <HAL_TIM_Base_Start_IT+0xd8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d004      	beq.n	80067d8 <HAL_TIM_Base_Start_IT+0x80>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <HAL_TIM_Base_Start_IT+0xdc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d111      	bne.n	80067fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b06      	cmp	r3, #6
 80067e8:	d010      	beq.n	800680c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0201 	orr.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fa:	e007      	b.n	800680c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40010000 	.word	0x40010000
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40010400 	.word	0x40010400
 8006830:	40014000 	.word	0x40014000
 8006834:	40001800 	.word	0x40001800

08006838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e041      	b.n	80068ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f839 	bl	80068d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f000 fbba 	bl	8006ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
	...

080068ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <HAL_TIM_PWM_Start+0x24>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	bf14      	ite	ne
 8006908:	2301      	movne	r3, #1
 800690a:	2300      	moveq	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e022      	b.n	8006956 <HAL_TIM_PWM_Start+0x6a>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b04      	cmp	r3, #4
 8006914:	d109      	bne.n	800692a <HAL_TIM_PWM_Start+0x3e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b01      	cmp	r3, #1
 8006920:	bf14      	ite	ne
 8006922:	2301      	movne	r3, #1
 8006924:	2300      	moveq	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	e015      	b.n	8006956 <HAL_TIM_PWM_Start+0x6a>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b08      	cmp	r3, #8
 800692e:	d109      	bne.n	8006944 <HAL_TIM_PWM_Start+0x58>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	bf14      	ite	ne
 800693c:	2301      	movne	r3, #1
 800693e:	2300      	moveq	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	e008      	b.n	8006956 <HAL_TIM_PWM_Start+0x6a>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	bf14      	ite	ne
 8006950:	2301      	movne	r3, #1
 8006952:	2300      	moveq	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e07c      	b.n	8006a58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <HAL_TIM_PWM_Start+0x82>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800696c:	e013      	b.n	8006996 <HAL_TIM_PWM_Start+0xaa>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b04      	cmp	r3, #4
 8006972:	d104      	bne.n	800697e <HAL_TIM_PWM_Start+0x92>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800697c:	e00b      	b.n	8006996 <HAL_TIM_PWM_Start+0xaa>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b08      	cmp	r3, #8
 8006982:	d104      	bne.n	800698e <HAL_TIM_PWM_Start+0xa2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800698c:	e003      	b.n	8006996 <HAL_TIM_PWM_Start+0xaa>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2201      	movs	r2, #1
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fe10 	bl	80075c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a2d      	ldr	r2, [pc, #180]	; (8006a60 <HAL_TIM_PWM_Start+0x174>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d004      	beq.n	80069b8 <HAL_TIM_PWM_Start+0xcc>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2c      	ldr	r2, [pc, #176]	; (8006a64 <HAL_TIM_PWM_Start+0x178>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d101      	bne.n	80069bc <HAL_TIM_PWM_Start+0xd0>
 80069b8:	2301      	movs	r3, #1
 80069ba:	e000      	b.n	80069be <HAL_TIM_PWM_Start+0xd2>
 80069bc:	2300      	movs	r3, #0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a22      	ldr	r2, [pc, #136]	; (8006a60 <HAL_TIM_PWM_Start+0x174>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d022      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x136>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e4:	d01d      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x136>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1f      	ldr	r2, [pc, #124]	; (8006a68 <HAL_TIM_PWM_Start+0x17c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d018      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x136>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a1d      	ldr	r2, [pc, #116]	; (8006a6c <HAL_TIM_PWM_Start+0x180>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x136>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <HAL_TIM_PWM_Start+0x184>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x136>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <HAL_TIM_PWM_Start+0x178>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x136>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a18      	ldr	r2, [pc, #96]	; (8006a74 <HAL_TIM_PWM_Start+0x188>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x136>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <HAL_TIM_PWM_Start+0x18c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d111      	bne.n	8006a46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b06      	cmp	r3, #6
 8006a32:	d010      	beq.n	8006a56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a44:	e007      	b.n	8006a56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40010400 	.word	0x40010400
 8006a68:	40000400 	.word	0x40000400
 8006a6c:	40000800 	.word	0x40000800
 8006a70:	40000c00 	.word	0x40000c00
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40001800 	.word	0x40001800

08006a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d122      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d11b      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0202 	mvn.w	r2, #2
 8006aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f003 0303 	and.w	r3, r3, #3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa77 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 8006ac4:	e005      	b.n	8006ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa69 	bl	8006f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fa7a 	bl	8006fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d122      	bne.n	8006b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d11b      	bne.n	8006b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0204 	mvn.w	r2, #4
 8006afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2202      	movs	r2, #2
 8006b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa4d 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa3f 	bl	8006f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fa50 	bl	8006fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	d122      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d11b      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0208 	mvn.w	r2, #8
 8006b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2204      	movs	r2, #4
 8006b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fa23 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 8006b6c:	e005      	b.n	8006b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa15 	bl	8006f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fa26 	bl	8006fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b10      	cmp	r3, #16
 8006b8c:	d122      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	d11b      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0210 	mvn.w	r2, #16
 8006ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2208      	movs	r2, #8
 8006baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9f9 	bl	8006fb2 <HAL_TIM_IC_CaptureCallback>
 8006bc0:	e005      	b.n	8006bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f9eb 	bl	8006f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f9fc 	bl	8006fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d10e      	bne.n	8006c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d107      	bne.n	8006c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f06f 0201 	mvn.w	r2, #1
 8006bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fb ff44 	bl	8002a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0a:	2b80      	cmp	r3, #128	; 0x80
 8006c0c:	d10e      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b80      	cmp	r3, #128	; 0x80
 8006c1a:	d107      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fd78 	bl	800771c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d10e      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c44:	2b40      	cmp	r3, #64	; 0x40
 8006c46:	d107      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f9c1 	bl	8006fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d10e      	bne.n	8006c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d107      	bne.n	8006c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0220 	mvn.w	r2, #32
 8006c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fd42 	bl	8007708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d101      	bne.n	8006caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e0ae      	b.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b0c      	cmp	r3, #12
 8006cb6:	f200 809f 	bhi.w	8006df8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006cba:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006cf5 	.word	0x08006cf5
 8006cc4:	08006df9 	.word	0x08006df9
 8006cc8:	08006df9 	.word	0x08006df9
 8006ccc:	08006df9 	.word	0x08006df9
 8006cd0:	08006d35 	.word	0x08006d35
 8006cd4:	08006df9 	.word	0x08006df9
 8006cd8:	08006df9 	.word	0x08006df9
 8006cdc:	08006df9 	.word	0x08006df9
 8006ce0:	08006d77 	.word	0x08006d77
 8006ce4:	08006df9 	.word	0x08006df9
 8006ce8:	08006df9 	.word	0x08006df9
 8006cec:	08006df9 	.word	0x08006df9
 8006cf0:	08006db7 	.word	0x08006db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fa18 	bl	8007130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0208 	orr.w	r2, r2, #8
 8006d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0204 	bic.w	r2, r2, #4
 8006d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6999      	ldr	r1, [r3, #24]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	619a      	str	r2, [r3, #24]
      break;
 8006d32:	e064      	b.n	8006dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fa68 	bl	8007210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6999      	ldr	r1, [r3, #24]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	021a      	lsls	r2, r3, #8
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	619a      	str	r2, [r3, #24]
      break;
 8006d74:	e043      	b.n	8006dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fabd 	bl	80072fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0208 	orr.w	r2, r2, #8
 8006d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0204 	bic.w	r2, r2, #4
 8006da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69d9      	ldr	r1, [r3, #28]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	61da      	str	r2, [r3, #28]
      break;
 8006db4:	e023      	b.n	8006dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 fb11 	bl	80073e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69d9      	ldr	r1, [r3, #28]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	021a      	lsls	r2, r3, #8
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	61da      	str	r2, [r3, #28]
      break;
 8006df6:	e002      	b.n	8006dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_TIM_ConfigClockSource+0x1c>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e0b4      	b.n	8006f96 <HAL_TIM_ConfigClockSource+0x186>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e64:	d03e      	beq.n	8006ee4 <HAL_TIM_ConfigClockSource+0xd4>
 8006e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e6a:	f200 8087 	bhi.w	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e72:	f000 8086 	beq.w	8006f82 <HAL_TIM_ConfigClockSource+0x172>
 8006e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7a:	d87f      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e7c:	2b70      	cmp	r3, #112	; 0x70
 8006e7e:	d01a      	beq.n	8006eb6 <HAL_TIM_ConfigClockSource+0xa6>
 8006e80:	2b70      	cmp	r3, #112	; 0x70
 8006e82:	d87b      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e84:	2b60      	cmp	r3, #96	; 0x60
 8006e86:	d050      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0x11a>
 8006e88:	2b60      	cmp	r3, #96	; 0x60
 8006e8a:	d877      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e8c:	2b50      	cmp	r3, #80	; 0x50
 8006e8e:	d03c      	beq.n	8006f0a <HAL_TIM_ConfigClockSource+0xfa>
 8006e90:	2b50      	cmp	r3, #80	; 0x50
 8006e92:	d873      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e94:	2b40      	cmp	r3, #64	; 0x40
 8006e96:	d058      	beq.n	8006f4a <HAL_TIM_ConfigClockSource+0x13a>
 8006e98:	2b40      	cmp	r3, #64	; 0x40
 8006e9a:	d86f      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e9c:	2b30      	cmp	r3, #48	; 0x30
 8006e9e:	d064      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x15a>
 8006ea0:	2b30      	cmp	r3, #48	; 0x30
 8006ea2:	d86b      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006ea4:	2b20      	cmp	r3, #32
 8006ea6:	d060      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x15a>
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d867      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d05c      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x15a>
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d05a      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x15a>
 8006eb4:	e062      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6899      	ldr	r1, [r3, #8]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f000 fb5d 	bl	8007584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	609a      	str	r2, [r3, #8]
      break;
 8006ee2:	e04f      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6818      	ldr	r0, [r3, #0]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	6899      	ldr	r1, [r3, #8]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f000 fb46 	bl	8007584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f06:	609a      	str	r2, [r3, #8]
      break;
 8006f08:	e03c      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6818      	ldr	r0, [r3, #0]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	6859      	ldr	r1, [r3, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f000 faba 	bl	8007490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2150      	movs	r1, #80	; 0x50
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fb13 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006f28:	e02c      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6818      	ldr	r0, [r3, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6859      	ldr	r1, [r3, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f000 fad9 	bl	80074ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2160      	movs	r1, #96	; 0x60
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fb03 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006f48:	e01c      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6859      	ldr	r1, [r3, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f000 fa9a 	bl	8007490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2140      	movs	r1, #64	; 0x40
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 faf3 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006f68:	e00c      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4619      	mov	r1, r3
 8006f74:	4610      	mov	r0, r2
 8006f76:	f000 faea 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006f7a:	e003      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f80:	e000      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a40      	ldr	r2, [pc, #256]	; (8007104 <TIM_Base_SetConfig+0x114>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d013      	beq.n	8007030 <TIM_Base_SetConfig+0x40>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800700e:	d00f      	beq.n	8007030 <TIM_Base_SetConfig+0x40>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a3d      	ldr	r2, [pc, #244]	; (8007108 <TIM_Base_SetConfig+0x118>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00b      	beq.n	8007030 <TIM_Base_SetConfig+0x40>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a3c      	ldr	r2, [pc, #240]	; (800710c <TIM_Base_SetConfig+0x11c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d007      	beq.n	8007030 <TIM_Base_SetConfig+0x40>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a3b      	ldr	r2, [pc, #236]	; (8007110 <TIM_Base_SetConfig+0x120>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_Base_SetConfig+0x40>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a3a      	ldr	r2, [pc, #232]	; (8007114 <TIM_Base_SetConfig+0x124>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d108      	bne.n	8007042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a2f      	ldr	r2, [pc, #188]	; (8007104 <TIM_Base_SetConfig+0x114>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d02b      	beq.n	80070a2 <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007050:	d027      	beq.n	80070a2 <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2c      	ldr	r2, [pc, #176]	; (8007108 <TIM_Base_SetConfig+0x118>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d023      	beq.n	80070a2 <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a2b      	ldr	r2, [pc, #172]	; (800710c <TIM_Base_SetConfig+0x11c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d01f      	beq.n	80070a2 <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a2a      	ldr	r2, [pc, #168]	; (8007110 <TIM_Base_SetConfig+0x120>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01b      	beq.n	80070a2 <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a29      	ldr	r2, [pc, #164]	; (8007114 <TIM_Base_SetConfig+0x124>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d017      	beq.n	80070a2 <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a28      	ldr	r2, [pc, #160]	; (8007118 <TIM_Base_SetConfig+0x128>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a27      	ldr	r2, [pc, #156]	; (800711c <TIM_Base_SetConfig+0x12c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00f      	beq.n	80070a2 <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a26      	ldr	r2, [pc, #152]	; (8007120 <TIM_Base_SetConfig+0x130>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00b      	beq.n	80070a2 <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a25      	ldr	r2, [pc, #148]	; (8007124 <TIM_Base_SetConfig+0x134>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d007      	beq.n	80070a2 <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a24      	ldr	r2, [pc, #144]	; (8007128 <TIM_Base_SetConfig+0x138>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a23      	ldr	r2, [pc, #140]	; (800712c <TIM_Base_SetConfig+0x13c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d108      	bne.n	80070b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a0a      	ldr	r2, [pc, #40]	; (8007104 <TIM_Base_SetConfig+0x114>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <TIM_Base_SetConfig+0xf8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a0c      	ldr	r2, [pc, #48]	; (8007114 <TIM_Base_SetConfig+0x124>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d103      	bne.n	80070f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	615a      	str	r2, [r3, #20]
}
 80070f6:	bf00      	nop
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	40010000 	.word	0x40010000
 8007108:	40000400 	.word	0x40000400
 800710c:	40000800 	.word	0x40000800
 8007110:	40000c00 	.word	0x40000c00
 8007114:	40010400 	.word	0x40010400
 8007118:	40014000 	.word	0x40014000
 800711c:	40014400 	.word	0x40014400
 8007120:	40014800 	.word	0x40014800
 8007124:	40001800 	.word	0x40001800
 8007128:	40001c00 	.word	0x40001c00
 800712c:	40002000 	.word	0x40002000

08007130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f023 0201 	bic.w	r2, r3, #1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0303 	bic.w	r3, r3, #3
 8007166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f023 0302 	bic.w	r3, r3, #2
 8007178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a20      	ldr	r2, [pc, #128]	; (8007208 <TIM_OC1_SetConfig+0xd8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_OC1_SetConfig+0x64>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a1f      	ldr	r2, [pc, #124]	; (800720c <TIM_OC1_SetConfig+0xdc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d10c      	bne.n	80071ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 0308 	bic.w	r3, r3, #8
 800719a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 0304 	bic.w	r3, r3, #4
 80071ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a15      	ldr	r2, [pc, #84]	; (8007208 <TIM_OC1_SetConfig+0xd8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d003      	beq.n	80071be <TIM_OC1_SetConfig+0x8e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a14      	ldr	r2, [pc, #80]	; (800720c <TIM_OC1_SetConfig+0xdc>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d111      	bne.n	80071e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	621a      	str	r2, [r3, #32]
}
 80071fc:	bf00      	nop
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	40010000 	.word	0x40010000
 800720c:	40010400 	.word	0x40010400

08007210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	f023 0210 	bic.w	r2, r3, #16
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	021b      	lsls	r3, r3, #8
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f023 0320 	bic.w	r3, r3, #32
 800725a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a22      	ldr	r2, [pc, #136]	; (80072f4 <TIM_OC2_SetConfig+0xe4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d003      	beq.n	8007278 <TIM_OC2_SetConfig+0x68>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a21      	ldr	r2, [pc, #132]	; (80072f8 <TIM_OC2_SetConfig+0xe8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d10d      	bne.n	8007294 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800727e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <TIM_OC2_SetConfig+0xe4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_OC2_SetConfig+0x94>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a16      	ldr	r2, [pc, #88]	; (80072f8 <TIM_OC2_SetConfig+0xe8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d113      	bne.n	80072cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40010400 	.word	0x40010400

080072fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0303 	bic.w	r3, r3, #3
 8007332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	021b      	lsls	r3, r3, #8
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	4313      	orrs	r3, r2
 8007350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a21      	ldr	r2, [pc, #132]	; (80073dc <TIM_OC3_SetConfig+0xe0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d003      	beq.n	8007362 <TIM_OC3_SetConfig+0x66>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a20      	ldr	r2, [pc, #128]	; (80073e0 <TIM_OC3_SetConfig+0xe4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d10d      	bne.n	800737e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	021b      	lsls	r3, r3, #8
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	4313      	orrs	r3, r2
 8007374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800737c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a16      	ldr	r2, [pc, #88]	; (80073dc <TIM_OC3_SetConfig+0xe0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d003      	beq.n	800738e <TIM_OC3_SetConfig+0x92>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <TIM_OC3_SetConfig+0xe4>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d113      	bne.n	80073b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800739c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	621a      	str	r2, [r3, #32]
}
 80073d0:	bf00      	nop
 80073d2:	371c      	adds	r7, #28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	40010000 	.word	0x40010000
 80073e0:	40010400 	.word	0x40010400

080073e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800741a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	021b      	lsls	r3, r3, #8
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4313      	orrs	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800742e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	031b      	lsls	r3, r3, #12
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a12      	ldr	r2, [pc, #72]	; (8007488 <TIM_OC4_SetConfig+0xa4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d003      	beq.n	800744c <TIM_OC4_SetConfig+0x68>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a11      	ldr	r2, [pc, #68]	; (800748c <TIM_OC4_SetConfig+0xa8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d109      	bne.n	8007460 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	019b      	lsls	r3, r3, #6
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	4313      	orrs	r3, r2
 800745e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	621a      	str	r2, [r3, #32]
}
 800747a:	bf00      	nop
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40010000 	.word	0x40010000
 800748c:	40010400 	.word	0x40010400

08007490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	f023 0201 	bic.w	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f023 030a 	bic.w	r3, r3, #10
 80074cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	621a      	str	r2, [r3, #32]
}
 80074e2:	bf00      	nop
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b087      	sub	sp, #28
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f023 0210 	bic.w	r2, r3, #16
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	031b      	lsls	r3, r3, #12
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800752a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800754e:	b480      	push	{r7}
 8007550:	b085      	sub	sp, #20
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	f043 0307 	orr.w	r3, r3, #7
 8007570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	609a      	str	r2, [r3, #8]
}
 8007578:	bf00      	nop
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800759e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	021a      	lsls	r2, r3, #8
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	431a      	orrs	r2, r3
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	609a      	str	r2, [r3, #8]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f003 031f 	and.w	r3, r3, #31
 80075d6:	2201      	movs	r2, #1
 80075d8:	fa02 f303 	lsl.w	r3, r2, r3
 80075dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1a      	ldr	r2, [r3, #32]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	43db      	mvns	r3, r3
 80075e6:	401a      	ands	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a1a      	ldr	r2, [r3, #32]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 031f 	and.w	r3, r3, #31
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	fa01 f303 	lsl.w	r3, r1, r3
 80075fc:	431a      	orrs	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	621a      	str	r2, [r3, #32]
}
 8007602:	bf00      	nop
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
	...

08007610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007624:	2302      	movs	r3, #2
 8007626:	e05a      	b.n	80076de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2202      	movs	r2, #2
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a21      	ldr	r2, [pc, #132]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d022      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007674:	d01d      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1d      	ldr	r2, [pc, #116]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d018      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1b      	ldr	r2, [pc, #108]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d013      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1a      	ldr	r2, [pc, #104]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a18      	ldr	r2, [pc, #96]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d009      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a17      	ldr	r2, [pc, #92]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a15      	ldr	r2, [pc, #84]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d10c      	bne.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	40010400 	.word	0x40010400
 8007700:	40014000 	.word	0x40014000
 8007704:	40001800 	.word	0x40001800

08007708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e03f      	b.n	80077c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fb fcc8 	bl	80030ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2224      	movs	r2, #36	; 0x24
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fddb 	bl	8008330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	691a      	ldr	r2, [r3, #16]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	695a      	ldr	r2, [r3, #20]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b08a      	sub	sp, #40	; 0x28
 80077ce:	af02      	add	r7, sp, #8
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	603b      	str	r3, [r7, #0]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d17c      	bne.n	80078e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <HAL_UART_Transmit+0x2c>
 80077f0:	88fb      	ldrh	r3, [r7, #6]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e075      	b.n	80078e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_UART_Transmit+0x3e>
 8007804:	2302      	movs	r3, #2
 8007806:	e06e      	b.n	80078e6 <HAL_UART_Transmit+0x11c>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2221      	movs	r2, #33	; 0x21
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800781e:	f7fb fd69 	bl	80032f4 <HAL_GetTick>
 8007822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	88fa      	ldrh	r2, [r7, #6]
 8007828:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007838:	d108      	bne.n	800784c <HAL_UART_Transmit+0x82>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d104      	bne.n	800784c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007842:	2300      	movs	r3, #0
 8007844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	61bb      	str	r3, [r7, #24]
 800784a:	e003      	b.n	8007854 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800785c:	e02a      	b.n	80078b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2200      	movs	r2, #0
 8007866:	2180      	movs	r1, #128	; 0x80
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 fb1f 	bl	8007eac <UART_WaitOnFlagUntilTimeout>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e036      	b.n	80078e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10b      	bne.n	8007896 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800788c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	3302      	adds	r3, #2
 8007892:	61bb      	str	r3, [r7, #24]
 8007894:	e007      	b.n	80078a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	781a      	ldrb	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	3301      	adds	r3, #1
 80078a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1cf      	bne.n	800785e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2200      	movs	r2, #0
 80078c6:	2140      	movs	r1, #64	; 0x40
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 faef 	bl	8007eac <UART_WaitOnFlagUntilTimeout>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e006      	b.n	80078e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	e000      	b.n	80078e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80078e4:	2302      	movs	r3, #2
  }
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3720      	adds	r7, #32
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	4613      	mov	r3, r2
 80078fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b20      	cmp	r3, #32
 8007906:	d11d      	bne.n	8007944 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <HAL_UART_Receive_IT+0x26>
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e016      	b.n	8007946 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <HAL_UART_Receive_IT+0x38>
 8007922:	2302      	movs	r3, #2
 8007924:	e00f      	b.n	8007946 <HAL_UART_Receive_IT+0x58>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007934:	88fb      	ldrh	r3, [r7, #6]
 8007936:	461a      	mov	r2, r3
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 fb24 	bl	8007f88 <UART_Start_Receive_IT>
 8007940:	4603      	mov	r3, r0
 8007942:	e000      	b.n	8007946 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007944:	2302      	movs	r3, #2
  }
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b0ba      	sub	sp, #232	; 0xe8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007976:	2300      	movs	r3, #0
 8007978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800797c:	2300      	movs	r3, #0
 800797e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800798e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10f      	bne.n	80079b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d009      	beq.n	80079b6 <HAL_UART_IRQHandler+0x66>
 80079a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fc03 	bl	80081ba <UART_Receive_IT>
      return;
 80079b4:	e256      	b.n	8007e64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 80de 	beq.w	8007b7c <HAL_UART_IRQHandler+0x22c>
 80079c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d106      	bne.n	80079da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 80d1 	beq.w	8007b7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00b      	beq.n	80079fe <HAL_UART_IRQHandler+0xae>
 80079e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	f043 0201 	orr.w	r2, r3, #1
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00b      	beq.n	8007a22 <HAL_UART_IRQHandler+0xd2>
 8007a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d005      	beq.n	8007a22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f043 0202 	orr.w	r2, r3, #2
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <HAL_UART_IRQHandler+0xf6>
 8007a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	f043 0204 	orr.w	r2, r3, #4
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d011      	beq.n	8007a76 <HAL_UART_IRQHandler+0x126>
 8007a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d105      	bne.n	8007a6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d005      	beq.n	8007a76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	f043 0208 	orr.w	r2, r3, #8
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 81ed 	beq.w	8007e5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a84:	f003 0320 	and.w	r3, r3, #32
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <HAL_UART_IRQHandler+0x14e>
 8007a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fb8e 	bl	80081ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa8:	2b40      	cmp	r3, #64	; 0x40
 8007aaa:	bf0c      	ite	eq
 8007aac:	2301      	moveq	r3, #1
 8007aae:	2300      	movne	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <HAL_UART_IRQHandler+0x17a>
 8007ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d04f      	beq.n	8007b6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa96 	bl	8007ffc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ada:	2b40      	cmp	r3, #64	; 0x40
 8007adc:	d141      	bne.n	8007b62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3314      	adds	r3, #20
 8007ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3314      	adds	r3, #20
 8007b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1d9      	bne.n	8007ade <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d013      	beq.n	8007b5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	4a7d      	ldr	r2, [pc, #500]	; (8007d2c <HAL_UART_IRQHandler+0x3dc>)
 8007b38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fc faa2 	bl	8004088 <HAL_DMA_Abort_IT>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d016      	beq.n	8007b78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	e00e      	b.n	8007b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f990 	bl	8007e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	e00a      	b.n	8007b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f98c 	bl	8007e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b68:	e006      	b.n	8007b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f988 	bl	8007e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b76:	e170      	b.n	8007e5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b78:	bf00      	nop
    return;
 8007b7a:	e16e      	b.n	8007e5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	f040 814a 	bne.w	8007e1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f003 0310 	and.w	r3, r3, #16
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 8143 	beq.w	8007e1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 813c 	beq.w	8007e1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60bb      	str	r3, [r7, #8]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	60bb      	str	r3, [r7, #8]
 8007bb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc2:	2b40      	cmp	r3, #64	; 0x40
 8007bc4:	f040 80b4 	bne.w	8007d30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8140 	beq.w	8007e5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007be6:	429a      	cmp	r2, r3
 8007be8:	f080 8139 	bcs.w	8007e5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bfe:	f000 8088 	beq.w	8007d12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	330c      	adds	r3, #12
 8007c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	330c      	adds	r3, #12
 8007c2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1d9      	bne.n	8007c02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3314      	adds	r3, #20
 8007c54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3314      	adds	r3, #20
 8007c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e1      	bne.n	8007c4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3314      	adds	r3, #20
 8007c90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e3      	bne.n	8007c8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	330c      	adds	r3, #12
 8007cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cda:	e853 3f00 	ldrex	r3, [r3]
 8007cde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ce2:	f023 0310 	bic.w	r3, r3, #16
 8007ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	330c      	adds	r3, #12
 8007cf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007cf4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cf6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e3      	bne.n	8007cd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fc f94b 	bl	8003fa8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f8b6 	bl	8007e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d28:	e099      	b.n	8007e5e <HAL_UART_IRQHandler+0x50e>
 8007d2a:	bf00      	nop
 8007d2c:	080080c3 	.word	0x080080c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 808b 	beq.w	8007e62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 8086 	beq.w	8007e62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	330c      	adds	r3, #12
 8007d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	330c      	adds	r3, #12
 8007d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d7a:	647a      	str	r2, [r7, #68]	; 0x44
 8007d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e3      	bne.n	8007d56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3314      	adds	r3, #20
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	f023 0301 	bic.w	r3, r3, #1
 8007da4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3314      	adds	r3, #20
 8007dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007db2:	633a      	str	r2, [r7, #48]	; 0x30
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e3      	bne.n	8007d8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	330c      	adds	r3, #12
 8007dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0310 	bic.w	r3, r3, #16
 8007dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	330c      	adds	r3, #12
 8007df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007df8:	61fa      	str	r2, [r7, #28]
 8007dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfc:	69b9      	ldr	r1, [r7, #24]
 8007dfe:	69fa      	ldr	r2, [r7, #28]
 8007e00:	e841 2300 	strex	r3, r2, [r1]
 8007e04:	617b      	str	r3, [r7, #20]
   return(result);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e3      	bne.n	8007dd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f83e 	bl	8007e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e18:	e023      	b.n	8007e62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <HAL_UART_IRQHandler+0x4ea>
 8007e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f959 	bl	80080ea <UART_Transmit_IT>
    return;
 8007e38:	e014      	b.n	8007e64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00e      	beq.n	8007e64 <HAL_UART_IRQHandler+0x514>
 8007e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d008      	beq.n	8007e64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f999 	bl	800818a <UART_EndTransmit_IT>
    return;
 8007e58:	e004      	b.n	8007e64 <HAL_UART_IRQHandler+0x514>
    return;
 8007e5a:	bf00      	nop
 8007e5c:	e002      	b.n	8007e64 <HAL_UART_IRQHandler+0x514>
      return;
 8007e5e:	bf00      	nop
 8007e60:	e000      	b.n	8007e64 <HAL_UART_IRQHandler+0x514>
      return;
 8007e62:	bf00      	nop
  }
}
 8007e64:	37e8      	adds	r7, #232	; 0xe8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop

08007e6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b090      	sub	sp, #64	; 0x40
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	603b      	str	r3, [r7, #0]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ebc:	e050      	b.n	8007f60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec4:	d04c      	beq.n	8007f60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <UART_WaitOnFlagUntilTimeout+0x30>
 8007ecc:	f7fb fa12 	bl	80032f4 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d241      	bcs.n	8007f60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	330c      	adds	r3, #12
 8007efa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007efc:	637a      	str	r2, [r7, #52]	; 0x34
 8007efe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e5      	bne.n	8007edc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3314      	adds	r3, #20
 8007f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f023 0301 	bic.w	r3, r3, #1
 8007f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3314      	adds	r3, #20
 8007f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f30:	623a      	str	r2, [r7, #32]
 8007f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f34:	69f9      	ldr	r1, [r7, #28]
 8007f36:	6a3a      	ldr	r2, [r7, #32]
 8007f38:	e841 2300 	strex	r3, r2, [r1]
 8007f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e5      	bne.n	8007f10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2220      	movs	r2, #32
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e00f      	b.n	8007f80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	bf0c      	ite	eq
 8007f70:	2301      	moveq	r3, #1
 8007f72:	2300      	movne	r3, #0
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	461a      	mov	r2, r3
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d09f      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3740      	adds	r7, #64	; 0x40
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	88fa      	ldrh	r2, [r7, #6]
 8007fa0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	88fa      	ldrh	r2, [r7, #6]
 8007fa6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2222      	movs	r2, #34	; 0x22
 8007fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68da      	ldr	r2, [r3, #12]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fcc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	695a      	ldr	r2, [r3, #20]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f042 0201 	orr.w	r2, r2, #1
 8007fdc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f042 0220 	orr.w	r2, r2, #32
 8007fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b095      	sub	sp, #84	; 0x54
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	330c      	adds	r3, #12
 800800a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800801a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	330c      	adds	r3, #12
 8008022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008024:	643a      	str	r2, [r7, #64]	; 0x40
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800802a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e5      	bne.n	8008004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3314      	adds	r3, #20
 800803e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	61fb      	str	r3, [r7, #28]
   return(result);
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	f023 0301 	bic.w	r3, r3, #1
 800804e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3314      	adds	r3, #20
 8008056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008058:	62fa      	str	r2, [r7, #44]	; 0x2c
 800805a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800805e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e5      	bne.n	8008038 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008070:	2b01      	cmp	r3, #1
 8008072:	d119      	bne.n	80080a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	330c      	adds	r3, #12
 800807a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	60bb      	str	r3, [r7, #8]
   return(result);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f023 0310 	bic.w	r3, r3, #16
 800808a:	647b      	str	r3, [r7, #68]	; 0x44
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	330c      	adds	r3, #12
 8008092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008094:	61ba      	str	r2, [r7, #24]
 8008096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6979      	ldr	r1, [r7, #20]
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	613b      	str	r3, [r7, #16]
   return(result);
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e5      	bne.n	8008074 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2220      	movs	r2, #32
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80080b6:	bf00      	nop
 80080b8:	3754      	adds	r7, #84	; 0x54
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7ff fecf 	bl	8007e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e2:	bf00      	nop
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b21      	cmp	r3, #33	; 0x21
 80080fc:	d13e      	bne.n	800817c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008106:	d114      	bne.n	8008132 <UART_Transmit_IT+0x48>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d110      	bne.n	8008132 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008124:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	1c9a      	adds	r2, r3, #2
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	621a      	str	r2, [r3, #32]
 8008130:	e008      	b.n	8008144 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	1c59      	adds	r1, r3, #1
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6211      	str	r1, [r2, #32]
 800813c:	781a      	ldrb	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008148:	b29b      	uxth	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	b29b      	uxth	r3, r3
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	4619      	mov	r1, r3
 8008152:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10f      	bne.n	8008178 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008166:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008176:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	e000      	b.n	800817e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800817c:	2302      	movs	r3, #2
  }
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7ff fe5e 	bl	8007e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b08c      	sub	sp, #48	; 0x30
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b22      	cmp	r3, #34	; 0x22
 80081cc:	f040 80ab 	bne.w	8008326 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d8:	d117      	bne.n	800820a <UART_Receive_IT+0x50>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d113      	bne.n	800820a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008202:	1c9a      	adds	r2, r3, #2
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	629a      	str	r2, [r3, #40]	; 0x28
 8008208:	e026      	b.n	8008258 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008210:	2300      	movs	r3, #0
 8008212:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800821c:	d007      	beq.n	800822e <UART_Receive_IT+0x74>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <UART_Receive_IT+0x82>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	b2da      	uxtb	r2, r3
 8008236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	e008      	b.n	800824e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008248:	b2da      	uxtb	r2, r3
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29b      	uxth	r3, r3
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	4619      	mov	r1, r3
 8008266:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008268:	2b00      	cmp	r3, #0
 800826a:	d15a      	bne.n	8008322 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0220 	bic.w	r2, r2, #32
 800827a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800828a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695a      	ldr	r2, [r3, #20]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0201 	bic.w	r2, r2, #1
 800829a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d135      	bne.n	8008318 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	330c      	adds	r3, #12
 80082b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	613b      	str	r3, [r7, #16]
   return(result);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f023 0310 	bic.w	r3, r3, #16
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	330c      	adds	r3, #12
 80082d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d2:	623a      	str	r2, [r7, #32]
 80082d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	69f9      	ldr	r1, [r7, #28]
 80082d8:	6a3a      	ldr	r2, [r7, #32]
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	61bb      	str	r3, [r7, #24]
   return(result);
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e5      	bne.n	80082b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0310 	and.w	r3, r3, #16
 80082f0:	2b10      	cmp	r3, #16
 80082f2:	d10a      	bne.n	800830a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082f4:	2300      	movs	r3, #0
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7ff fdbf 	bl	8007e94 <HAL_UARTEx_RxEventCallback>
 8008316:	e002      	b.n	800831e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7fa fea3 	bl	8003064 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	e002      	b.n	8008328 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	e000      	b.n	8008328 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008326:	2302      	movs	r3, #2
  }
}
 8008328:	4618      	mov	r0, r3
 800832a:	3730      	adds	r7, #48	; 0x30
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	b09f      	sub	sp, #124	; 0x7c
 8008336:	af00      	add	r7, sp, #0
 8008338:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800833a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008346:	68d9      	ldr	r1, [r3, #12]
 8008348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	ea40 0301 	orr.w	r3, r0, r1
 8008350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	431a      	orrs	r2, r3
 800835c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	431a      	orrs	r2, r3
 8008362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	4313      	orrs	r3, r2
 8008368:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800836a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008374:	f021 010c 	bic.w	r1, r1, #12
 8008378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800837e:	430b      	orrs	r3, r1
 8008380:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800838c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838e:	6999      	ldr	r1, [r3, #24]
 8008390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	ea40 0301 	orr.w	r3, r0, r1
 8008398:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800839a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	4bc5      	ldr	r3, [pc, #788]	; (80086b4 <UART_SetConfig+0x384>)
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d004      	beq.n	80083ae <UART_SetConfig+0x7e>
 80083a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	4bc3      	ldr	r3, [pc, #780]	; (80086b8 <UART_SetConfig+0x388>)
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d103      	bne.n	80083b6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083ae:	f7fd fb83 	bl	8005ab8 <HAL_RCC_GetPCLK2Freq>
 80083b2:	6778      	str	r0, [r7, #116]	; 0x74
 80083b4:	e002      	b.n	80083bc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083b6:	f7fd fb6b 	bl	8005a90 <HAL_RCC_GetPCLK1Freq>
 80083ba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c4:	f040 80b6 	bne.w	8008534 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083ca:	461c      	mov	r4, r3
 80083cc:	f04f 0500 	mov.w	r5, #0
 80083d0:	4622      	mov	r2, r4
 80083d2:	462b      	mov	r3, r5
 80083d4:	1891      	adds	r1, r2, r2
 80083d6:	6439      	str	r1, [r7, #64]	; 0x40
 80083d8:	415b      	adcs	r3, r3
 80083da:	647b      	str	r3, [r7, #68]	; 0x44
 80083dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083e0:	1912      	adds	r2, r2, r4
 80083e2:	eb45 0303 	adc.w	r3, r5, r3
 80083e6:	f04f 0000 	mov.w	r0, #0
 80083ea:	f04f 0100 	mov.w	r1, #0
 80083ee:	00d9      	lsls	r1, r3, #3
 80083f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083f4:	00d0      	lsls	r0, r2, #3
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	1911      	adds	r1, r2, r4
 80083fc:	6639      	str	r1, [r7, #96]	; 0x60
 80083fe:	416b      	adcs	r3, r5
 8008400:	667b      	str	r3, [r7, #100]	; 0x64
 8008402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	461a      	mov	r2, r3
 8008408:	f04f 0300 	mov.w	r3, #0
 800840c:	1891      	adds	r1, r2, r2
 800840e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008410:	415b      	adcs	r3, r3
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008418:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800841c:	f7f8 fb46 	bl	8000aac <__aeabi_uldivmod>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4ba5      	ldr	r3, [pc, #660]	; (80086bc <UART_SetConfig+0x38c>)
 8008426:	fba3 2302 	umull	r2, r3, r3, r2
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	011e      	lsls	r6, r3, #4
 800842e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008430:	461c      	mov	r4, r3
 8008432:	f04f 0500 	mov.w	r5, #0
 8008436:	4622      	mov	r2, r4
 8008438:	462b      	mov	r3, r5
 800843a:	1891      	adds	r1, r2, r2
 800843c:	6339      	str	r1, [r7, #48]	; 0x30
 800843e:	415b      	adcs	r3, r3
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
 8008442:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008446:	1912      	adds	r2, r2, r4
 8008448:	eb45 0303 	adc.w	r3, r5, r3
 800844c:	f04f 0000 	mov.w	r0, #0
 8008450:	f04f 0100 	mov.w	r1, #0
 8008454:	00d9      	lsls	r1, r3, #3
 8008456:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800845a:	00d0      	lsls	r0, r2, #3
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	1911      	adds	r1, r2, r4
 8008462:	65b9      	str	r1, [r7, #88]	; 0x58
 8008464:	416b      	adcs	r3, r5
 8008466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	461a      	mov	r2, r3
 800846e:	f04f 0300 	mov.w	r3, #0
 8008472:	1891      	adds	r1, r2, r2
 8008474:	62b9      	str	r1, [r7, #40]	; 0x28
 8008476:	415b      	adcs	r3, r3
 8008478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800847a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800847e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008482:	f7f8 fb13 	bl	8000aac <__aeabi_uldivmod>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4b8c      	ldr	r3, [pc, #560]	; (80086bc <UART_SetConfig+0x38c>)
 800848c:	fba3 1302 	umull	r1, r3, r3, r2
 8008490:	095b      	lsrs	r3, r3, #5
 8008492:	2164      	movs	r1, #100	; 0x64
 8008494:	fb01 f303 	mul.w	r3, r1, r3
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	3332      	adds	r3, #50	; 0x32
 800849e:	4a87      	ldr	r2, [pc, #540]	; (80086bc <UART_SetConfig+0x38c>)
 80084a0:	fba2 2303 	umull	r2, r3, r2, r3
 80084a4:	095b      	lsrs	r3, r3, #5
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084ac:	441e      	add	r6, r3
 80084ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084b0:	4618      	mov	r0, r3
 80084b2:	f04f 0100 	mov.w	r1, #0
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	1894      	adds	r4, r2, r2
 80084bc:	623c      	str	r4, [r7, #32]
 80084be:	415b      	adcs	r3, r3
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
 80084c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084c6:	1812      	adds	r2, r2, r0
 80084c8:	eb41 0303 	adc.w	r3, r1, r3
 80084cc:	f04f 0400 	mov.w	r4, #0
 80084d0:	f04f 0500 	mov.w	r5, #0
 80084d4:	00dd      	lsls	r5, r3, #3
 80084d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084da:	00d4      	lsls	r4, r2, #3
 80084dc:	4622      	mov	r2, r4
 80084de:	462b      	mov	r3, r5
 80084e0:	1814      	adds	r4, r2, r0
 80084e2:	653c      	str	r4, [r7, #80]	; 0x50
 80084e4:	414b      	adcs	r3, r1
 80084e6:	657b      	str	r3, [r7, #84]	; 0x54
 80084e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	461a      	mov	r2, r3
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	1891      	adds	r1, r2, r2
 80084f4:	61b9      	str	r1, [r7, #24]
 80084f6:	415b      	adcs	r3, r3
 80084f8:	61fb      	str	r3, [r7, #28]
 80084fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008502:	f7f8 fad3 	bl	8000aac <__aeabi_uldivmod>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4b6c      	ldr	r3, [pc, #432]	; (80086bc <UART_SetConfig+0x38c>)
 800850c:	fba3 1302 	umull	r1, r3, r3, r2
 8008510:	095b      	lsrs	r3, r3, #5
 8008512:	2164      	movs	r1, #100	; 0x64
 8008514:	fb01 f303 	mul.w	r3, r1, r3
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	00db      	lsls	r3, r3, #3
 800851c:	3332      	adds	r3, #50	; 0x32
 800851e:	4a67      	ldr	r2, [pc, #412]	; (80086bc <UART_SetConfig+0x38c>)
 8008520:	fba2 2303 	umull	r2, r3, r2, r3
 8008524:	095b      	lsrs	r3, r3, #5
 8008526:	f003 0207 	and.w	r2, r3, #7
 800852a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4432      	add	r2, r6
 8008530:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008532:	e0b9      	b.n	80086a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008536:	461c      	mov	r4, r3
 8008538:	f04f 0500 	mov.w	r5, #0
 800853c:	4622      	mov	r2, r4
 800853e:	462b      	mov	r3, r5
 8008540:	1891      	adds	r1, r2, r2
 8008542:	6139      	str	r1, [r7, #16]
 8008544:	415b      	adcs	r3, r3
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800854c:	1912      	adds	r2, r2, r4
 800854e:	eb45 0303 	adc.w	r3, r5, r3
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f04f 0100 	mov.w	r1, #0
 800855a:	00d9      	lsls	r1, r3, #3
 800855c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008560:	00d0      	lsls	r0, r2, #3
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	eb12 0804 	adds.w	r8, r2, r4
 800856a:	eb43 0905 	adc.w	r9, r3, r5
 800856e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	4618      	mov	r0, r3
 8008574:	f04f 0100 	mov.w	r1, #0
 8008578:	f04f 0200 	mov.w	r2, #0
 800857c:	f04f 0300 	mov.w	r3, #0
 8008580:	008b      	lsls	r3, r1, #2
 8008582:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008586:	0082      	lsls	r2, r0, #2
 8008588:	4640      	mov	r0, r8
 800858a:	4649      	mov	r1, r9
 800858c:	f7f8 fa8e 	bl	8000aac <__aeabi_uldivmod>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4b49      	ldr	r3, [pc, #292]	; (80086bc <UART_SetConfig+0x38c>)
 8008596:	fba3 2302 	umull	r2, r3, r3, r2
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	011e      	lsls	r6, r3, #4
 800859e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085a0:	4618      	mov	r0, r3
 80085a2:	f04f 0100 	mov.w	r1, #0
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	1894      	adds	r4, r2, r2
 80085ac:	60bc      	str	r4, [r7, #8]
 80085ae:	415b      	adcs	r3, r3
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085b6:	1812      	adds	r2, r2, r0
 80085b8:	eb41 0303 	adc.w	r3, r1, r3
 80085bc:	f04f 0400 	mov.w	r4, #0
 80085c0:	f04f 0500 	mov.w	r5, #0
 80085c4:	00dd      	lsls	r5, r3, #3
 80085c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085ca:	00d4      	lsls	r4, r2, #3
 80085cc:	4622      	mov	r2, r4
 80085ce:	462b      	mov	r3, r5
 80085d0:	1814      	adds	r4, r2, r0
 80085d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80085d4:	414b      	adcs	r3, r1
 80085d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	4618      	mov	r0, r3
 80085de:	f04f 0100 	mov.w	r1, #0
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	008b      	lsls	r3, r1, #2
 80085ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085f0:	0082      	lsls	r2, r0, #2
 80085f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085f6:	f7f8 fa59 	bl	8000aac <__aeabi_uldivmod>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4b2f      	ldr	r3, [pc, #188]	; (80086bc <UART_SetConfig+0x38c>)
 8008600:	fba3 1302 	umull	r1, r3, r3, r2
 8008604:	095b      	lsrs	r3, r3, #5
 8008606:	2164      	movs	r1, #100	; 0x64
 8008608:	fb01 f303 	mul.w	r3, r1, r3
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	3332      	adds	r3, #50	; 0x32
 8008612:	4a2a      	ldr	r2, [pc, #168]	; (80086bc <UART_SetConfig+0x38c>)
 8008614:	fba2 2303 	umull	r2, r3, r2, r3
 8008618:	095b      	lsrs	r3, r3, #5
 800861a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800861e:	441e      	add	r6, r3
 8008620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008622:	4618      	mov	r0, r3
 8008624:	f04f 0100 	mov.w	r1, #0
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	1894      	adds	r4, r2, r2
 800862e:	603c      	str	r4, [r7, #0]
 8008630:	415b      	adcs	r3, r3
 8008632:	607b      	str	r3, [r7, #4]
 8008634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008638:	1812      	adds	r2, r2, r0
 800863a:	eb41 0303 	adc.w	r3, r1, r3
 800863e:	f04f 0400 	mov.w	r4, #0
 8008642:	f04f 0500 	mov.w	r5, #0
 8008646:	00dd      	lsls	r5, r3, #3
 8008648:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800864c:	00d4      	lsls	r4, r2, #3
 800864e:	4622      	mov	r2, r4
 8008650:	462b      	mov	r3, r5
 8008652:	eb12 0a00 	adds.w	sl, r2, r0
 8008656:	eb43 0b01 	adc.w	fp, r3, r1
 800865a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	4618      	mov	r0, r3
 8008660:	f04f 0100 	mov.w	r1, #0
 8008664:	f04f 0200 	mov.w	r2, #0
 8008668:	f04f 0300 	mov.w	r3, #0
 800866c:	008b      	lsls	r3, r1, #2
 800866e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008672:	0082      	lsls	r2, r0, #2
 8008674:	4650      	mov	r0, sl
 8008676:	4659      	mov	r1, fp
 8008678:	f7f8 fa18 	bl	8000aac <__aeabi_uldivmod>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <UART_SetConfig+0x38c>)
 8008682:	fba3 1302 	umull	r1, r3, r3, r2
 8008686:	095b      	lsrs	r3, r3, #5
 8008688:	2164      	movs	r1, #100	; 0x64
 800868a:	fb01 f303 	mul.w	r3, r1, r3
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	3332      	adds	r3, #50	; 0x32
 8008694:	4a09      	ldr	r2, [pc, #36]	; (80086bc <UART_SetConfig+0x38c>)
 8008696:	fba2 2303 	umull	r2, r3, r2, r3
 800869a:	095b      	lsrs	r3, r3, #5
 800869c:	f003 020f 	and.w	r2, r3, #15
 80086a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4432      	add	r2, r6
 80086a6:	609a      	str	r2, [r3, #8]
}
 80086a8:	bf00      	nop
 80086aa:	377c      	adds	r7, #124	; 0x7c
 80086ac:	46bd      	mov	sp, r7
 80086ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b2:	bf00      	nop
 80086b4:	40011000 	.word	0x40011000
 80086b8:	40011400 	.word	0x40011400
 80086bc:	51eb851f 	.word	0x51eb851f

080086c0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	4b20      	ldr	r3, [pc, #128]	; (8008760 <FSMC_NORSRAM_Init+0xa0>)
 80086de:	4013      	ands	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80086ea:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80086f0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80086f6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80086fc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8008702:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008708:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800870e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008714:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800871a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008720:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8008726:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800872c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	2b08      	cmp	r3, #8
 800873a:	d103      	bne.n	8008744 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008742:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	fff00080 	.word	0xfff00080

08008764 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008786:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008792:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800879a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80087a2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80087ac:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	3b02      	subs	r3, #2
 80087b4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80087b6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80087bc:	4313      	orrs	r3, r2
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6979      	ldr	r1, [r7, #20]
 80087cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
	...

080087e0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087f8:	d122      	bne.n	8008840 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008802:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	4b15      	ldr	r3, [pc, #84]	; (800885c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008808:	4013      	ands	r3, r2
 800880a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008816:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800881e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008826:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800882c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4313      	orrs	r3, r2
 8008832:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6979      	ldr	r1, [r7, #20]
 800883a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800883e:	e005      	b.n	800884c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	371c      	adds	r7, #28
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	cff00000 	.word	0xcff00000

08008860 <__errno>:
 8008860:	4b01      	ldr	r3, [pc, #4]	; (8008868 <__errno+0x8>)
 8008862:	6818      	ldr	r0, [r3, #0]
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	2000001c 	.word	0x2000001c

0800886c <__libc_init_array>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	4d0d      	ldr	r5, [pc, #52]	; (80088a4 <__libc_init_array+0x38>)
 8008870:	4c0d      	ldr	r4, [pc, #52]	; (80088a8 <__libc_init_array+0x3c>)
 8008872:	1b64      	subs	r4, r4, r5
 8008874:	10a4      	asrs	r4, r4, #2
 8008876:	2600      	movs	r6, #0
 8008878:	42a6      	cmp	r6, r4
 800887a:	d109      	bne.n	8008890 <__libc_init_array+0x24>
 800887c:	4d0b      	ldr	r5, [pc, #44]	; (80088ac <__libc_init_array+0x40>)
 800887e:	4c0c      	ldr	r4, [pc, #48]	; (80088b0 <__libc_init_array+0x44>)
 8008880:	f000 fc4e 	bl	8009120 <_init>
 8008884:	1b64      	subs	r4, r4, r5
 8008886:	10a4      	asrs	r4, r4, #2
 8008888:	2600      	movs	r6, #0
 800888a:	42a6      	cmp	r6, r4
 800888c:	d105      	bne.n	800889a <__libc_init_array+0x2e>
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	f855 3b04 	ldr.w	r3, [r5], #4
 8008894:	4798      	blx	r3
 8008896:	3601      	adds	r6, #1
 8008898:	e7ee      	b.n	8008878 <__libc_init_array+0xc>
 800889a:	f855 3b04 	ldr.w	r3, [r5], #4
 800889e:	4798      	blx	r3
 80088a0:	3601      	adds	r6, #1
 80088a2:	e7f2      	b.n	800888a <__libc_init_array+0x1e>
 80088a4:	0800c190 	.word	0x0800c190
 80088a8:	0800c190 	.word	0x0800c190
 80088ac:	0800c190 	.word	0x0800c190
 80088b0:	0800c194 	.word	0x0800c194

080088b4 <memset>:
 80088b4:	4402      	add	r2, r0
 80088b6:	4603      	mov	r3, r0
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d100      	bne.n	80088be <memset+0xa>
 80088bc:	4770      	bx	lr
 80088be:	f803 1b01 	strb.w	r1, [r3], #1
 80088c2:	e7f9      	b.n	80088b8 <memset+0x4>

080088c4 <siprintf>:
 80088c4:	b40e      	push	{r1, r2, r3}
 80088c6:	b500      	push	{lr}
 80088c8:	b09c      	sub	sp, #112	; 0x70
 80088ca:	ab1d      	add	r3, sp, #116	; 0x74
 80088cc:	9002      	str	r0, [sp, #8]
 80088ce:	9006      	str	r0, [sp, #24]
 80088d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088d4:	4809      	ldr	r0, [pc, #36]	; (80088fc <siprintf+0x38>)
 80088d6:	9107      	str	r1, [sp, #28]
 80088d8:	9104      	str	r1, [sp, #16]
 80088da:	4909      	ldr	r1, [pc, #36]	; (8008900 <siprintf+0x3c>)
 80088dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e0:	9105      	str	r1, [sp, #20]
 80088e2:	6800      	ldr	r0, [r0, #0]
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	a902      	add	r1, sp, #8
 80088e8:	f000 f868 	bl	80089bc <_svfiprintf_r>
 80088ec:	9b02      	ldr	r3, [sp, #8]
 80088ee:	2200      	movs	r2, #0
 80088f0:	701a      	strb	r2, [r3, #0]
 80088f2:	b01c      	add	sp, #112	; 0x70
 80088f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088f8:	b003      	add	sp, #12
 80088fa:	4770      	bx	lr
 80088fc:	2000001c 	.word	0x2000001c
 8008900:	ffff0208 	.word	0xffff0208

08008904 <__ssputs_r>:
 8008904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008908:	688e      	ldr	r6, [r1, #8]
 800890a:	429e      	cmp	r6, r3
 800890c:	4682      	mov	sl, r0
 800890e:	460c      	mov	r4, r1
 8008910:	4690      	mov	r8, r2
 8008912:	461f      	mov	r7, r3
 8008914:	d838      	bhi.n	8008988 <__ssputs_r+0x84>
 8008916:	898a      	ldrh	r2, [r1, #12]
 8008918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800891c:	d032      	beq.n	8008984 <__ssputs_r+0x80>
 800891e:	6825      	ldr	r5, [r4, #0]
 8008920:	6909      	ldr	r1, [r1, #16]
 8008922:	eba5 0901 	sub.w	r9, r5, r1
 8008926:	6965      	ldr	r5, [r4, #20]
 8008928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800892c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008930:	3301      	adds	r3, #1
 8008932:	444b      	add	r3, r9
 8008934:	106d      	asrs	r5, r5, #1
 8008936:	429d      	cmp	r5, r3
 8008938:	bf38      	it	cc
 800893a:	461d      	movcc	r5, r3
 800893c:	0553      	lsls	r3, r2, #21
 800893e:	d531      	bpl.n	80089a4 <__ssputs_r+0xa0>
 8008940:	4629      	mov	r1, r5
 8008942:	f000 fb47 	bl	8008fd4 <_malloc_r>
 8008946:	4606      	mov	r6, r0
 8008948:	b950      	cbnz	r0, 8008960 <__ssputs_r+0x5c>
 800894a:	230c      	movs	r3, #12
 800894c:	f8ca 3000 	str.w	r3, [sl]
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008960:	6921      	ldr	r1, [r4, #16]
 8008962:	464a      	mov	r2, r9
 8008964:	f000 fabe 	bl	8008ee4 <memcpy>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800896e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	6126      	str	r6, [r4, #16]
 8008976:	6165      	str	r5, [r4, #20]
 8008978:	444e      	add	r6, r9
 800897a:	eba5 0509 	sub.w	r5, r5, r9
 800897e:	6026      	str	r6, [r4, #0]
 8008980:	60a5      	str	r5, [r4, #8]
 8008982:	463e      	mov	r6, r7
 8008984:	42be      	cmp	r6, r7
 8008986:	d900      	bls.n	800898a <__ssputs_r+0x86>
 8008988:	463e      	mov	r6, r7
 800898a:	4632      	mov	r2, r6
 800898c:	6820      	ldr	r0, [r4, #0]
 800898e:	4641      	mov	r1, r8
 8008990:	f000 fab6 	bl	8008f00 <memmove>
 8008994:	68a3      	ldr	r3, [r4, #8]
 8008996:	6822      	ldr	r2, [r4, #0]
 8008998:	1b9b      	subs	r3, r3, r6
 800899a:	4432      	add	r2, r6
 800899c:	60a3      	str	r3, [r4, #8]
 800899e:	6022      	str	r2, [r4, #0]
 80089a0:	2000      	movs	r0, #0
 80089a2:	e7db      	b.n	800895c <__ssputs_r+0x58>
 80089a4:	462a      	mov	r2, r5
 80089a6:	f000 fb6f 	bl	8009088 <_realloc_r>
 80089aa:	4606      	mov	r6, r0
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d1e1      	bne.n	8008974 <__ssputs_r+0x70>
 80089b0:	6921      	ldr	r1, [r4, #16]
 80089b2:	4650      	mov	r0, sl
 80089b4:	f000 fabe 	bl	8008f34 <_free_r>
 80089b8:	e7c7      	b.n	800894a <__ssputs_r+0x46>
	...

080089bc <_svfiprintf_r>:
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	4698      	mov	r8, r3
 80089c2:	898b      	ldrh	r3, [r1, #12]
 80089c4:	061b      	lsls	r3, r3, #24
 80089c6:	b09d      	sub	sp, #116	; 0x74
 80089c8:	4607      	mov	r7, r0
 80089ca:	460d      	mov	r5, r1
 80089cc:	4614      	mov	r4, r2
 80089ce:	d50e      	bpl.n	80089ee <_svfiprintf_r+0x32>
 80089d0:	690b      	ldr	r3, [r1, #16]
 80089d2:	b963      	cbnz	r3, 80089ee <_svfiprintf_r+0x32>
 80089d4:	2140      	movs	r1, #64	; 0x40
 80089d6:	f000 fafd 	bl	8008fd4 <_malloc_r>
 80089da:	6028      	str	r0, [r5, #0]
 80089dc:	6128      	str	r0, [r5, #16]
 80089de:	b920      	cbnz	r0, 80089ea <_svfiprintf_r+0x2e>
 80089e0:	230c      	movs	r3, #12
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	e0d1      	b.n	8008b8e <_svfiprintf_r+0x1d2>
 80089ea:	2340      	movs	r3, #64	; 0x40
 80089ec:	616b      	str	r3, [r5, #20]
 80089ee:	2300      	movs	r3, #0
 80089f0:	9309      	str	r3, [sp, #36]	; 0x24
 80089f2:	2320      	movs	r3, #32
 80089f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80089fc:	2330      	movs	r3, #48	; 0x30
 80089fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ba8 <_svfiprintf_r+0x1ec>
 8008a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a06:	f04f 0901 	mov.w	r9, #1
 8008a0a:	4623      	mov	r3, r4
 8008a0c:	469a      	mov	sl, r3
 8008a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a12:	b10a      	cbz	r2, 8008a18 <_svfiprintf_r+0x5c>
 8008a14:	2a25      	cmp	r2, #37	; 0x25
 8008a16:	d1f9      	bne.n	8008a0c <_svfiprintf_r+0x50>
 8008a18:	ebba 0b04 	subs.w	fp, sl, r4
 8008a1c:	d00b      	beq.n	8008a36 <_svfiprintf_r+0x7a>
 8008a1e:	465b      	mov	r3, fp
 8008a20:	4622      	mov	r2, r4
 8008a22:	4629      	mov	r1, r5
 8008a24:	4638      	mov	r0, r7
 8008a26:	f7ff ff6d 	bl	8008904 <__ssputs_r>
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	f000 80aa 	beq.w	8008b84 <_svfiprintf_r+0x1c8>
 8008a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a32:	445a      	add	r2, fp
 8008a34:	9209      	str	r2, [sp, #36]	; 0x24
 8008a36:	f89a 3000 	ldrb.w	r3, [sl]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 80a2 	beq.w	8008b84 <_svfiprintf_r+0x1c8>
 8008a40:	2300      	movs	r3, #0
 8008a42:	f04f 32ff 	mov.w	r2, #4294967295
 8008a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a4a:	f10a 0a01 	add.w	sl, sl, #1
 8008a4e:	9304      	str	r3, [sp, #16]
 8008a50:	9307      	str	r3, [sp, #28]
 8008a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a56:	931a      	str	r3, [sp, #104]	; 0x68
 8008a58:	4654      	mov	r4, sl
 8008a5a:	2205      	movs	r2, #5
 8008a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a60:	4851      	ldr	r0, [pc, #324]	; (8008ba8 <_svfiprintf_r+0x1ec>)
 8008a62:	f7f7 fbb5 	bl	80001d0 <memchr>
 8008a66:	9a04      	ldr	r2, [sp, #16]
 8008a68:	b9d8      	cbnz	r0, 8008aa2 <_svfiprintf_r+0xe6>
 8008a6a:	06d0      	lsls	r0, r2, #27
 8008a6c:	bf44      	itt	mi
 8008a6e:	2320      	movmi	r3, #32
 8008a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a74:	0711      	lsls	r1, r2, #28
 8008a76:	bf44      	itt	mi
 8008a78:	232b      	movmi	r3, #43	; 0x2b
 8008a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a82:	2b2a      	cmp	r3, #42	; 0x2a
 8008a84:	d015      	beq.n	8008ab2 <_svfiprintf_r+0xf6>
 8008a86:	9a07      	ldr	r2, [sp, #28]
 8008a88:	4654      	mov	r4, sl
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	f04f 0c0a 	mov.w	ip, #10
 8008a90:	4621      	mov	r1, r4
 8008a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a96:	3b30      	subs	r3, #48	; 0x30
 8008a98:	2b09      	cmp	r3, #9
 8008a9a:	d94e      	bls.n	8008b3a <_svfiprintf_r+0x17e>
 8008a9c:	b1b0      	cbz	r0, 8008acc <_svfiprintf_r+0x110>
 8008a9e:	9207      	str	r2, [sp, #28]
 8008aa0:	e014      	b.n	8008acc <_svfiprintf_r+0x110>
 8008aa2:	eba0 0308 	sub.w	r3, r0, r8
 8008aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	9304      	str	r3, [sp, #16]
 8008aae:	46a2      	mov	sl, r4
 8008ab0:	e7d2      	b.n	8008a58 <_svfiprintf_r+0x9c>
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	1d19      	adds	r1, r3, #4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	9103      	str	r1, [sp, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bfbb      	ittet	lt
 8008abe:	425b      	neglt	r3, r3
 8008ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ac4:	9307      	strge	r3, [sp, #28]
 8008ac6:	9307      	strlt	r3, [sp, #28]
 8008ac8:	bfb8      	it	lt
 8008aca:	9204      	strlt	r2, [sp, #16]
 8008acc:	7823      	ldrb	r3, [r4, #0]
 8008ace:	2b2e      	cmp	r3, #46	; 0x2e
 8008ad0:	d10c      	bne.n	8008aec <_svfiprintf_r+0x130>
 8008ad2:	7863      	ldrb	r3, [r4, #1]
 8008ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad6:	d135      	bne.n	8008b44 <_svfiprintf_r+0x188>
 8008ad8:	9b03      	ldr	r3, [sp, #12]
 8008ada:	1d1a      	adds	r2, r3, #4
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	9203      	str	r2, [sp, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bfb8      	it	lt
 8008ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ae8:	3402      	adds	r4, #2
 8008aea:	9305      	str	r3, [sp, #20]
 8008aec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008bb8 <_svfiprintf_r+0x1fc>
 8008af0:	7821      	ldrb	r1, [r4, #0]
 8008af2:	2203      	movs	r2, #3
 8008af4:	4650      	mov	r0, sl
 8008af6:	f7f7 fb6b 	bl	80001d0 <memchr>
 8008afa:	b140      	cbz	r0, 8008b0e <_svfiprintf_r+0x152>
 8008afc:	2340      	movs	r3, #64	; 0x40
 8008afe:	eba0 000a 	sub.w	r0, r0, sl
 8008b02:	fa03 f000 	lsl.w	r0, r3, r0
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	4303      	orrs	r3, r0
 8008b0a:	3401      	adds	r4, #1
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b12:	4826      	ldr	r0, [pc, #152]	; (8008bac <_svfiprintf_r+0x1f0>)
 8008b14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b18:	2206      	movs	r2, #6
 8008b1a:	f7f7 fb59 	bl	80001d0 <memchr>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d038      	beq.n	8008b94 <_svfiprintf_r+0x1d8>
 8008b22:	4b23      	ldr	r3, [pc, #140]	; (8008bb0 <_svfiprintf_r+0x1f4>)
 8008b24:	bb1b      	cbnz	r3, 8008b6e <_svfiprintf_r+0x1b2>
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	3307      	adds	r3, #7
 8008b2a:	f023 0307 	bic.w	r3, r3, #7
 8008b2e:	3308      	adds	r3, #8
 8008b30:	9303      	str	r3, [sp, #12]
 8008b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b34:	4433      	add	r3, r6
 8008b36:	9309      	str	r3, [sp, #36]	; 0x24
 8008b38:	e767      	b.n	8008a0a <_svfiprintf_r+0x4e>
 8008b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b3e:	460c      	mov	r4, r1
 8008b40:	2001      	movs	r0, #1
 8008b42:	e7a5      	b.n	8008a90 <_svfiprintf_r+0xd4>
 8008b44:	2300      	movs	r3, #0
 8008b46:	3401      	adds	r4, #1
 8008b48:	9305      	str	r3, [sp, #20]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	f04f 0c0a 	mov.w	ip, #10
 8008b50:	4620      	mov	r0, r4
 8008b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b56:	3a30      	subs	r2, #48	; 0x30
 8008b58:	2a09      	cmp	r2, #9
 8008b5a:	d903      	bls.n	8008b64 <_svfiprintf_r+0x1a8>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d0c5      	beq.n	8008aec <_svfiprintf_r+0x130>
 8008b60:	9105      	str	r1, [sp, #20]
 8008b62:	e7c3      	b.n	8008aec <_svfiprintf_r+0x130>
 8008b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b68:	4604      	mov	r4, r0
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e7f0      	b.n	8008b50 <_svfiprintf_r+0x194>
 8008b6e:	ab03      	add	r3, sp, #12
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	462a      	mov	r2, r5
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <_svfiprintf_r+0x1f8>)
 8008b76:	a904      	add	r1, sp, #16
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f3af 8000 	nop.w
 8008b7e:	1c42      	adds	r2, r0, #1
 8008b80:	4606      	mov	r6, r0
 8008b82:	d1d6      	bne.n	8008b32 <_svfiprintf_r+0x176>
 8008b84:	89ab      	ldrh	r3, [r5, #12]
 8008b86:	065b      	lsls	r3, r3, #25
 8008b88:	f53f af2c 	bmi.w	80089e4 <_svfiprintf_r+0x28>
 8008b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b8e:	b01d      	add	sp, #116	; 0x74
 8008b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b94:	ab03      	add	r3, sp, #12
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	462a      	mov	r2, r5
 8008b9a:	4b06      	ldr	r3, [pc, #24]	; (8008bb4 <_svfiprintf_r+0x1f8>)
 8008b9c:	a904      	add	r1, sp, #16
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	f000 f87a 	bl	8008c98 <_printf_i>
 8008ba4:	e7eb      	b.n	8008b7e <_svfiprintf_r+0x1c2>
 8008ba6:	bf00      	nop
 8008ba8:	0800c154 	.word	0x0800c154
 8008bac:	0800c15e 	.word	0x0800c15e
 8008bb0:	00000000 	.word	0x00000000
 8008bb4:	08008905 	.word	0x08008905
 8008bb8:	0800c15a 	.word	0x0800c15a

08008bbc <_printf_common>:
 8008bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	4699      	mov	r9, r3
 8008bc4:	688a      	ldr	r2, [r1, #8]
 8008bc6:	690b      	ldr	r3, [r1, #16]
 8008bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	bfb8      	it	lt
 8008bd0:	4613      	movlt	r3, r2
 8008bd2:	6033      	str	r3, [r6, #0]
 8008bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bd8:	4607      	mov	r7, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	b10a      	cbz	r2, 8008be2 <_printf_common+0x26>
 8008bde:	3301      	adds	r3, #1
 8008be0:	6033      	str	r3, [r6, #0]
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	0699      	lsls	r1, r3, #26
 8008be6:	bf42      	ittt	mi
 8008be8:	6833      	ldrmi	r3, [r6, #0]
 8008bea:	3302      	addmi	r3, #2
 8008bec:	6033      	strmi	r3, [r6, #0]
 8008bee:	6825      	ldr	r5, [r4, #0]
 8008bf0:	f015 0506 	ands.w	r5, r5, #6
 8008bf4:	d106      	bne.n	8008c04 <_printf_common+0x48>
 8008bf6:	f104 0a19 	add.w	sl, r4, #25
 8008bfa:	68e3      	ldr	r3, [r4, #12]
 8008bfc:	6832      	ldr	r2, [r6, #0]
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	42ab      	cmp	r3, r5
 8008c02:	dc26      	bgt.n	8008c52 <_printf_common+0x96>
 8008c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c08:	1e13      	subs	r3, r2, #0
 8008c0a:	6822      	ldr	r2, [r4, #0]
 8008c0c:	bf18      	it	ne
 8008c0e:	2301      	movne	r3, #1
 8008c10:	0692      	lsls	r2, r2, #26
 8008c12:	d42b      	bmi.n	8008c6c <_printf_common+0xb0>
 8008c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c18:	4649      	mov	r1, r9
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	47c0      	blx	r8
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d01e      	beq.n	8008c60 <_printf_common+0xa4>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	68e5      	ldr	r5, [r4, #12]
 8008c26:	6832      	ldr	r2, [r6, #0]
 8008c28:	f003 0306 	and.w	r3, r3, #6
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	bf08      	it	eq
 8008c30:	1aad      	subeq	r5, r5, r2
 8008c32:	68a3      	ldr	r3, [r4, #8]
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	bf0c      	ite	eq
 8008c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c3c:	2500      	movne	r5, #0
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	bfc4      	itt	gt
 8008c42:	1a9b      	subgt	r3, r3, r2
 8008c44:	18ed      	addgt	r5, r5, r3
 8008c46:	2600      	movs	r6, #0
 8008c48:	341a      	adds	r4, #26
 8008c4a:	42b5      	cmp	r5, r6
 8008c4c:	d11a      	bne.n	8008c84 <_printf_common+0xc8>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e008      	b.n	8008c64 <_printf_common+0xa8>
 8008c52:	2301      	movs	r3, #1
 8008c54:	4652      	mov	r2, sl
 8008c56:	4649      	mov	r1, r9
 8008c58:	4638      	mov	r0, r7
 8008c5a:	47c0      	blx	r8
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d103      	bne.n	8008c68 <_printf_common+0xac>
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c68:	3501      	adds	r5, #1
 8008c6a:	e7c6      	b.n	8008bfa <_printf_common+0x3e>
 8008c6c:	18e1      	adds	r1, r4, r3
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	2030      	movs	r0, #48	; 0x30
 8008c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c76:	4422      	add	r2, r4
 8008c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c80:	3302      	adds	r3, #2
 8008c82:	e7c7      	b.n	8008c14 <_printf_common+0x58>
 8008c84:	2301      	movs	r3, #1
 8008c86:	4622      	mov	r2, r4
 8008c88:	4649      	mov	r1, r9
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	47c0      	blx	r8
 8008c8e:	3001      	adds	r0, #1
 8008c90:	d0e6      	beq.n	8008c60 <_printf_common+0xa4>
 8008c92:	3601      	adds	r6, #1
 8008c94:	e7d9      	b.n	8008c4a <_printf_common+0x8e>
	...

08008c98 <_printf_i>:
 8008c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	4691      	mov	r9, r2
 8008ca0:	7e27      	ldrb	r7, [r4, #24]
 8008ca2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ca4:	2f78      	cmp	r7, #120	; 0x78
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	469a      	mov	sl, r3
 8008caa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cae:	d807      	bhi.n	8008cc0 <_printf_i+0x28>
 8008cb0:	2f62      	cmp	r7, #98	; 0x62
 8008cb2:	d80a      	bhi.n	8008cca <_printf_i+0x32>
 8008cb4:	2f00      	cmp	r7, #0
 8008cb6:	f000 80d8 	beq.w	8008e6a <_printf_i+0x1d2>
 8008cba:	2f58      	cmp	r7, #88	; 0x58
 8008cbc:	f000 80a3 	beq.w	8008e06 <_printf_i+0x16e>
 8008cc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cc8:	e03a      	b.n	8008d40 <_printf_i+0xa8>
 8008cca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cce:	2b15      	cmp	r3, #21
 8008cd0:	d8f6      	bhi.n	8008cc0 <_printf_i+0x28>
 8008cd2:	a001      	add	r0, pc, #4	; (adr r0, 8008cd8 <_printf_i+0x40>)
 8008cd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008cd8:	08008d31 	.word	0x08008d31
 8008cdc:	08008d45 	.word	0x08008d45
 8008ce0:	08008cc1 	.word	0x08008cc1
 8008ce4:	08008cc1 	.word	0x08008cc1
 8008ce8:	08008cc1 	.word	0x08008cc1
 8008cec:	08008cc1 	.word	0x08008cc1
 8008cf0:	08008d45 	.word	0x08008d45
 8008cf4:	08008cc1 	.word	0x08008cc1
 8008cf8:	08008cc1 	.word	0x08008cc1
 8008cfc:	08008cc1 	.word	0x08008cc1
 8008d00:	08008cc1 	.word	0x08008cc1
 8008d04:	08008e51 	.word	0x08008e51
 8008d08:	08008d75 	.word	0x08008d75
 8008d0c:	08008e33 	.word	0x08008e33
 8008d10:	08008cc1 	.word	0x08008cc1
 8008d14:	08008cc1 	.word	0x08008cc1
 8008d18:	08008e73 	.word	0x08008e73
 8008d1c:	08008cc1 	.word	0x08008cc1
 8008d20:	08008d75 	.word	0x08008d75
 8008d24:	08008cc1 	.word	0x08008cc1
 8008d28:	08008cc1 	.word	0x08008cc1
 8008d2c:	08008e3b 	.word	0x08008e3b
 8008d30:	680b      	ldr	r3, [r1, #0]
 8008d32:	1d1a      	adds	r2, r3, #4
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	600a      	str	r2, [r1, #0]
 8008d38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d40:	2301      	movs	r3, #1
 8008d42:	e0a3      	b.n	8008e8c <_printf_i+0x1f4>
 8008d44:	6825      	ldr	r5, [r4, #0]
 8008d46:	6808      	ldr	r0, [r1, #0]
 8008d48:	062e      	lsls	r6, r5, #24
 8008d4a:	f100 0304 	add.w	r3, r0, #4
 8008d4e:	d50a      	bpl.n	8008d66 <_printf_i+0xce>
 8008d50:	6805      	ldr	r5, [r0, #0]
 8008d52:	600b      	str	r3, [r1, #0]
 8008d54:	2d00      	cmp	r5, #0
 8008d56:	da03      	bge.n	8008d60 <_printf_i+0xc8>
 8008d58:	232d      	movs	r3, #45	; 0x2d
 8008d5a:	426d      	negs	r5, r5
 8008d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d60:	485e      	ldr	r0, [pc, #376]	; (8008edc <_printf_i+0x244>)
 8008d62:	230a      	movs	r3, #10
 8008d64:	e019      	b.n	8008d9a <_printf_i+0x102>
 8008d66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d6a:	6805      	ldr	r5, [r0, #0]
 8008d6c:	600b      	str	r3, [r1, #0]
 8008d6e:	bf18      	it	ne
 8008d70:	b22d      	sxthne	r5, r5
 8008d72:	e7ef      	b.n	8008d54 <_printf_i+0xbc>
 8008d74:	680b      	ldr	r3, [r1, #0]
 8008d76:	6825      	ldr	r5, [r4, #0]
 8008d78:	1d18      	adds	r0, r3, #4
 8008d7a:	6008      	str	r0, [r1, #0]
 8008d7c:	0628      	lsls	r0, r5, #24
 8008d7e:	d501      	bpl.n	8008d84 <_printf_i+0xec>
 8008d80:	681d      	ldr	r5, [r3, #0]
 8008d82:	e002      	b.n	8008d8a <_printf_i+0xf2>
 8008d84:	0669      	lsls	r1, r5, #25
 8008d86:	d5fb      	bpl.n	8008d80 <_printf_i+0xe8>
 8008d88:	881d      	ldrh	r5, [r3, #0]
 8008d8a:	4854      	ldr	r0, [pc, #336]	; (8008edc <_printf_i+0x244>)
 8008d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8008d8e:	bf0c      	ite	eq
 8008d90:	2308      	moveq	r3, #8
 8008d92:	230a      	movne	r3, #10
 8008d94:	2100      	movs	r1, #0
 8008d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d9a:	6866      	ldr	r6, [r4, #4]
 8008d9c:	60a6      	str	r6, [r4, #8]
 8008d9e:	2e00      	cmp	r6, #0
 8008da0:	bfa2      	ittt	ge
 8008da2:	6821      	ldrge	r1, [r4, #0]
 8008da4:	f021 0104 	bicge.w	r1, r1, #4
 8008da8:	6021      	strge	r1, [r4, #0]
 8008daa:	b90d      	cbnz	r5, 8008db0 <_printf_i+0x118>
 8008dac:	2e00      	cmp	r6, #0
 8008dae:	d04d      	beq.n	8008e4c <_printf_i+0x1b4>
 8008db0:	4616      	mov	r6, r2
 8008db2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008db6:	fb03 5711 	mls	r7, r3, r1, r5
 8008dba:	5dc7      	ldrb	r7, [r0, r7]
 8008dbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dc0:	462f      	mov	r7, r5
 8008dc2:	42bb      	cmp	r3, r7
 8008dc4:	460d      	mov	r5, r1
 8008dc6:	d9f4      	bls.n	8008db2 <_printf_i+0x11a>
 8008dc8:	2b08      	cmp	r3, #8
 8008dca:	d10b      	bne.n	8008de4 <_printf_i+0x14c>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	07df      	lsls	r7, r3, #31
 8008dd0:	d508      	bpl.n	8008de4 <_printf_i+0x14c>
 8008dd2:	6923      	ldr	r3, [r4, #16]
 8008dd4:	6861      	ldr	r1, [r4, #4]
 8008dd6:	4299      	cmp	r1, r3
 8008dd8:	bfde      	ittt	le
 8008dda:	2330      	movle	r3, #48	; 0x30
 8008ddc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008de0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008de4:	1b92      	subs	r2, r2, r6
 8008de6:	6122      	str	r2, [r4, #16]
 8008de8:	f8cd a000 	str.w	sl, [sp]
 8008dec:	464b      	mov	r3, r9
 8008dee:	aa03      	add	r2, sp, #12
 8008df0:	4621      	mov	r1, r4
 8008df2:	4640      	mov	r0, r8
 8008df4:	f7ff fee2 	bl	8008bbc <_printf_common>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d14c      	bne.n	8008e96 <_printf_i+0x1fe>
 8008dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008e00:	b004      	add	sp, #16
 8008e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e06:	4835      	ldr	r0, [pc, #212]	; (8008edc <_printf_i+0x244>)
 8008e08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	680e      	ldr	r6, [r1, #0]
 8008e10:	061f      	lsls	r7, r3, #24
 8008e12:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e16:	600e      	str	r6, [r1, #0]
 8008e18:	d514      	bpl.n	8008e44 <_printf_i+0x1ac>
 8008e1a:	07d9      	lsls	r1, r3, #31
 8008e1c:	bf44      	itt	mi
 8008e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e22:	6023      	strmi	r3, [r4, #0]
 8008e24:	b91d      	cbnz	r5, 8008e2e <_printf_i+0x196>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	f023 0320 	bic.w	r3, r3, #32
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	2310      	movs	r3, #16
 8008e30:	e7b0      	b.n	8008d94 <_printf_i+0xfc>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	f043 0320 	orr.w	r3, r3, #32
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	2378      	movs	r3, #120	; 0x78
 8008e3c:	4828      	ldr	r0, [pc, #160]	; (8008ee0 <_printf_i+0x248>)
 8008e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e42:	e7e3      	b.n	8008e0c <_printf_i+0x174>
 8008e44:	065e      	lsls	r6, r3, #25
 8008e46:	bf48      	it	mi
 8008e48:	b2ad      	uxthmi	r5, r5
 8008e4a:	e7e6      	b.n	8008e1a <_printf_i+0x182>
 8008e4c:	4616      	mov	r6, r2
 8008e4e:	e7bb      	b.n	8008dc8 <_printf_i+0x130>
 8008e50:	680b      	ldr	r3, [r1, #0]
 8008e52:	6826      	ldr	r6, [r4, #0]
 8008e54:	6960      	ldr	r0, [r4, #20]
 8008e56:	1d1d      	adds	r5, r3, #4
 8008e58:	600d      	str	r5, [r1, #0]
 8008e5a:	0635      	lsls	r5, r6, #24
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	d501      	bpl.n	8008e64 <_printf_i+0x1cc>
 8008e60:	6018      	str	r0, [r3, #0]
 8008e62:	e002      	b.n	8008e6a <_printf_i+0x1d2>
 8008e64:	0671      	lsls	r1, r6, #25
 8008e66:	d5fb      	bpl.n	8008e60 <_printf_i+0x1c8>
 8008e68:	8018      	strh	r0, [r3, #0]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6123      	str	r3, [r4, #16]
 8008e6e:	4616      	mov	r6, r2
 8008e70:	e7ba      	b.n	8008de8 <_printf_i+0x150>
 8008e72:	680b      	ldr	r3, [r1, #0]
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	600a      	str	r2, [r1, #0]
 8008e78:	681e      	ldr	r6, [r3, #0]
 8008e7a:	6862      	ldr	r2, [r4, #4]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7f7 f9a6 	bl	80001d0 <memchr>
 8008e84:	b108      	cbz	r0, 8008e8a <_printf_i+0x1f2>
 8008e86:	1b80      	subs	r0, r0, r6
 8008e88:	6060      	str	r0, [r4, #4]
 8008e8a:	6863      	ldr	r3, [r4, #4]
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e94:	e7a8      	b.n	8008de8 <_printf_i+0x150>
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	4632      	mov	r2, r6
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	47d0      	blx	sl
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d0ab      	beq.n	8008dfc <_printf_i+0x164>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	079b      	lsls	r3, r3, #30
 8008ea8:	d413      	bmi.n	8008ed2 <_printf_i+0x23a>
 8008eaa:	68e0      	ldr	r0, [r4, #12]
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	4298      	cmp	r0, r3
 8008eb0:	bfb8      	it	lt
 8008eb2:	4618      	movlt	r0, r3
 8008eb4:	e7a4      	b.n	8008e00 <_printf_i+0x168>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4632      	mov	r2, r6
 8008eba:	4649      	mov	r1, r9
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	47d0      	blx	sl
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d09b      	beq.n	8008dfc <_printf_i+0x164>
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	68e3      	ldr	r3, [r4, #12]
 8008ec8:	9903      	ldr	r1, [sp, #12]
 8008eca:	1a5b      	subs	r3, r3, r1
 8008ecc:	42ab      	cmp	r3, r5
 8008ece:	dcf2      	bgt.n	8008eb6 <_printf_i+0x21e>
 8008ed0:	e7eb      	b.n	8008eaa <_printf_i+0x212>
 8008ed2:	2500      	movs	r5, #0
 8008ed4:	f104 0619 	add.w	r6, r4, #25
 8008ed8:	e7f5      	b.n	8008ec6 <_printf_i+0x22e>
 8008eda:	bf00      	nop
 8008edc:	0800c165 	.word	0x0800c165
 8008ee0:	0800c176 	.word	0x0800c176

08008ee4 <memcpy>:
 8008ee4:	440a      	add	r2, r1
 8008ee6:	4291      	cmp	r1, r2
 8008ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008eec:	d100      	bne.n	8008ef0 <memcpy+0xc>
 8008eee:	4770      	bx	lr
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008efa:	4291      	cmp	r1, r2
 8008efc:	d1f9      	bne.n	8008ef2 <memcpy+0xe>
 8008efe:	bd10      	pop	{r4, pc}

08008f00 <memmove>:
 8008f00:	4288      	cmp	r0, r1
 8008f02:	b510      	push	{r4, lr}
 8008f04:	eb01 0402 	add.w	r4, r1, r2
 8008f08:	d902      	bls.n	8008f10 <memmove+0x10>
 8008f0a:	4284      	cmp	r4, r0
 8008f0c:	4623      	mov	r3, r4
 8008f0e:	d807      	bhi.n	8008f20 <memmove+0x20>
 8008f10:	1e43      	subs	r3, r0, #1
 8008f12:	42a1      	cmp	r1, r4
 8008f14:	d008      	beq.n	8008f28 <memmove+0x28>
 8008f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f1e:	e7f8      	b.n	8008f12 <memmove+0x12>
 8008f20:	4402      	add	r2, r0
 8008f22:	4601      	mov	r1, r0
 8008f24:	428a      	cmp	r2, r1
 8008f26:	d100      	bne.n	8008f2a <memmove+0x2a>
 8008f28:	bd10      	pop	{r4, pc}
 8008f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f32:	e7f7      	b.n	8008f24 <memmove+0x24>

08008f34 <_free_r>:
 8008f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f36:	2900      	cmp	r1, #0
 8008f38:	d048      	beq.n	8008fcc <_free_r+0x98>
 8008f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f3e:	9001      	str	r0, [sp, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f1a1 0404 	sub.w	r4, r1, #4
 8008f46:	bfb8      	it	lt
 8008f48:	18e4      	addlt	r4, r4, r3
 8008f4a:	f000 f8d3 	bl	80090f4 <__malloc_lock>
 8008f4e:	4a20      	ldr	r2, [pc, #128]	; (8008fd0 <_free_r+0x9c>)
 8008f50:	9801      	ldr	r0, [sp, #4]
 8008f52:	6813      	ldr	r3, [r2, #0]
 8008f54:	4615      	mov	r5, r2
 8008f56:	b933      	cbnz	r3, 8008f66 <_free_r+0x32>
 8008f58:	6063      	str	r3, [r4, #4]
 8008f5a:	6014      	str	r4, [r2, #0]
 8008f5c:	b003      	add	sp, #12
 8008f5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f62:	f000 b8cd 	b.w	8009100 <__malloc_unlock>
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	d90b      	bls.n	8008f82 <_free_r+0x4e>
 8008f6a:	6821      	ldr	r1, [r4, #0]
 8008f6c:	1862      	adds	r2, r4, r1
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	bf04      	itt	eq
 8008f72:	681a      	ldreq	r2, [r3, #0]
 8008f74:	685b      	ldreq	r3, [r3, #4]
 8008f76:	6063      	str	r3, [r4, #4]
 8008f78:	bf04      	itt	eq
 8008f7a:	1852      	addeq	r2, r2, r1
 8008f7c:	6022      	streq	r2, [r4, #0]
 8008f7e:	602c      	str	r4, [r5, #0]
 8008f80:	e7ec      	b.n	8008f5c <_free_r+0x28>
 8008f82:	461a      	mov	r2, r3
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	b10b      	cbz	r3, 8008f8c <_free_r+0x58>
 8008f88:	42a3      	cmp	r3, r4
 8008f8a:	d9fa      	bls.n	8008f82 <_free_r+0x4e>
 8008f8c:	6811      	ldr	r1, [r2, #0]
 8008f8e:	1855      	adds	r5, r2, r1
 8008f90:	42a5      	cmp	r5, r4
 8008f92:	d10b      	bne.n	8008fac <_free_r+0x78>
 8008f94:	6824      	ldr	r4, [r4, #0]
 8008f96:	4421      	add	r1, r4
 8008f98:	1854      	adds	r4, r2, r1
 8008f9a:	42a3      	cmp	r3, r4
 8008f9c:	6011      	str	r1, [r2, #0]
 8008f9e:	d1dd      	bne.n	8008f5c <_free_r+0x28>
 8008fa0:	681c      	ldr	r4, [r3, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	6053      	str	r3, [r2, #4]
 8008fa6:	4421      	add	r1, r4
 8008fa8:	6011      	str	r1, [r2, #0]
 8008faa:	e7d7      	b.n	8008f5c <_free_r+0x28>
 8008fac:	d902      	bls.n	8008fb4 <_free_r+0x80>
 8008fae:	230c      	movs	r3, #12
 8008fb0:	6003      	str	r3, [r0, #0]
 8008fb2:	e7d3      	b.n	8008f5c <_free_r+0x28>
 8008fb4:	6825      	ldr	r5, [r4, #0]
 8008fb6:	1961      	adds	r1, r4, r5
 8008fb8:	428b      	cmp	r3, r1
 8008fba:	bf04      	itt	eq
 8008fbc:	6819      	ldreq	r1, [r3, #0]
 8008fbe:	685b      	ldreq	r3, [r3, #4]
 8008fc0:	6063      	str	r3, [r4, #4]
 8008fc2:	bf04      	itt	eq
 8008fc4:	1949      	addeq	r1, r1, r5
 8008fc6:	6021      	streq	r1, [r4, #0]
 8008fc8:	6054      	str	r4, [r2, #4]
 8008fca:	e7c7      	b.n	8008f5c <_free_r+0x28>
 8008fcc:	b003      	add	sp, #12
 8008fce:	bd30      	pop	{r4, r5, pc}
 8008fd0:	200000c0 	.word	0x200000c0

08008fd4 <_malloc_r>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	1ccd      	adds	r5, r1, #3
 8008fd8:	f025 0503 	bic.w	r5, r5, #3
 8008fdc:	3508      	adds	r5, #8
 8008fde:	2d0c      	cmp	r5, #12
 8008fe0:	bf38      	it	cc
 8008fe2:	250c      	movcc	r5, #12
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	db01      	blt.n	8008fee <_malloc_r+0x1a>
 8008fea:	42a9      	cmp	r1, r5
 8008fec:	d903      	bls.n	8008ff6 <_malloc_r+0x22>
 8008fee:	230c      	movs	r3, #12
 8008ff0:	6033      	str	r3, [r6, #0]
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ff6:	f000 f87d 	bl	80090f4 <__malloc_lock>
 8008ffa:	4921      	ldr	r1, [pc, #132]	; (8009080 <_malloc_r+0xac>)
 8008ffc:	680a      	ldr	r2, [r1, #0]
 8008ffe:	4614      	mov	r4, r2
 8009000:	b99c      	cbnz	r4, 800902a <_malloc_r+0x56>
 8009002:	4f20      	ldr	r7, [pc, #128]	; (8009084 <_malloc_r+0xb0>)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	b923      	cbnz	r3, 8009012 <_malloc_r+0x3e>
 8009008:	4621      	mov	r1, r4
 800900a:	4630      	mov	r0, r6
 800900c:	f000 f862 	bl	80090d4 <_sbrk_r>
 8009010:	6038      	str	r0, [r7, #0]
 8009012:	4629      	mov	r1, r5
 8009014:	4630      	mov	r0, r6
 8009016:	f000 f85d 	bl	80090d4 <_sbrk_r>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	d123      	bne.n	8009066 <_malloc_r+0x92>
 800901e:	230c      	movs	r3, #12
 8009020:	6033      	str	r3, [r6, #0]
 8009022:	4630      	mov	r0, r6
 8009024:	f000 f86c 	bl	8009100 <__malloc_unlock>
 8009028:	e7e3      	b.n	8008ff2 <_malloc_r+0x1e>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	1b5b      	subs	r3, r3, r5
 800902e:	d417      	bmi.n	8009060 <_malloc_r+0x8c>
 8009030:	2b0b      	cmp	r3, #11
 8009032:	d903      	bls.n	800903c <_malloc_r+0x68>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	441c      	add	r4, r3
 8009038:	6025      	str	r5, [r4, #0]
 800903a:	e004      	b.n	8009046 <_malloc_r+0x72>
 800903c:	6863      	ldr	r3, [r4, #4]
 800903e:	42a2      	cmp	r2, r4
 8009040:	bf0c      	ite	eq
 8009042:	600b      	streq	r3, [r1, #0]
 8009044:	6053      	strne	r3, [r2, #4]
 8009046:	4630      	mov	r0, r6
 8009048:	f000 f85a 	bl	8009100 <__malloc_unlock>
 800904c:	f104 000b 	add.w	r0, r4, #11
 8009050:	1d23      	adds	r3, r4, #4
 8009052:	f020 0007 	bic.w	r0, r0, #7
 8009056:	1ac2      	subs	r2, r0, r3
 8009058:	d0cc      	beq.n	8008ff4 <_malloc_r+0x20>
 800905a:	1a1b      	subs	r3, r3, r0
 800905c:	50a3      	str	r3, [r4, r2]
 800905e:	e7c9      	b.n	8008ff4 <_malloc_r+0x20>
 8009060:	4622      	mov	r2, r4
 8009062:	6864      	ldr	r4, [r4, #4]
 8009064:	e7cc      	b.n	8009000 <_malloc_r+0x2c>
 8009066:	1cc4      	adds	r4, r0, #3
 8009068:	f024 0403 	bic.w	r4, r4, #3
 800906c:	42a0      	cmp	r0, r4
 800906e:	d0e3      	beq.n	8009038 <_malloc_r+0x64>
 8009070:	1a21      	subs	r1, r4, r0
 8009072:	4630      	mov	r0, r6
 8009074:	f000 f82e 	bl	80090d4 <_sbrk_r>
 8009078:	3001      	adds	r0, #1
 800907a:	d1dd      	bne.n	8009038 <_malloc_r+0x64>
 800907c:	e7cf      	b.n	800901e <_malloc_r+0x4a>
 800907e:	bf00      	nop
 8009080:	200000c0 	.word	0x200000c0
 8009084:	200000c4 	.word	0x200000c4

08009088 <_realloc_r>:
 8009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908a:	4607      	mov	r7, r0
 800908c:	4614      	mov	r4, r2
 800908e:	460e      	mov	r6, r1
 8009090:	b921      	cbnz	r1, 800909c <_realloc_r+0x14>
 8009092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009096:	4611      	mov	r1, r2
 8009098:	f7ff bf9c 	b.w	8008fd4 <_malloc_r>
 800909c:	b922      	cbnz	r2, 80090a8 <_realloc_r+0x20>
 800909e:	f7ff ff49 	bl	8008f34 <_free_r>
 80090a2:	4625      	mov	r5, r4
 80090a4:	4628      	mov	r0, r5
 80090a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a8:	f000 f830 	bl	800910c <_malloc_usable_size_r>
 80090ac:	42a0      	cmp	r0, r4
 80090ae:	d20f      	bcs.n	80090d0 <_realloc_r+0x48>
 80090b0:	4621      	mov	r1, r4
 80090b2:	4638      	mov	r0, r7
 80090b4:	f7ff ff8e 	bl	8008fd4 <_malloc_r>
 80090b8:	4605      	mov	r5, r0
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d0f2      	beq.n	80090a4 <_realloc_r+0x1c>
 80090be:	4631      	mov	r1, r6
 80090c0:	4622      	mov	r2, r4
 80090c2:	f7ff ff0f 	bl	8008ee4 <memcpy>
 80090c6:	4631      	mov	r1, r6
 80090c8:	4638      	mov	r0, r7
 80090ca:	f7ff ff33 	bl	8008f34 <_free_r>
 80090ce:	e7e9      	b.n	80090a4 <_realloc_r+0x1c>
 80090d0:	4635      	mov	r5, r6
 80090d2:	e7e7      	b.n	80090a4 <_realloc_r+0x1c>

080090d4 <_sbrk_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4d06      	ldr	r5, [pc, #24]	; (80090f0 <_sbrk_r+0x1c>)
 80090d8:	2300      	movs	r3, #0
 80090da:	4604      	mov	r4, r0
 80090dc:	4608      	mov	r0, r1
 80090de:	602b      	str	r3, [r5, #0]
 80090e0:	f7f9 fdea 	bl	8002cb8 <_sbrk>
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	d102      	bne.n	80090ee <_sbrk_r+0x1a>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	b103      	cbz	r3, 80090ee <_sbrk_r+0x1a>
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	20000420 	.word	0x20000420

080090f4 <__malloc_lock>:
 80090f4:	4801      	ldr	r0, [pc, #4]	; (80090fc <__malloc_lock+0x8>)
 80090f6:	f000 b811 	b.w	800911c <__retarget_lock_acquire_recursive>
 80090fa:	bf00      	nop
 80090fc:	20000428 	.word	0x20000428

08009100 <__malloc_unlock>:
 8009100:	4801      	ldr	r0, [pc, #4]	; (8009108 <__malloc_unlock+0x8>)
 8009102:	f000 b80c 	b.w	800911e <__retarget_lock_release_recursive>
 8009106:	bf00      	nop
 8009108:	20000428 	.word	0x20000428

0800910c <_malloc_usable_size_r>:
 800910c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009110:	1f18      	subs	r0, r3, #4
 8009112:	2b00      	cmp	r3, #0
 8009114:	bfbc      	itt	lt
 8009116:	580b      	ldrlt	r3, [r1, r0]
 8009118:	18c0      	addlt	r0, r0, r3
 800911a:	4770      	bx	lr

0800911c <__retarget_lock_acquire_recursive>:
 800911c:	4770      	bx	lr

0800911e <__retarget_lock_release_recursive>:
 800911e:	4770      	bx	lr

08009120 <_init>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	bf00      	nop
 8009124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009126:	bc08      	pop	{r3}
 8009128:	469e      	mov	lr, r3
 800912a:	4770      	bx	lr

0800912c <_fini>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	bf00      	nop
 8009130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009132:	bc08      	pop	{r3}
 8009134:	469e      	mov	lr, r3
 8009136:	4770      	bx	lr
